
declare namespace sap.ui {
	/**
	 * SAPUI5 base classes
	 */
	type base = any
	/**
	 * Common basic controls, mainly intended for desktop scenarios
	 */
	type commons = any
	/**
	 * The SAPUI5 Core Runtime.
	 * 
	 * Contains the UI5 jQuery plugins (jQuery.sap.*), the Core and all its components,
	 * base classes for Controls, Components and the Model View Controller classes.
	 */
	namespace core {
		/**
		 * Applies the support for custom style classes on the prototype of a <code>sap.ui.core.Element</code>.
		 * 
		 * All controls (subclasses of <code>sap.ui.core.Control</code>) provide the support custom style classes. The control API provides functions
		 * to the application which allow it to add, remove or change style classes for the control.
		 * In general, this option is not available for elements because elements do not necessarily have a representation in the DOM.
		 * 
		 * This function can be used by a control developer to explicitly enrich the API of his/her element implementation with the API functions
		 * for the custom style class support. It must be called on the prototype of the element.
		 * 
		 * <b>Usage Example:</b>
		 * <pre>
		 * sap.ui.define(['sap/ui/core/Element', 'sap/ui/core/CustomStyleClassSupport'], function(Element, CustomStyleClassSupport) {
		 *    "use strict";
		 *    var MyElement = Element.extend("my.MyElement", {
		 *       metadata : {
		 *          //...
		 *       }
		 *       //...
		 *    });
		 * 
		 *    CustomStyleClassSupport.apply(MyElement.prototype);
		 * 
		 *    return MyElement;
		 * }, true);
		 * </pre>
		 * 
		 * Furthermore, the function <code>oRenderManager.writeClasses(oElement);</code> ({@link sap.ui.core.RenderManager#writeClasses}) must be called within
		 * the renderer of the control to which the element belongs, when writing the root tag of the element. This ensures the classes are written to the HTML.
		 * 
		 * This function adds the following functions to the elements prototype:
		 * <ul>
		 * <li><code>addStyleClass</code>: {@link sap.ui.core.Control#addStyleClass}</li>
		 * <li><code>removeStyleClass</code>: {@link sap.ui.core.Control#removeStyleClass}</li>
		 * <li><code>toggleStyleClass</code>: {@link sap.ui.core.Control#toggleStyleClass}</li>
		 * <li><code>hasStyleClass</code>: {@link sap.ui.core.Control#hasStyleClass}</li>
		 * </ul>
		 * In addition the clone function of the element is extended to ensure that the custom style classes are also available on the cloned element.
		 * 
		 * <b>Note:</b> This function can only be used <i>within</i> control development. An application cannot add style class support on existing elements by calling this function.
		 */
		function CustomStyleClassSupport();
	}
	/**
	 * SAPUI5 library with non-public controls, used in the UI5 demokit (SDK)
	 */
	type demokit = any
	/**
	 * Device and Feature Detection API: Provides information about the used browser / device and cross platform support for certain events
	 * like media queries, orientation change or resizing.
	 * 
	 * This API is independent from any other part of the UI5 framework. This allows it to be loaded beforehand, if it is needed, to create the UI5 bootstrap
	 * dynamically depending on the capabilities of the browser or device.
	 */
	type Device = any
	/**
	 * SAPUI5 library with layout controls.
	 */
	type layout = any
	/**
	 * The SAPUI5 Data Binding API.
	 * 
	 * The default binding mode for model implementations (if not implemented otherwise) is two way and the supported binding modes by the model
	 * are one way, two way and one time. The default binding mode can be changed by the application for each model instance.
	 * A model implementation should specify its supported binding modes and set the default binding mode accordingly
	 * (e.g. if the model supports only one way binding the default binding mode should also be set to one way).
	 * 
	 * The default size limit for models is 100. The size limit determines the number of entries used for the list bindings.
	 */
	namespace model {
		/**
		 * FormatException class
		 * 
		 * This exception is thrown, when an error occurs while trying to convert a value of the model to
		 * a specific property value in the UI.
		 */
		function FormatException();
		/**
		 * ParseException class
		 * 
		 * This exception is thrown, when a parse error occurs while converting a
		 * string value to a specific property type in the model.
		 */
		function ParseException();
		/**
		 * ValidateException class
		 * 
		 * This exception is thrown, when a validation error occurs while checking the
		 * defined constraints for a type.
		 */
		function ValidateException();
	}
	/**
	 * Suite controls library.
	 */
	type suite = any
	/**
	 * Table-like controls, mainly for desktop scenarios.
	 */
	type table = any
	/**
	 * Unified controls intended for both, mobile and desktop scenarios
	 */
	type unified = any
	/**
	 * Controls that implement the SAP User Experience (UX) Guidelines 3.0
	 */
	type ux3 = any
}

declare namespace sap.ui.base {
	class Event extends sap.ui.base.Object{
		/**
		 * Creates an event with the given <code>sId</code>, linked to the provided <code>oSource</code> and enriched with the <code>mParameters</code>.
		 * @param sId The id of the event
		 * @param oSource The source of the event
		 * @param mParameters A map of parameters for this event
		 */
		 constructor(sId:string, oSource:sap.ui.base.EventProvider, mParameters:any);
		/**
		 * Cancel bubbling of the event.
		 * 
		 * <b>Note:</b> This function only has an effect if the bubbling of the event is supported by the event source.
		 */
		 cancelBubble();
		/**
		 * Creates a new subclass of class sap.ui.base.Event with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns the id of the event.
		 * @return The id of the event
		 */
		 getId(): string;
		/**
		 * Returns a metadata object for class sap.ui.base.Event.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Returns the value of the parameter with the given sName.
		 * @param sName The name of the parameter to return
		 * @return The value for the named parameter
		 */
		 getParameter(sName:string): any;
		/**
		 * Returns all parameter values of the event keyed by their names.
		 * @return All parameters of the event keyed by name
		 */
		 getParameters(): any;
		/**
		 * Returns the event provider on which the event was fired.
		 * @return The source of the event
		 */
		 getSource(): sap.ui.base.EventProvider;
		/**
		 * Prevent the default action of this event.
		 * 
		 * <b>Note:</b> This function only has an effect if preventing the default action of the event is supported by the event source.
		 */
		 preventDefault();
	}
	class EventProvider extends sap.ui.base.Object{
		/**
		 * Creates an instance of EventProvider.
		 */
		 constructor();
		/**
		 * Attaches an event handler to the event with the given identifier.
		 * @param sEventId The identifier of the event to listen for
		 * @param fnFunction The handler function to call when the event occurs. This function will be called in the context of the
		 *                       <code>oListener</code> instance (if present) or on the event provider instance. The event
		 *                       object ({@link sap.ui.base.Event}) is provided as first argument of the handler. Handlers must not change
		 *                       the content of the event. The second argument is the specified <code>oData</code> instance (if present).
		 * @param oData An object that will be passed to the handler along with the event object when the event is fired
		 * @param oListener The object that wants to be notified when the event occurs (<code>this</code> context within the
		 *                        handler function). If it is not specified, the handler function is called in the context of the event provider.
		 * @return Returns <code>this</code> to allow method chaining
		 */
		 attachEvent(sEventId:string, fnFunction:any, oData?:any, oListener?:any): sap.ui.base.EventProvider;
		/**
		 * Attaches an event handler, called one time only, to the event with the given identifier.
		 * 
		 * When the event occurs, the handler function is called and the handler registration is automatically removed afterwards.
		 * @param sEventId The identifier of the event to listen for
		 * @param fnFunction The handler function to call when the event occurs. This function will be called in the context of the
		 *                       <code>oListener</code> instance (if present) or on the event provider instance. The event
		 *                       object ({@link sap.ui.base.Event}) is provided as first argument of the handler. Handlers must not change
		 *                       the content of the event. The second argument is the specified <code>oData</code> instance (if present).
		 * @param oData An object that will be passed to the handler along with the event object when the event is fired
		 * @param oListener The object that wants to be notified when the event occurs (<code>this</code> context within the
		 *                        handler function). If it is not specified, the handler function is called in the context of the event provider.
		 * @return Returns <code>this</code> to allow method chaining
		 */
		 attachEventOnce(sEventId:string, fnFunction:any, oData?:any, oListener?:any): sap.ui.base.EventProvider;
		/**
		 * Cleans up the internal structures and removes all event handlers.
		 * 
		 * The object must not be used anymore after destroy was called.
		 */
		 destroy();
		/**
		 * Removes a previously attached event handler from the event with the given identifier.
		 * 
		 * The passed parameters must match those used for registration with {@link #attachEvent} beforehand.
		 * @param sEventId The identifier of the event to detach from
		 * @param fnFunction The handler function to detach from the event
		 * @param oListener The object that wanted to be notified when the event occurred
		 * @return Returns <code>this</code> to allow method chaining
		 */
		 detachEvent(sEventId:string, fnFunction:any, oListener?:any): sap.ui.base.EventProvider;
		/**
		 * Creates a new subclass of class sap.ui.base.EventProvider with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Fires an {@link sap.ui.base.Event event} with the given settings and notifies all attached event handlers.
		 * @param sEventId The identifier of the event to fire
		 * @param mParameters The parameters which should be carried by the event
		 * @param bAllowPreventDefault Defines whether function <code>preventDefault</code> is supported on the fired event
		 * @param bEnableEventBubbling Defines whether event bubbling is enabled on the fired event. Set to <code>true</code> the event is also forwarded to the parent(s)
		 *                                   of the event provider ({@link #getEventingParent}) until the bubbling of the event is stopped or no parent is available anymore.
		 * @return Returns <code>this</code> to allow method chaining. When <code>preventDefault</code> is supported on the fired event
		 *                                             the function returns <code>true</code> if the default action should be executed, <code>false</code> otherwise.
		 */
		protected fireEvent(sEventId:string, mParameters?:any, bAllowPreventDefault?:boolean, bEnableEventBubbling?:boolean): sap.ui.base.EventProvider|boolean;
		/**
		 * Returns the parent in the eventing hierarchy of this object.
		 * 
		 * Per default this returns null, but if eventing is used in objects, which are hierarchically
		 * structured, this can be overwritten to make the object hierarchy visible to the eventing and
		 * enables the use of event bubbling within this object hierarchy.
		 * @return The parent event provider
		 */
		protected getEventingParent(): sap.ui.base.EventProvider;
		/**
		 * Returns a metadata object for class sap.ui.base.EventProvider.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Returns whether there are any registered event handlers for the event with the given identifier.
		 * @param sEventId The identifier of the event
		 * @return Whether there are any registered event handlers
		 */
		protected hasListeners(sEventId:string): boolean;
		/**
		 * Returns a string representation of this object.
		 * 
		 * In case there is no class or id information, a simple static string is returned.
		 * Subclasses should override this method.
		 * @return A string description of this event provider
		 */
		 toString(): string;
	}
	class Interface {
		/**
		 * Constructs an instance of sap.ui.base.Interface which restricts access to methods marked as public.
		 * @param oObject the instance that needs an interface created
		 * @param aMethods the names of the methods, that should be available on this interface
		 */
		 constructor(oObject:sap.ui.base.Object, aMethods:string[]);
	}
	class ManagedObject extends sap.ui.base.EventProvider{
		/**
		 * Constructs and initializes a managed object with the given <code>sId</code> and settings.
		 * 
		 * If the optional <code>mSettings</code> are given, they must be a simple object
		 * that defines values for properties, aggregations, associations or events keyed by their name.
		 * 
		 * <b>Valid Names and Value Ranges:</b>
		 * 
		 * The property (key) names supported in the object literal are exactly the (case sensitive)
		 * names documented in the JSDoc for the properties, aggregations, associations and events
		 * of the current class and its base classes. Note that for 0..n aggregations and associations this
		 * name usually is the plural name, whereas it is the singular name in case of 0..1 relations.
		 * 
		 * If a key name is ambiguous for a specific managed object class (e.g. a property has the same
		 * name as an event), then this method prefers property, aggregation, association and
		 * event in that order. To resolve such ambiguities, the keys can be prefixed with
		 * <code>aggregation:</code>, <code>association:</code> or <code>event:</code>
		 * (such keys containing a colon (':') must be quoted to be valid Javascript).
		 * 
		 * The possible values for a setting depend on its kind:
		 * <ul>
		 * <li>for simple properties, the value has to match the documented type of the property (no type conversion occurs)
		 * <li>for 0..1 aggregations, the value has to be an instance of the aggregated type
		 * <li>for 0..n aggregations, the value has to be an array of instances of the aggregated type or a single instance
		 * <li>for 0..1 associations, an instance of the associated type or an id (string) is accepted
		 * <li>for 0..n associations, an array of instances of the associated type or of Ids is accepted
		 * <li>for events either a function (event handler) is accepted or an array of length 2
		 *     where the first element is a function and the 2nd element is an object to invoke the method on.
		 * </ul>
		 * 
		 * Each subclass should document the name and type of its supported settings in its constructor documentation.
		 * 
		 * Besides the settings documented below, ManagedObject itself supports the following special settings:
		 * <ul>
		 * <li><code>id : <i>sap.ui.core.ID</i></code> an ID for the new instance. Some subclasses (Element, Component) require the id
		 *   to be unique in a specific scope (e.g. an Element Id must be unique across all Elements, a Component id must
		 *   be unique across all Components).
		 * <li><code>models : <i>object</i></code> a map of {@link sap.ui.model.Model} instances keyed by their model name (alias).
		 *   Each entry with key <i>k</i> in this object has the same effect as a call <code>this.setModel(models[k], k);</code>.</li>
		 * <li><code>bindingContexts : <i>object</i></code> a map of {@link sap.ui.model.Context} instances keyed by their model name.
		 *   Each entry with key <i>k</i> in this object has the same effect as a call <code>this.setBindingContext(bindingContexts[k], k);</code></li>
		 * <li><code>objectBindings : <i>object</i></code>  a map of binding paths keyed by the corresponding model name.
		 *   Each entry with key <i>k</i> in this object has the same effect as a call <code>this.bindObject(objectBindings[k], k);</code></li>
		 * </ul>
		 * @param sId id for the new managed object; generated automatically if no non-empty id is given
		 *      Note: this can be omitted, no matter whether <code>mSettings</code> will be given or not!
		 * @param mSettings Optional map/JSON-object with initial property values, aggregated objects etc. for the new object
		 * @param oScope Scope object for resolving string based type and formatter references in bindings.
		 *      When a scope object is given, <code>mSettings</code> cannot be omitted, at least <code>null</code> or an empty object literal must be given.
		 */
		 constructor(sId?:string, mSettings?:any, oScope?:any);
		/**
		 * Adds some entity <code>oObject</code> to the aggregation identified by <code>sAggregationName</code>.
		 * 
		 * If the given object is not valid with regard to the aggregation (if it is not an instance
		 * of the type specified for that aggregation) or when the method is called for an aggregation
		 * of cardinality 0..1, then an Error is thrown (see {@link #validateAggregation}.
		 * 
		 * If the aggregation already has content, the new object will be added after the current content.
		 * If the new object was already contained in the aggregation, it will be moved to the end.
		 * 
		 * <b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>.
		 * Applications or frameworks must not use this method to generically add an object to an aggregation.
		 * Use the concrete method add<i>XYZ</i> for aggregation 'XYZ' or the generic {@link #applySettings} instead.
		 * @param sAggregationName the string identifying the aggregation that <code>oObject</code> should be added to.
		 * @param oObject the object to add; if empty, nothing is added
		 * @param bSuppressInvalidate if true, this ManagedObject as well as the added child are not marked as changed
		 * @return Returns <code>this</code> to allow method chaining
		 */
		protected addAggregation(sAggregationName:string, oObject:sap.ui.base.ManagedObject, bSuppressInvalidate?:boolean): sap.ui.base.ManagedObject;
		/**
		 * Adds some object with the ID <code>sId</code> to the association identified by <code>sAssociationName</code> and
		 * marks this ManagedObject as changed.
		 * 
		 * This method does not avoid duplicates.
		 * 
		 * <b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>.
		 * Applications or frameworks must not use this method to generically add an object to an association.
		 * Use the concrete method add<i>XYZ</i> for association 'XYZ' or the generic {@link #applySettings} instead.
		 * @param sAssociationName the string identifying the association the object should be added to.
		 * @param sId the ID of the ManagedObject object to add; if empty, nothing is added; if a <code>sap.ui.base.ManagedObject</code> is given, its ID is added
		 * @param bSuppressInvalidate if true, this managed object as well as the newly associated object are not marked as changed
		 * @return Returns <code>this</code> to allow method chaining
		 */
		protected addAssociation(sAssociationName:string, sId:string|sap.ui.base.ManagedObject, bSuppressInvalidate?:boolean): sap.ui.base.ManagedObject;
		/**
		 * Sets all the properties, aggregations, associations and event handlers as given in
		 * the object literal <code>mSettings</code>. If a property, aggregation, etc.
		 * is not listed in <code>mSettings</code>, then its value is not changed by this method.
		 * 
		 * For properties and 0..1 aggregations/associations, any given setting overwrites
		 * the current value. For 0..n aggregations, the given values are appended; event
		 * listeners are registered in addition to existing ones.
		 * 
		 * For the possible keys and values in <code>mSettings</code> see the general
		 * documentation in {@link sap.ui.base.ManagedObject} or the specific documentation
		 * of the constructor of the concrete managed object class.
		 * @param mSettings the settings to apply to this managed object
		 * @param oScope Scope object to resolve types and formatters
		 * @return Returns <code>this</code> to allow method chaining
		 */
		 applySettings(mSettings:any, oScope?:any): sap.ui.base.ManagedObject;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>formatError</code> event of this <code>sap.ui.base.ManagedObject</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.ui.base.ManagedObject</code> itself.
		 * 
		 * Fired when a new value for a bound property should have been propagated from the model,
		 * but formatting the value failed with an exception.
		 * @param fnFunction The function to be called when the event occurs
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.base.ManagedObject</code> itself
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 attachFormatError(fnFunction:any, oData?:any, oListener?:any): sap.ui.base.ManagedObject;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>modelContextChange</code> event of this <code>sap.ui.base.ManagedObject</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.ui.base.ManagedObject</code> itself.
		 * 
		 * Fired when models or contexts are changed on this object (either by calling setModel/setBindingContext or due to propagation)
		 * @param fnFunction The function to be called when the event occurs
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.base.ManagedObject</code> itself
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 attachModelContextChange(fnFunction:any, oData?:any, oListener?:any): sap.ui.base.ManagedObject;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>parseError</code> event of this <code>sap.ui.base.ManagedObject</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.ui.base.ManagedObject</code> itself.
		 * 
		 * Fired when a new value for a bound property should have been propagated to the model,
		 * but parsing the value failed with an exception.
		 * @param fnFunction The function to be called when the event occurs
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.base.ManagedObject</code> itself
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 attachParseError(fnFunction:any, oData?:any, oListener?:any): sap.ui.base.ManagedObject;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>validationError</code> event of this <code>sap.ui.base.ManagedObject</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.ui.base.ManagedObject</code> itself.
		 * 
		 * Fired when a new value for a bound property should have been propagated to the model,
		 * but validating the value failed with an exception.
		 * @param fnFunction The function to be called when the event occurs
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.base.ManagedObject</code> itself
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 attachValidationError(fnFunction:any, oData?:any, oListener?:any): sap.ui.base.ManagedObject;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>validationSuccess</code> event of this <code>sap.ui.base.ManagedObject</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.ui.base.ManagedObject</code> itself.
		 * 
		 * Fired after a new value for a bound property has been propagated to the model.
		 * Only fired, when the binding uses a data type.
		 * @param fnFunction The function to be called when the event occurs
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.base.ManagedObject</code> itself
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 attachValidationSuccess(fnFunction:any, oData?:any, oListener?:any): sap.ui.base.ManagedObject;
		/**
		 * Bind an aggregation to the model.
		 * 
		 * The bound aggregation will use the given template, clone it for each item
		 * which exists in the bound list and set the appropriate binding context.
		 * This is a generic method which can be used to bind any aggregation to the
		 * model. A managed object may flag aggregations in the metamodel with
		 * bindable="bindable" to get typed bind<i>Something</i> methods for those aggregations.
		 * @param sName the aggregation to bind
		 * @param oBindingInfo the binding info
		 * @return reference to the instance itself
		 */
		 bindAggregation(sName:string, oBindingInfo:any): sap.ui.base.ManagedObject;
		/**
		 * Bind the object to the referenced entity in the model, which is used as the binding context
		 * to resolve bound properties or aggregations of the object itself and all of its children
		 * relatively to the given path.
		 * If a relative binding path is used, this will be applied whenever the parent context changes.
		 * @param vPath the binding path or an object with more detailed binding options
		 * @param mParameters map of additional parameters for this binding (only taken into account when vPath is a string in that case the properties described for vPath above are valid here).
		 * The supported parameters are listed in the corresponding model-specific implementation of <code>sap.ui.model.ContextBinding</code>.
		 * @return reference to the instance itself
		 */
		 bindObject(vPath:string|any, mParameters?:any): sap.ui.base.ManagedObject;
		/**
		 * Bind a property to the model.
		 * The Setter for the given property will be called with the value retrieved
		 * from the data model.
		 * This is a generic method which can be used to bind any property to the
		 * model. A managed object may flag properties in the metamodel with
		 * bindable="bindable" to get typed bind methods for a property.
		 * A composite property binding which may have multiple paths (also known as Calculated Fields) can be declared using the parts parameter.
		 * Note a composite binding is read only (One Way).
		 * @param sName the name of the property
		 * @param oBindingInfo the binding information
		 * @return reference to the instance itself
		 */
		 bindProperty(sName:string, oBindingInfo:any): sap.ui.base.ManagedObject;
		/**
		 * Clones a tree of objects starting with the object on which clone is called first (root object).
		 * 
		 * The ids within the newly created clone tree are derived from the original ids by appending
		 * the given <code>sIdSuffix</code> (if no suffix is given, one will be created; it will be
		 * unique across multiple clone calls).
		 * 
		 * The <code>oOptions</code> configuration object can have the following properties:
		 * <ul>
		 * <li>The boolean value <code>cloneChildren</code> specifies wether associations/aggregations will be cloned</li>
		 * <li>The boolean value <code>cloneBindings</code> specifies if bindings will be cloned</li>
		 * </ul>
		 * 
		 * For each cloned object the following settings are cloned based on the metadata of the object and the defined options:
		 * <ul>
		 * <li>all properties that are not bound. If cloneBinding is false even these properties will be cloned;
		 * the values are used by reference, they are not cloned</li>
		 * <li>all aggregated objects that are not bound. If cloneBinding is false even the ones that are bound will be cloned;
		 * they are all cloned recursively using the same <code>sIdSuffix</code></li>
		 * <li>all associated controls; when an association points to an object inside the cloned object tree,
		 *     then the cloned association will be modified to that it points to the clone of the target object.
		 *     When the association points to a managed object outside of the cloned object tree, then its
		 *     target won't be changed.</li>
		 * <li>all models set via setModel(); used by reference </li>
		 * <li>all property and aggregation bindings (if cloneBindings is true); the pure binding infos (path, model name) are
		 *     cloned, but all other information like template control or factory function,
		 *     data type or formatter function are copied by reference. The bindings themselves
		 *     are created anew as they are specific for the combination (object, property, model).
		 *     As a result, any later changes to a binding of the original object are not reflected
		 *     in the clone, but changes to e.g the type or template etc. are.</li>
		 * </ul>
		 * 
		 * Each clone is created by first collecting the above mentioned settings and then creating
		 * a new instance with the normal constructor function. As a result, any side effects of
		 * mutator methods (setProperty etc.) or init hooks are repeated during clone creation.
		 * There is no need to override <code>clone()</code> just to reproduce these internal settings!
		 * 
		 * Custom controls however can override <code>clone()</code> to implement additional clone steps.
		 * They usually will first call <code>clone()</code> on the super class and then modify the
		 * returned clone accordingly.
		 * 
		 * Applications <b>must never provide</b> the second parameter <code>aLocaleIds</code>.
		 * It is determined automatically for the root object (and its non-existance also serves as
		 * an indicator for the root object). Specifying it will break the implementation of <code>clone()</code>.
		 * @param sIdSuffix a suffix to be appended to the cloned object id
		 * @param aLocalIds an array of local IDs within the cloned hierarchy (internally used)
		 * @param oOptions configuration object
		 * @return reference to the newly created clone
		 */
		protected clone(sIdSuffix?:string, aLocalIds?:string[], oOptions?:any): sap.ui.base.ManagedObject;
		/**
		 * Creates a new ManagedObject from the given data.
		 * 
		 * If vData is a managed object already, that object is returned.
		 * If vData is an object (literal), then a new object is created with vData as settings.
		 * The type of the object is either determined by a "Type" entry in the vData or
		 * by a type information in the oKeyInfo object
		 * @param vData the data to create the object from
		 * @param oKeyInfo 
		 * @param oScope Scope object to resolve types and formatters in bindings
		 */
		 create(vData:sap.ui.base.ManagedObject|any, oKeyInfo:any, oScope?:any);
		/**
		 * Cleans up the resources associated with this object and all its aggregated children.
		 * 
		 * After an object has been destroyed, it can no longer be used in!
		 * 
		 * Applications should call this method if they don't need the object any longer.
		 * @param bSuppressInvalidate if true, this ManagedObject is not marked as changed
		 */
		 destroy(bSuppressInvalidate?:boolean);
		/**
		 * Destroys (all) the managed object(s) in the aggregation named <code>sAggregationName</code> and empties the
		 * aggregation. If the aggregation did contain any object, this ManagedObject is marked as changed.
		 * 
		 * <b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>.
		 * Applications or frameworks must not use this method to generically destroy all objects in an aggregation.
		 * Use the concrete method destroy<i>XYZ</i> for aggregation 'XYZ' instead.
		 * @param sAggregationName the name of the aggregation
		 * @param bSuppressInvalidate if true, this ManagedObject is not marked as changed
		 * @return Returns <code>this</code> to allow method chaining
		 */
		protected destroyAggregation(sAggregationName:string, bSuppressInvalidate?:boolean): sap.ui.base.ManagedObject;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>formatError</code> event of this <code>sap.ui.base.ManagedObject</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 detachFormatError(fnFunction:any, oListener:any): sap.ui.base.ManagedObject;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>modelContextChange</code> event of this <code>sap.ui.base.ManagedObject</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 detachModelContextChange(fnFunction:any, oListener:any): sap.ui.base.ManagedObject;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>parseError</code> event of this <code>sap.ui.base.ManagedObject</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 detachParseError(fnFunction:any, oListener:any): sap.ui.base.ManagedObject;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>validationError</code> event of this <code>sap.ui.base.ManagedObject</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 detachValidationError(fnFunction:any, oListener:any): sap.ui.base.ManagedObject;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>validationSuccess</code> event of this <code>sap.ui.base.ManagedObject</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 detachValidationSuccess(fnFunction:any, oListener:any): sap.ui.base.ManagedObject;
		/**
		 * Defines a new subclass of ManagedObject with name <code>sClassName</code> and enriches it with
		 * the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> can contain the same information that {@link sap.ui.base.Object.extend} already accepts,
		 * plus the following new properties in the 'metadata' object literal:
		 * 
		 * <ul>
		 * <li><code>library : <i>string</i></code></li>
		 * <li><code>properties : <i>object</i></code></li>
		 * <li><code>defaultProperty : <i>string</i></code></li>
		 * <li><code>aggregations : <i>object</i></code></li>
		 * <li><code>defaultAggregation : <i>string</i></code></li>
		 * <li><code>associations : <i>object</i></code></li>
		 * <li><code>events : <i>object</i></code></li>
		 * <li><code>specialSettings : <i>object</i></code>// this one is still experimental and not for public usage!</li>
		 * </ul>
		 * 
		 * Each of these properties is explained in more detail lateron.
		 * 
		 * Example:
		 * <pre>
		 * ManagedObect.extend('sap.mylib.MyClass', {
		 *   metadata : {
		 *     library: 'sap.mylib',
		 *     properties : {
		 *       value: 'string',
		 *       width: 'sap.ui.core.CSSSize',
		 *       height: { type: 'sap.ui.core.CSSSize', defaultValue: '100%' }
		 *     },
		 *     defaultProperty : 'value',
		 *     aggregations : {
		 *       header : { type: 'sap.mylib.FancyHeader', multiple : false }
		 *       items : 'sap.ui.core.Control'
		 *     },
		 *     defaultAggregation : 'items',
		 *     associations : {
		 *       initiallyFocused : { type: 'sap.ui.core.Control' }
		 *     },
		 *     events: {
		 *       beforeOpen : {
		 *         parameters : {
		 *           opener : 'sap.ui.core.Control'
		 *         }
		 *       }
		 *     },
		 *   },
		 * 
		 *   init: function() {
		 *   }
		 * 
		 * }); // end of 'extend' call
		 * </pre>
		 * 
		 * Detailed explanation of properties<br>
		 * 
		 * 
		 * <b>'library'</b> : <i>string</i><br>
		 * Name of the library that the new subclass should belong to. If the subclass is a control or element, it will
		 * automatically register with that library so that authoring tools can discover it.
		 * By convention, the name of the subclass should have the library name as a prefix, e.g. 'sap.ui.commons.Panel' belongs
		 * to library 'sap.ui.commons'.
		 * 
		 * 
		 * <b>'properties'</b> : <i>object</i><br>
		 * An object literal whose properties each define a new managed property in the ManagedObject subclass.
		 * The value can either be a simple string which then will be assumed to be the type of the new property or it can be
		 * an object literal with the following properties
		 * <ul>
		 * <li><code>type: <i>string</i></code> type of the new property. Must either be one of the built-in types 'string', 'boolean', 'int', 'float', 'object' or 'any', or a
		 *     type created and registered with {@link sap.ui.base.DataType.createType} or an array type based on one of the previous types.</li>
		 * <li><code>group: ...</code></li>
		 * <li><code>defaultValue: <i>any</i></code> the default value for the property or null if there is no defaultValue.</li>
		 * <li><code>bindable: <i>boolean|string</i></code> (either can be omitted or set to the boolean value <code>true</code> or the magic string 'bindable')
		 *     If set to <code>true</code> or 'bindable', additional named methods <code>bind<i>Name</i></code> and <code>unbind<i>Name</i></code> are generated as convenience.
		 *     Despite its name, setting this flag is not mandatory to make the managed property bindable. The generic methods {@link #bindProperty} and
		 *     {@link #unbindProperty} can always be used. </li>
		 * </ul>
		 * Property names should use camelCase notation, start with a lowercase letter and only use characters from the set [a-zA-Z0-9_$].
		 * If an aggregation in the literal is preceded by a JSDoc comment (doclet) and if the UI5 plugin and template are used for JSDoc3 generation, the doclet will
		 * be used as generic documentation of the aggregation.
		 * 
		 * For each public property 'foo', the following methods will be created by the "extend" method and will be added to the
		 * prototype of the subclass:
		 * <ul>
		 * <li>getFoo() - returns the current value of property 'foo'. Internally calls {@link #getProperty}
		 * <li>setFoo(v) - sets 'v' as the new value of property 'foo'. Internally calls {@link #setProperty}
		 * <li>bindFoo(c) - (only if property was defined to be 'bindable'): convenience function that wraps {@link #bindProperty}
		 * <li>unbindFoo() - (only if property was defined to be 'bindable'): convenience function that wraps {@link #unbindProperty}
		 * </ul>
		 * 
		 * 
		 * <b>'defaultProperty'</b> : <i>string</i><br>
		 * When specified, the default property must match the name of one of the properties defined for the new subclass (either own or inherited).
		 * The named property can be used to identify the main property to be used for bound data. E.g. the value property of a field control.
		 * 
		 * 
		 * <b>'aggregations'</b> : <i>object</i><br>
		 * An object literal whose properties each define a new aggregation in the ManagedObject subclass.
		 * The value can either be a simple string which then will be assumed to be the type of the new aggregation or it can be
		 * an object literal with the following properties
		 * <ul>
		 * <li><code>type: <i>string</i></code> type of the new aggregation. must be the full global name of a ManagedObject subclass (in dot notation, e.g. 'sap.m.Button')</li>
		 * <li><code>[multiple]: <i>boolean</i></code> whether the aggregation is a 0..1 (false) or a 0..n aggregation (true), defaults to true </li>
		 * <li><code>[singularName]: <i>string</i></code>. Singular name for 0..n aggregations. For 0..n aggregations the name by convention should be the plural name.
		 *     Methods affecting multiple objects in an aggregation will use the plural name (e.g. getItems(), whereas methods that deal with a single object will use
		 *     the singular name (e.g. addItem). The framework knows a set of common rules for building plural form of English nouns and uses these rules to determine
		 *     a singular name on its own. if that name is wrong, a singluarName can be specified with this property. </li>
		 * <li>[visibility]: <i>string</i></code> either 'hidden' or 'public', defaults to 'public'. Aggregations that belong to the API of a class must be 'public' whereas
		 *     'hidden' aggregations typically are used for the implementation of composite classes (e.g. composite controls) </li>
		 * <li><code>bindable: <i>boolean|string</i></code> (either can be omitted or set to the boolean value <code>true</code> or the magic string 'bindable')
		 *     If set to <code>true</code> or 'bindable', additional named methods <code>bind<i>Name</i></code> and <code>unbind<i>Name</i></code> are generated as convenience.
		 *     Despite its name, setting this flag is not mandatory to make the managed aggregation bindable. The generic methods {@link #bindAggregation} and
		 *     {@link #unbindAggregation} can always be used. </li>
		 * </ul>
		 * Aggregation names should use camelCase notation, start with a lowercase letter and only use characters from the set [a-zA-Z0-9_$].
		 * The name for a hidden aggregations might start with an underscore.
		 * If an aggregation in the literal is preceded by a JSDoc comment (doclet) and if the UI5 plugin and template are used for JSDoc3 generation, the doclet will
		 * be used as generic documentation of the aggregation.
		 * 
		 * For each public aggregation 'item' of cardinality 0..1, the following methods will be created by the "extend" method and will be added to the
		 * prototype of the subclass:
		 * <ul>
		 * <li>getItem() - returns the current value of aggregation 'item'. Internally calls {@link #getAggregation} with a default value of <code>undefined</code></li>
		 * <li>setItem(o) - sets 'o' as the new aggregated object in aggregation 'item'. Internally calls {@link #setAggregation}</li>
		 * <li>destroyItem(o) - destroy a currently aggregated object in aggregation 'item' and clears the aggregation. Internally calls {@link #destroyAggregation}</li>
		 * <li>bindItem(c) - (only if aggregation was defined to be 'bindable'): convenience function that wraps {@link #bindAggregation}</li>
		 * <li>unbindItem() - (only if aggregation was defined to be 'bindable'): convenience function that wraps {@link #unbindAggregation}</li>
		 * </ul>
		 * For a public aggregation 'items' of cardinality 0..n, the following methods will be created:
		 * <ul>
		 * <li>getItems() - returns an array with the objects contained in aggregation 'items'. Internally calls {@link #getAggregation} with a default value of <code>[]</code></li>
		 * <li>addItem(o) - adds an object as last element in the aggregation 'items'. Internally calls {@link #addAggregation}</li>
		 * <li>insertItem(o,p) - inserts an object into the aggregation 'items'. Internally calls {@link #insertAggregation}</li>
		 * <li>removeItem(v) - removes an object from the aggregation 'items'. Internally calls {@link #removeAggregation}</li>
		 * <li>removeItems() - removes all object from the aggregation 'items'. Internally calls {@link #removeAllAggregation}</li>
		 * <li>destroyItems() - destroy all currently aggregated objects in aggregation 'items' and clears the aggregation. Internally calls {@link #destroyAggregation}</li>
		 * <li>bindItems(c) - (only if aggregation was defined to be 'bindable'): convenience function that wraps {@link #bindAggregation}</li>
		 * <li>unbindItems() - (only if aggregation was defined to be 'bindable'): convenience function that wraps {@link #unbindAggregation}</li>
		 * </ul>
		 * For private or hidden aggregations, no methods are generated.
		 * 
		 * 
		 * <b>'defaultAggregation'</b> : <i>string</i><br>
		 * When specified, the default aggregation must match the name of one of the aggregations defined for the new subclass (either own or inherited).
		 * The named aggregation will be used in contexts where no aggregation is specified. E,g. when an object in an XMLView embeds other objects without
		 * naming an aggregation, as in the following example:
		 * <pre>
		 *  &lt;!-- assuming the defaultAggregation for Dialog is 'content' -->
		 *  &lt;Dialog>
		 *    &lt;Text/>
		 *    &lt;Button/>
		 *  &lt;/Dialog>
		 * </pre>
		 * 
		 * 
		 * <b>'associations'</b> : <i>object</i><br>
		 * An object literal whose properties each define a new association of the ManagedObject subclass.
		 * The value can either be a simple string which then will be assumed to be the type of the new association or it can be
		 * an object literal with the following properties
		 * <ul>
		 * <li><code>type: <i>string</i></code> type of the new association</li>
		 * <li><code>multiple: <i>boolean</i></code> whether the association is a 0..1 (false) or a 0..n association (true), defaults to false(1) for associations</li>
		 * <li><code>[singularName]: <i>string</i></code>. Singular name for 0..n associations. For 0..n associations the name by convention should be the plural name.
		 *     Methods affecting multiple objects in an association will use the plural name (e.g. getItems(), whereas methods that deal with a single object will use
		 *     the singular name (e.g. addItem). The framework knows a set of common rules for building plural form of English nouns and uses these rules to determine
		 *     a singular name on its own. if that name is wrong, a singluarName can be specified with this property.</li>
		 * </ul>
		 * Association names should use camelCase notation, start with a lowercase letter and only use characters from the set [a-zA-Z0-9_$].
		 * If an association in the literal is preceded by a JSDoc comment (doclet) and if the UI5 plugin and template are used for JSDoc3 generation, the doclet will
		 * be used as generic documentation of the association.
		 * 
		 * For each association 'ref' of cardinality 0..1, the following methods will be created by the "extend" method and will be added to the
		 * prototype of the subclass:
		 * <ul>
		 * <li>getRef() - returns the current value of association 'item'. Internally calls {@link #getAssociation} with a default value of <code>undefined</code></li>
		 * <li>setRef(o) - sets 'o' as the new associated object in association 'item'. Internally calls {@link #setAssociation}</li>
		 * </ul>
		 * For a public association 'refs' of cardinality 0..n, the following methods will be created:
		 * <ul>
		 * <li>getRefs() - returns an array with the objects contained in association 'items'. Internally calls {@link #getAssociation} with a default value of <code>[]</code></li>
		 * <li>addRef(o) - adds an object as last element in the association 'items'. Internally calls {@link #addAssociation}</li>
		 * <li>removeRef(v) - removes an object from the association 'items'. Internally calls {@link #removeAssociation}</li>
		 * <li>removeAllRefs() - removes all objects from the association 'items'. Internally calls {@link #removeAllAssociation}</li>
		 * </ul>
		 * 
		 * 
		 * <b>'events'</b> : <i>object</i><br>
		 * An object literal whose properties each define a new event of the ManagedObject subclass.
		 * The value can either be a simple string which then will be assumed to be the type of the new association or it can be
		 * an object literal with the following properties
		 * <ul>
		 * <li><code>allowPreventDefault: <i>boolean</i></code> whether the event allows to prevented the default behavior of the event source</li>
		 * <li><code>parameters: <i>object</i></code> an object literal that describes the parameters of this event. </li>
		 * </ul>
		 * Event names should use camelCase notation, start with a lowercase letter and only use characters from the set [a-zA-Z0-9_$].
		 * If an event in the literal is preceded by a JSDoc comment (doclet) and if the UI5 plugin and template are used for JSDoc3 generation, the doclet will be used
		 * as generic documentation of the event.
		 * 
		 * For each event 'Some' the following methods will be created by the "extend" method and will be added to the
		 * prototype of the subclass:
		 * <ul>
		 * <li>attachSome(fn,o) - registers a listener for the event. Internally calls {@link #attachEvent}</li>
		 * <li>detachSome(fn,o) - deregisters a listener for the event. Internally calls {@link #detachEvent}</li>
		 * <li>fireSome() - fire the event. Internally calls {@link #fireEvent}</li>
		 * </ul>
		 * 
		 * 
		 * <b>'specialSettings'</b> : <i>object</i><br>
		 * Special settings are an experimental feature and MUST NOT BE USED by controls or applications outside of the sap.ui.core project.
		 * @param sClassName name of the class to be created
		 * @param oClassInfo object literal with informations about the class
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.core.ManagedObjectMetadata.
		 * @return the created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Searches and returns an array of child elements and controls which are
		 * referenced within an aggregation or aggregations of child elements/controls.
		 * This can be either done recursive or not. Optionally a condition function can be passed that
		 * returns true if the object should be added to the array.
		 * <br>
		 * <b>Take care: this operation might be expensive.</b>
		 * @param bRecursive true, if all nested children should be returned.
		 * @param fnCondition if given, the object is passed as a parameter to the.
		 * @return array of child elements and controls
		 */
		 findAggregatedObjects(bRecursive:boolean, fnCondition:boolean): sap.ui.base.ManagedObject[];
		/**
		 * Fires event <code>formatError</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>element</code> of type <code>sap.ui.base.ManagedObject</code>ManagedObject instance whose property should have received the model update.</li>
		 * <li><code>property</code> of type <code>string</code>Name of the property for which the binding should have been updated.</li>
		 * <li><code>type</code> of type <code>sap.ui.model.Type</code>Data type used in the binding (if any).</li>
		 * <li><code>newValue</code> of type <code>any</code>New value (model representation) as propagated from the model.</li>
		 * <li><code>oldValue</code> of type <code>any</code>Old value (external representation) as previously stored in the ManagedObject.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		protected fireFormatError(mArguments?:any): sap.ui.base.ManagedObject;
		/**
		 * Fires event <code>modelContextChange</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		protected fireModelContextChange(mArguments?:any): sap.ui.base.ManagedObject;
		/**
		 * Fires event <code>parseError</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>element</code> of type <code>sap.ui.base.ManagedObject</code>ManagedObject instance whose property initiated the model update.</li>
		 * <li><code>property</code> of type <code>string</code>Name of the property for which the bound model property should have been been updated.</li>
		 * <li><code>type</code> of type <code>sap.ui.model.Type</code>Data type used in the binding.</li>
		 * <li><code>newValue</code> of type <code>any</code>New value (external representation) as parsed by the binding.</li>
		 * <li><code>oldValue</code> of type <code>any</code>Old value (external representation) as previously stored in the ManagedObject.</li>
		 * <li><code>message</code> of type <code>string</code>Localized message describing the parse error</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		protected fireParseError(mArguments?:any): sap.ui.base.ManagedObject;
		/**
		 * Fires event <code>validationError</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>element</code> of type <code>sap.ui.base.ManagedObject</code>ManagedObject instance whose property initiated the model update.</li>
		 * <li><code>property</code> of type <code>string</code>Name of the property for which the bound model property should have been been updated.</li>
		 * <li><code>type</code> of type <code>sap.ui.model.Type</code>Data type used in the binding.</li>
		 * <li><code>newValue</code> of type <code>any</code>New value (external representation) as parsed and validated by the binding.</li>
		 * <li><code>oldValue</code> of type <code>any</code>Old value (external representation) as previously stored in the ManagedObject.</li>
		 * <li><code>message</code> of type <code>string</code>Localized message describing the validation issues</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		protected fireValidationError(mArguments?:any): sap.ui.base.ManagedObject;
		/**
		 * Fires event <code>validationSuccess</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>element</code> of type <code>sap.ui.base.ManagedObject</code>ManagedObject instance whose property initiated the model update.</li>
		 * <li><code>property</code> of type <code>string</code>Name of the property for which the bound model property has been updated.</li>
		 * <li><code>type</code> of type <code>sap.ui.model.Type</code>Data type used in the binding.</li>
		 * <li><code>newValue</code> of type <code>any</code>New value (external representation) as propagated to the model.
		 * 
		 * <b>Note: </b>the model might modify (normalize) the value again and this modification
		 * will be stored in the ManagedObject. The 'newValue' parameter of this event contains
		 * the value <b>before</b> such a normalization.</li>
		 * <li><code>oldValue</code> of type <code>any</code>Old value (external representation) as previously stored in the ManagedObject.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		protected fireValidationSuccess(mArguments?:any): sap.ui.base.ManagedObject;
		/**
		 * Returns the aggregated object(s) for the named aggregation of this ManagedObject.
		 * 
		 * If the aggregation does not contain any objects(s), the given <code>oDefaultForCreation</code>
		 * (or <code>null</code>) is set as new value of the aggregation and returned to the caller.
		 * 
		 * <b>Note:</b> the need to specify a default value and the fact that it is stored as
		 * new value of a so far empty aggregation is recognized as a shortcoming of this API
		 * but can no longer be changed for compatibility reasons.
		 * 
		 * <b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>.
		 * Applications or frameworks must not use this method to generically read the content of an aggregation.
		 * Use the concrete method get<i>XYZ</i> for aggregation 'XYZ' instead.
		 * @param sAggregationName the name of the aggregation
		 * @param oDefaultForCreation the object that is used in case the current aggregation is empty
		 * @return the aggregation array in case of 0..n-aggregations or the managed object or null in case of 0..1-aggregations
		 */
		protected getAggregation(sAggregationName:string, oDefaultForCreation:sap.ui.base.ManagedObject|any[]): sap.ui.base.ManagedObject|any[];
		/**
		 * Returns the content of the association wit hthe given name.
		 * 
		 * For associations of cardinality 0..1, a single string with the ID of an associated
		 * object is returned (if any). For cardinality 0..n, an array with the IDs of the
		 * associated objects is returned.
		 * 
		 * If the association does not contain any objects(s), the given <code>oDefaultForCreation</code>
		 * is set as new value of the association and returned to the caller. The only supported values for
		 * <code>oDefaultForCreation</code> are <code>null</code> and <code>undefined</code> in the case of
		 * cardinality 0..1 and <code>null</code>, <code>undefined</code> or an empty array (<code>[]</code>)
		 * in case of cardinality 0..n. If the argument is omitted, <code>null</code> is used independently
		 * from the cardinality.
		 * 
		 * <b>Note:</b> the need to specify a default value and the fact that it is stored as
		 * new value of a so far empty association is recognized as a shortcoming of this API
		 * but can no longer be changed for compatibility reasons.
		 * 
		 * <b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>.
		 * Applications or frameworks must not use this method to generically retrieve the content of an association.
		 * Use the concrete method get<i>XYZ</i> for association 'XYZ' instead.
		 * @param sAssociationName the name of the association
		 * @param oDefaultForCreation the object that is used in case the current aggregation is empty (only null or empty array allowed)
		 * @return the ID of the associated managed object or an array of such IDs; may be null if the association has not been populated
		 */
		protected getAssociation(sAssociationName:string, oDefaultForCreation:any): string|string[];
		/**
		 * Get the binding object for a specific aggregation/property
		 * @param sName the name of the property or aggregation
		 * @return the binding for the given name
		 */
		 getBinding(sName:string): sap.ui.model.Binding;
		/**
		 * Get the binding context of this object for the given model name.
		 * 
		 * If the object does not have a binding context set on itself and has no own Model set,
		 * it will use the first binding context defined in its parent hierarchy.
		 * 
		 * Note: to be compatible with future versions of this API, applications must not use the value <code>null</code>,
		 * the empty string <code>""</code> or the string literals <code>"null"</code> or <code>"undefined"</code> as model name.
		 * 
		 * Note: A ManagedObject inherits binding contexts from the Core only when it is a descendant of an UIArea.
		 * @param sModelName the name of the model or <code>undefined</code>
		 * @return oContext The binding context of this object
		 */
		 getBindingContext(sModelName?:string): sap.ui.model.Context;
		/**
		 * Returns the binding infos for the given property or aggregation. The binding info contains information about path, binding object, format options,
		 * sorter, filter etc. for the property or aggregation.
		 * @param sName the name of the property or aggregation
		 * @return the binding info object, containing at least a path property
		 *                   and, dependant of the binding type, additional properties
		 */
		protected getBindingInfo(sName:string): any;
		/**
		 * Get the binding path for a specific aggregation/property
		 * @param sName the name of the property or aggregation
		 * @return the binding path for the given name
		 */
		protected getBindingPath(sName:string): string;
		/**
		 * Returns the parent managed object as new eventing parent to enable control event bubbling
		 * or <code>null</code> if this object hasn't been added to a parent yet.
		 * @return the parent event provider
		 */
		protected getEventingParent(): sap.ui.base.EventProvider;
		/**
		 * Returns the object's Id.
		 * @return the objects's Id.
		 */
		 getId(): string;
		/**
		 * Returns the metadata for the class that this object belongs to.
		 * @return Metadata for the class of the object
		 */
		 getMetadata(): sap.ui.base.ManagedObjectMetadata;
		/**
		 * Returns the metadata for the ManagedObject class.
		 * @return Metadata for the ManagedObject class.
		 */
		 getMetadata(): sap.ui.base.ManagedObjectMetadata;
		/**
		 * Get the model to be used for data bindings with the given model name.
		 * If the object does not have a model set on itself, it will use the first
		 * model defined in its parent hierarchy.
		 * 
		 * The name can be omitted to reference the default model or it must be a non-empty string.
		 * 
		 * Note: to be compatible with future versions of this API, applications must not use the value <code>null</code>,
		 * the empty string <code>""</code> or the string literals <code>"null"</code> or <code>"undefined"</code> as model name.
		 * @param sName name of the model to be retrieved
		 * @return oModel
		 */
		 getModel(sName?:string|any): sap.ui.model.Model;
		/**
		 * Get the object binding object for a specific model
		 * @param sModelName the name of the model
		 * @return the element binding for the given model name
		 */
		 getObjectBinding(sModelName:string): sap.ui.model.Binding;
		/**
		 * Returns the origin info for the value of the given property.
		 * 
		 * The origin info might contain additional information for translatable
		 * texts. The bookkeeping of this information is not active by default and must be
		 * activated by configuration. Even then, it might not be present for all properties
		 * and their values depending on where the value came form.
		 * @param sPropertyName the name of the property
		 * @return a map of properties describing the origin of this property value or null
		 */
		 getOriginInfo(sPropertyName:string): any;
		/**
		 * Returns the parent managed object or <code>null</code> if this object hasn't been added to a parent yet.
		 * @return The parent managed object or <code>null</code>
		 */
		 getParent(): sap.ui.base.ManagedObject;
		/**
		 * Returns the value for the property with the given <code>sPropertyName</code>.
		 * 
		 * <b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>.
		 * Applications or frameworks must not use this method to generically retrieve the value of a property.
		 * Use the concrete method get<i>XYZ</i> for property 'XYZ' instead.
		 * @param sPropertyName the name of the property
		 * @return the value of the property
		 */
		protected getProperty(sPropertyName:string): any;
		/**
		 * Check if any model is set to the ManagedObject or to one of its parents (including UIArea and Core).
		 * 
		 * Note: A ManagedObject inherits models from the Core only when it is a descendant of an UIArea.
		 * @return whether a model reference exists or not
		 */
		 hasModel(): boolean;
		/**
		 * Searches for the provided ManagedObject in the named aggregation and returns its
		 * 0-based index if found, or -1 otherwise. Returns -2 if the given named aggregation
		 * is of cardinality 0..1 and doesn't reference the given object.
		 * 
		 * <b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>.
		 * Applications or frameworks must not use this method to generically determine the position of an object in an aggregation.
		 * Use the concrete method indexOf<i>XYZ</i> for aggregation 'XYZ' instead.
		 * @param sAggregationName the name of the aggregation
		 * @param oObject the ManagedObject whose index is looked for.
		 * @return the index of the provided managed object in the aggregation.
		 */
		protected indexOfAggregation(sAggregationName:string, oObject:sap.ui.base.ManagedObject): number;
		/**
		 * Inserts managed object <code>oObject</code> to the aggregation named <code>sAggregationName</code> at
		 * position <code>iIndex</code>.
		 * 
		 * If the given object is not valid with regard to the aggregation (if it is not an instance
		 * of the type specified for that aggregation) or when the method is called for an aggregation
		 * of cardinality 0..1, then an Error is thrown (see {@link #validateAggregation}.
		 * 
		 * If the given index is out of range with respect to the current content of the aggregation,
		 * it is clipped to that range (0 for iIndex < 0, n for iIndex > n).
		 * 
		 * Please note that this method does not work as expected when an object is added
		 * that is already part of the aggregation. In order to change the index of an object
		 * inside an aggregation, first remove it, then insert it again.
		 * 
		 * <b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>.
		 * Applications or frameworks must not use this method to generically insert an object into an aggregation.
		 * Use the concrete method insert<i>XYZ</i> for aggregation 'XYZ' instead.
		 * @param sAggregationName the string identifying the aggregation the managed object <code>oObject</code>
		 *            should be inserted into.
		 * @param oObject the ManagedObject to add; if empty, nothing is inserted.
		 * @param iIndex the <code>0</code>-based index the managed object should be inserted at; for a negative
		 *            value <code>iIndex</code>, <code>oObject</code> is inserted at position 0; for a value
		 *            greater than the current size of the aggregation, <code>oObject</code> is inserted at
		 *            the last position
		 * @param bSuppressInvalidate if true, this ManagedObject as well as the added child are not marked as changed
		 * @return Returns <code>this</code> to allow method chaining
		 */
		protected insertAggregation(sAggregationName:string, oObject:sap.ui.base.ManagedObject, iIndex:number, bSuppressInvalidate?:boolean): sap.ui.base.ManagedObject;
		/**
		 * This triggers rerendering of itself and its children.<br/> As <code>sap.ui.base.ManagedObject</code> "bubbles up" the
		 * invalidate, changes to child-<code>Elements</code> will also result in rerendering of the whole sub tree.
		 */
		protected invalidate();
		/**
		 * Find out whether a property or aggregation is bound
		 * @param sName the name of the property or aggregation
		 * @return whether a binding exists for the given name
		 */
		 isBound(sName:string): boolean;
		/**
		 * Returns whether rerendering is currently suppressed on this ManagedObject
		 * @return boolean
		 */
		protected isInvalidateSuppressed();
		/**
		 * This method is used internally and should only be overridden by a tree managed object which utilizes the tree binding.
		 *  In this case and if the aggregation is a tree node the overridden method should then return true.
		 *  If true is returned the tree binding will be used instead of the list binding.
		 * @param sName the aggregation to bind (e.g. nodes for a tree managed object)
		 * @return whether tree binding should be used or list binding. Default is false. Override method to change this behavior.
		 */
		protected isTreeBinding(sName:string): boolean;
		/**
		 * Removes an object from the aggregation named <code>sAggregationName</code> with cardinality 0..n.
		 * 
		 * The removed object is not destroyed nor is it marked as changed.
		 * 
		 * If the given object is found in the aggreation, it is removed, it's parent relationship
		 * is unset and this ManagedObject is marked as changed. The removed object is returned as
		 * result of this method. If the object could not be found, <code>undefined</code> is returned.
		 * 
		 * This method must only be called for aggregations of cardinality 0..n. The only way to remove objects
		 * from a 0..1 aggregation is to set a <code>null</code> value for them.
		 * 
		 * <b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>.
		 * Applications or frameworks must not use this method to generically remove an object from an aggregation.
		 * Use the concrete method remove<i>XYZ</i> for aggregation 'XYZ' instead.
		 * @param sAggregationName the string identifying the aggregation that the given object should be removed from
		 * @param vObject the position or ID of the ManagedObject that should be removed or that ManagedObject itself;
		 *            if <code>vObject</code> is invalid, a negative value or a value greater or equal than the current size
		 *            of the aggregation, nothing is removed.
		 * @param bSuppressInvalidate if true, this ManagedObject is not marked as changed
		 * @return the removed object or null
		 */
		protected removeAggregation(sAggregationName:string, vObject:number|string|sap.ui.base.ManagedObject, bSuppressInvalidate?:boolean): sap.ui.base.ManagedObject;
		/**
		 * Removes all objects from the 0..n-aggregation named <code>sAggregationName</code>.
		 * 
		 * The removed objects are not destroyed nor are they marked as changed.
		 * 
		 * Additionally, it clears the parent relationship of all removed objects, marks this
		 * ManagedObject as changed and returns an array with the removed objects.
		 * 
		 * If the aggregation did not contain any objects, an empty array is returned and this
		 * ManagedObject is not marked as changed.
		 * 
		 * <b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>.
		 * Applications or frameworks must not use this method to generically remove all objects from an aggregation.
		 * Use the concrete method removeAll<i>XYZ</i> for aggregation 'XYZ' instead.
		 * @param sAggregationName the name of the aggregation
		 * @param bSuppressInvalidate if true, this ManagedObject is not marked as changed
		 * @return an array of the removed elements (might be empty)
		 */
		protected removeAllAggregation(sAggregationName:string, bSuppressInvalidate?:boolean): any[];
		/**
		 * Removes all the objects in the 0..n-association named <code>sAssociationName</code> and returns an array
		 * with their IDs. This ManagedObject is marked as changed, if the association contained any objects.
		 * 
		 * <b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>.
		 * Applications or frameworks must not use this method to generically remove all object from an association.
		 * Use the concrete method removeAll<i>XYZ</i> for association 'XYZ' instead.
		 * @param sAssociationName the name of the association
		 * @param bSuppressInvalidate if true, this ManagedObject is not marked as changed
		 * @return an array with the IDs of the removed objects (might be empty)
		 */
		protected removeAllAssociation(sAssociationName:string, bSuppressInvalidate?:boolean): any[];
		/**
		 * Removes a ManagedObject from the association named <code>sAssociationName</code>.
		 * 
		 * If an object is removed, the Id of that object is returned and this ManagedObject is
		 * marked as changed. Otherwise <code>undefined</code> is returned.
		 * 
		 * If the same object was added multiple times to the same association, only a single
		 * occurence of it will be removed by this method. If the object is not found or if the
		 * parameter can't be interpreted neither as a ManagedObject (or id) nor as an index in
		 * the assocation, nothing will be removed. The same is true if an index is given and if
		 * that index is out of range for the association.
		 * 
		 * <b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>.
		 * Applications or frameworks must not use this method to generically remove an object from an association.
		 * Use the concrete method remove<i>XYZ</i> for association 'XYZ' instead.
		 * @param sAssociationName the string identifying the association the ManagedObject should be removed from.
		 * @param vObject the position or ID of the ManagedObject to remove or the ManagedObject itself; if <code>vObject</code> is invalid input,
		 *            a negative value or a value greater or equal than the current size of the association, nothing is removed
		 * @param bSuppressInvalidate if true, the managed object is not marked as changed
		 * @return the ID of the removed ManagedObject or null
		 */
		protected removeAssociation(sAssociationName:string, vObject:number|string|sap.ui.base.ManagedObject, bSuppressInvalidate?:boolean);
		/**
		 * Sets a new object in the named 0..1 aggregation of this ManagedObject and
		 * marks this ManagedObject as changed.
		 * 
		 * If the given object is not valid with regard to the aggregation (if it is not an instance
		 * of the type specified for that aggregation) or when the method is called for an aggregation
		 * of cardinality 0..n, then an Error is thrown (see {@link #validateAggregation}.
		 * 
		 * If the new object is the same as the currently aggregated object, then the internal state
		 * is not modified and this ManagedObject is not marked as changed.
		 * 
		 * If the given object is different, the parent of a previously aggregated object is cleared
		 * (it must have been this ManagedObject before), the parent of the given object is set to this
		 * ManagedObject and {@link #invalidate} is called for this object.
		 * 
		 * Note that this method does neither return nor destroy the previously aggregated object.
		 * This behavior is inherited by named set methods (see below) in subclasses.
		 * To avoid memory leaks, applications therefore should first get the aggregated object,
		 * keep a reference to it or destroy it, depending on their needs, and only then set a new
		 * object.
		 * 
		 * Note that ManagedObject only implements a single level of change tracking: if a first
		 * call to setAggregation recognizes a change, 'invalidate' is called. If another call to
		 * setAggregation reverts that change, invalidate() will be called again, the new status
		 * is not recognized as being 'clean' again.
		 * 
		 * <b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>.
		 * Applications or frameworks must not use this method to generically set an object in an aggregation.
		 * Use the concrete method set<i>XYZ</i> for aggregation 'XYZ' or the generic {@link #applySettings} instead.
		 * @param sAggregationName name of an 0..1 aggregation
		 * @param oObject the managed object that is set as aggregated object
		 * @param bSuppressInvalidate if true, this ManagedObject is not marked as changed
		 * @return Returns <code>this</code> to allow method chaining
		 */
		protected setAggregation(sAggregationName:string, oObject:any, bSuppressInvalidate?:boolean): sap.ui.base.ManagedObject;
		/**
		 * Sets the associatied object for the given managed association of cardinality '0..1' and
		 * marks this ManagedObject as changed.
		 * 
		 * The associated object can either be given by itself or by its id. If <code>null</code> or
		 * <code>undefined</code> is given, the association is cleared.
		 * 
		 * <b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>.
		 * Applications or frameworks must not use this method to generically set an object in an association.
		 * Use the concrete method set<i>XYZ</i> for association 'XYZ' or the generic {@link #applySettings} instead.
		 * @param sAssociationName name of the association
		 * @param sId the ID of the managed object that is set as an association, or the managed object itself or null
		 * @param bSuppressInvalidate if true, the managed objects invalidate method is not called
		 * @return Returns <code>this</code> to allow method chaining
		 */
		protected setAssociation(sAssociationName:string, sId:string|sap.ui.base.ManagedObject, bSuppressInvalidate?:boolean): sap.ui.base.ManagedObject;
		/**
		 * Set the binding context for this ManagedObject for the model with the given name.
		 * 
		 * Note: to be compatible with future versions of this API, applications must not use the value <code>null</code>,
		 * the empty string <code>""</code> or the string literals <code>"null"</code> or <code>"undefined"</code> as model name.
		 * 
		 * Note: A ManagedObject inherits binding contexts from the Core only when it is a descendant of an UIArea.
		 * @param oContext the new binding context for this object
		 * @param sModelName the name of the model to set the context for or <code>undefined</code>
		 * @return reference to the instance itself
		 */
		 setBindingContext(oContext:any, sModelName?:string): sap.ui.base.ManagedObject;
		/**
		 * Sets or unsets a model for the given model name for this ManagedObject.
		 * 
		 * The <code>sName</code> must either be <code>undefined</code> (or omitted) or a non-empty string.
		 * When the name is omitted, the default model is set/unset.
		 * 
		 * When <code>oModel</code> is <code>null</code> or <code>undefined</code>, a previously set model
		 * with that name is removed from this ManagedObject. If an ancestor (parent, UIArea or Core) has a model
		 * with that name, this ManagedObject will immediately inherit that model from its ancestor.
		 * 
		 * All local bindings that depend on the given model name, are updated (created if the model references
		 * became complete now; updated, if any model reference has changed; removed if the model references
		 * became incomplete now).
		 * 
		 * Any change (new model, removed model, inherited model) is also applied to all aggregated descendants
		 * as long as a descendant doesn't have its own model set for the given name.
		 * 
		 * Note: to be compatible with future versions of this API, applications must not use the value <code>null</code>,
		 * the empty string <code>""</code> or the string literals <code>"null"</code> or <code>"undefined"</code> as model name.
		 * 
		 * Note: By design, it is not possible to hide an inherited model by setting a <code>null</code> or
		 * <code>undefined</code> model. Applications can set an empty model to achieve the same.
		 * 
		 * Note: A ManagedObject inherits models from the Core only when it is a descendant of an UIArea.
		 * @param oModel the model to be set or <code>null</code> or <code>undefined</code>
		 * @param sName the name of the model or <code>undefined</code>
		 * @return <code>this</code> to allow method chaining
		 */
		 setModel(oModel:sap.ui.model.Model, sName?:string): sap.ui.base.ManagedObject;
		/**
		 * Sets the given value for the given property after validating and normalizing it,
		 * marks this object as changed.
		 * 
		 * If the value is not valid with regard to the declared data type of the property,
		 * an Error is thrown. In case <code>null</code> or <code>undefined</code> is passed,
		 * the default value for this property is used (see {@link #validateProperty}. If the validated and normalized
		 * <code>oValue</code> equals the current value of the property, the internal state of
		 * this object is not changed. If the value changes, it is stored internally and
		 * the {@link #invalidate} method is called on this object. In the case of TwoWay
		 * databinding, the bound model is informed about the property change.
		 * 
		 * Note that ManagedObject only implements a single level of change tracking: if a first
		 * call to setProperty recognizes a change, 'invalidate' is called. If another call to
		 * setProperty reverts that change, invalidate() will be called again, the new status
		 * is not recognized as being 'clean' again.
		 * 
		 * <b>Note:</b> This method is a low level API as described in <a href="#lowlevelapi">the class documentation</a>.
		 * Applications or frameworks must not use this method to generically set a property.
		 * Use the concrete method set<i>XYZ</i> for property 'XYZ' or the generic {@link #applySettings} instead.
		 * @param sPropertyName name of the property to set
		 * @param oValue value to set the property to
		 * @param bSuppressInvalidate if true, the managed object is not marked as changed
		 * @return Returns <code>this</code> to allow method chaining
		 */
		protected setProperty(sPropertyName:string, oValue:any, bSuppressInvalidate?:boolean): sap.ui.base.ManagedObject;
		/**
		 * Returns a simple string representation of this managed object.
		 * 
		 * Mainly useful for tracing purposes.
		 * @return a string description of this managed object
		 */
		 toString(): string;
		/**
		 * Unbind the aggregation from the model
		 * @param sName the name of the aggregation
		 * @param bSuppressReset whether the reset to empty aggregation when unbinding should be suppressed
		 * @return reference to the instance itself
		 */
		 unbindAggregation(sName:string, bSuppressReset:boolean): sap.ui.base.ManagedObject;
		/**
		 * Removes the defined binding context of this object, all bindings will now resolve
		 * relative to the parent context again.
		 * @param sModelName name of the model to remove the context for.
		 * @return reference to the instance itself
		 */
		 unbindObject(sModelName?:string): sap.ui.base.ManagedObject;
		/**
		 * Unbind the property from the model
		 * @param sName the name of the property
		 * @param bSuppressReset whether the reset to the default value when unbinding should be suppressed
		 * @return reference to the instance itself
		 */
		 unbindProperty(sName:string, bSuppressReset:boolean): sap.ui.base.ManagedObject;
		/**
		 * Checks whether the given value is of the proper type for the given aggregation name.
		 * 
		 * This method is already called by {@link #setAggregation}, {@link #addAggregation} and {@link #insertAggregation}.
		 * In many cases, subclasses of ManagedObject don't need to call it again in their mutator methods.
		 * @param sAggregationName the name of the aggregation
		 * @param oObject the aggregated object or a primitive value
		 * @param bMultiple whether the caller assumes the aggregation to have cardinality 0..n
		 * @return the passed object
		 */
		protected validateAggregation(sAggregationName:string, oObject:sap.ui.base.ManagedObject|any, bMultiple:boolean): sap.ui.base.ManagedObject|any;
		/**
		 * Checks whether the given value is of the proper type for the given property name.
		 * 
		 * In case <code>null</code> or <code>undefined</code> is passed, the default value for
		 * this property is used as value. If no default value is defined for the property, the
		 * default value of the type of the property is used.
		 * 
		 * If the property has a data type that is an instance of sap.ui.base.DataType and if
		 * a <code>normalize</code> function is defined for that type, that function will be
		 * called with the resulting value as only argument. The result of the function call is
		 * then used instead of the raw value.
		 * 
		 * This method is called by {@link #setProperty}. In many cases, subclasses of
		 * ManagedObject don't need to call it themselves.
		 * @param sPropertyName the name of the property
		 * @param oValue the value
		 * @return the normalized value for the passed value or for the default value if null or undefined was passed
		 */
		protected validateProperty(sPropertyName:string, oValue:any): any;
	}
	class Object {
		/**
		 * Constructor for a sap.ui.base.Object.
		 */
		 constructor();
		/**
		 * Destructor method for objects
		 */
		 destroy();
		/**
		 * Returns the public interface of the object.
		 * @return the public interface of the object
		 */
		 getInterface(): sap.ui.base.Interface;
		/**
		 * Returns the metadata for the class that this object belongs to.
		 * 
		 * This method is only defined when metadata has been declared by using {@link sap.ui.base.Object.defineClass}
		 * or {@link sap.ui.base.Object.extend}.
		 * @return {sap.ui.base.Metadata] metadata for the class of the object
		 */
		 getMetadata();
	}
	class ObjectPool extends sap.ui.base.Object{
		/**
		 * Creates an ObjectPool instance based on the given oObjectClass.&lt;br/&gt;
		 * If there is a free pooled instance, returns that one, otherwise creates a new one.&lt;br/&gt;
		 * In order to be maintained by the ObjectPool, oObjectClass must implement
		 * methods described in the class description.
		 * @param oObjectClass constructor for the class of objects that this pool should manage
		 */
		 constructor(oObjectClass:any);
		/**
		 * Borrows a free object from the pool. Any arguments to this method
		 * are forwarded to the init method of the borrowed object.
		 * @param any optional initialization parameters for the borrowed object
		 * @return the borrowed object of the same type that has been specified for this pool
		 */
		 borrowObject(any?:any): any;
		/**
		 * Creates a new subclass of class sap.ui.base.ObjectPool with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.base.ObjectPool.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Returns an object to the pool. The object must have been borrowed from this
		 * pool beforehand. The reset method is called on the object before it is added
		 * to the set of free objects.
		 * @param oObject the object to return to the pool
		 */
		 returnObject(oObject:any);
	}
	interface Poolable {
		/**
		 * Called by the object pool when this instance will be actived for a caller.
		 * The same method will be called after a new instance has been created by an otherwise
		 * exhausted pool.
		 * 
		 * If the caller provided any arguments to {@link sap.ui.base.ObjectPool#borrowObject}
		 * all arguments will be propagated to this method.
		 */
		 init();
		/**
		 * Called by the object pool when an instance is returned to the pool.
		 * While no specific implementation is required, poolable objects in general
		 * should clean all caller specific state (set to null) in this method to
		 * avoid memory leaks and to enforce garbage collection of the caller state.
		 */
		 reset();
	}
}

declare namespace sap.ui.commons {
	/**
	 * different styles for a button.
	 */
	type ButtonStyle = 
	/**
	 * different styles for a button.
	 */
	"Accept" |
	/**
	 * different styles for a button.
	 */
	"Default" |
	/**
	 * different styles for a button.
	 */
	"Emph" |
	/**
	 * different styles for a button.
	 */
	"Reject";
	/**
	 * different styles for a ColorPicker.
	 */
	type ColorPickerMode = 
	/**
	 * different styles for a ColorPicker.
	 */
	"HSL" |
	/**
	 * different styles for a ColorPicker.
	 */
	"HSV";
	interface FormattedTextViewControl {
	}
	/**
	 * Enumeration of possible HorizontalDivider height settings.
	 */
	type HorizontalDividerHeight = 
	/**
	 * Enumeration of possible HorizontalDivider height settings.
	 */
	"Large" |
	/**
	 * Enumeration of possible HorizontalDivider height settings.
	 */
	"Medium" |
	/**
	 * Enumeration of possible HorizontalDivider height settings.
	 */
	"Ruleheight" |
	/**
	 * Enumeration of possible HorizontalDivider height settings.
	 */
	"Small";
	/**
	 * Enumeration of possible HorizontalDivider types.
	 */
	type HorizontalDividerType = 
	/**
	 * Enumeration of possible HorizontalDivider types.
	 */
	"Area" |
	/**
	 * Enumeration of possible HorizontalDivider types.
	 */
	"Page";
	/**
	 * Available label display modes.
	 */
	type LabelDesign = 
	/**
	 * Available label display modes.
	 */
	"Bold" |
	/**
	 * Available label display modes.
	 */
	"Standard";
	/**
	 * Determines the visual design of a MenuBar. The feature might be not supported by all themes.
	 */
	type MenuBarDesign = 
	/**
	 * Determines the visual design of a MenuBar. The feature might be not supported by all themes.
	 */
	"Header" |
	/**
	 * Determines the visual design of a MenuBar. The feature might be not supported by all themes.
	 */
	"Standard";
	/**
	 * [Enter description for MessageType]
	 */
	type MessageType = 
	/**
	 * [Enter description for MessageType]
	 */
	"Error" |
	/**
	 * [Enter description for MessageType]
	 */
	"Success" |
	/**
	 * [Enter description for MessageType]
	 */
	"Warning";
	/**
	 * Distinct paginator event types
	 */
	type PaginatorEvent = 
	/**
	 * Distinct paginator event types
	 */
	"First" |
	/**
	 * Distinct paginator event types
	 */
	"Goto" |
	/**
	 * Distinct paginator event types
	 */
	"Last" |
	/**
	 * Distinct paginator event types
	 */
	"Next" |
	/**
	 * Distinct paginator event types
	 */
	"Previous";
	/**
	 * Possible values for the visualization of float values in the RatingIndicator Control.
	 */
	type RatingIndicatorVisualMode = 
	/**
	 * Possible values for the visualization of float values in the RatingIndicator Control.
	 */
	"Continuous" |
	/**
	 * Possible values for the visualization of float values in the RatingIndicator Control.
	 */
	"Full" |
	/**
	 * Possible values for the visualization of float values in the RatingIndicator Control.
	 */
	"Half";
	/**
	 * Determines the visual design of a RowRepeater.
	 */
	type RowRepeaterDesign = 
	/**
	 * Determines the visual design of a RowRepeater.
	 */
	"BareShell" |
	/**
	 * Determines the visual design of a RowRepeater.
	 */
	"Standard" |
	/**
	 * Determines the visual design of a RowRepeater.
	 */
	"Transparent";
	/**
	 * A string type that represents subset of CSS size values. For the Splitter only px and % are allowed.
	 */
	type SplitterSize = any
	/**
	 * Semantic Colors of a text.
	 */
	type TextViewColor = 
	/**
	 * Semantic Colors of a text.
	 */
	"Critical" |
	/**
	 * Semantic Colors of a text.
	 */
	"Default" |
	/**
	 * Semantic Colors of a text.
	 */
	"Negative" |
	/**
	 * Semantic Colors of a text.
	 */
	"Positive";
	/**
	 * Designs for TextView.
	 */
	type TextViewDesign = 
	/**
	 * Designs for TextView.
	 */
	"Bold" |
	/**
	 * Designs for TextView.
	 */
	"H1" |
	/**
	 * Designs for TextView.
	 */
	"H2" |
	/**
	 * Designs for TextView.
	 */
	"H3" |
	/**
	 * Designs for TextView.
	 */
	"H4" |
	/**
	 * Designs for TextView.
	 */
	"H5" |
	/**
	 * Designs for TextView.
	 */
	"H6" |
	/**
	 * Designs for TextView.
	 */
	"Italic" |
	/**
	 * Designs for TextView.
	 */
	"Monospace" |
	/**
	 * Designs for TextView.
	 */
	"Small" |
	/**
	 * Designs for TextView.
	 */
	"Standard" |
	/**
	 * Designs for TextView.
	 */
	"Underline";
	/**
	 * Determines the visual design of a Toolbar.
	 */
	type ToolbarDesign = 
	/**
	 * Determines the visual design of a Toolbar.
	 */
	"Flat" |
	/**
	 * Determines the visual design of a Toolbar.
	 */
	"Standard" |
	/**
	 * Determines the visual design of a Toolbar.
	 */
	"Transparent";
	interface ToolbarItem {
	}
	/**
	 * Design of the Toolbar Separator.
	 */
	type ToolbarSeparatorDesign = 
	/**
	 * Design of the Toolbar Separator.
	 */
	"FullHeight" |
	/**
	 * Design of the Toolbar Separator.
	 */
	"Standard";
	/**
	 * Selection mode of the tree
	 */
	type TreeSelectionMode = 
	/**
	 * Selection mode of the tree
	 */
	"Legacy" |
	/**
	 * Selection mode of the tree
	 */
	"Multi" |
	/**
	 * Selection mode of the tree
	 */
	"None" |
	/**
	 * Selection mode of the tree
	 */
	"Single";
}

declare namespace sap.ui.commons.enums {
	/**
	 * Value set for the background design of areas
	 */
	type AreaDesign = 
	/**
	 * Value set for the background design of areas
	 */
	"Fill" |
	/**
	 * Value set for the background design of areas
	 */
	"Plain" |
	/**
	 * Value set for the background design of areas
	 */
	"Transparent";
	/**
	 * Value set for the border design of areas
	 */
	type BorderDesign = 
	/**
	 * Value set for the border design of areas
	 */
	"Box" |
	/**
	 * Value set for the border design of areas
	 */
	"None";
	/**
	 * Orientation of a UI element
	 */
	type Orientation = 
	/**
	 * Orientation of a UI element
	 */
	"horizontal" |
	/**
	 * Orientation of a UI element
	 */
	"vertical";
}

declare namespace sap.ui.commons.layout {
	/**
	 * Background design (i.e. color), e.g. of a layout cell.
	 */
	type BackgroundDesign = 
	/**
	 * Background design (i.e. color), e.g. of a layout cell.
	 */
	"Border" |
	/**
	 * Background design (i.e. color), e.g. of a layout cell.
	 */
	"Fill1" |
	/**
	 * Background design (i.e. color), e.g. of a layout cell.
	 */
	"Fill2" |
	/**
	 * Background design (i.e. color), e.g. of a layout cell.
	 */
	"Fill3" |
	/**
	 * Background design (i.e. color), e.g. of a layout cell.
	 */
	"Header" |
	/**
	 * Background design (i.e. color), e.g. of a layout cell.
	 */
	"Plain" |
	/**
	 * Background design (i.e. color), e.g. of a layout cell.
	 */
	"Transparent";
	/**
	 * The type (=position) of a BorderLayoutArea
	 */
	type BorderLayoutAreaTypes = 
	/**
	 * The type (=position) of a BorderLayoutArea
	 */
	"begin" |
	/**
	 * The type (=position) of a BorderLayoutArea
	 */
	"bottom" |
	/**
	 * The type (=position) of a BorderLayoutArea
	 */
	"center" |
	/**
	 * The type (=position) of a BorderLayoutArea
	 */
	"end" |
	/**
	 * The type (=position) of a BorderLayoutArea
	 */
	"top";
	/**
	 * Horizontal alignment, e.g. of a layout cell's content within the cell's borders.
	 * Note that some values depend on the current locale's writing direction while
	 * others do not.
	 */
	type HAlign = 
	/**
	 * Horizontal alignment, e.g. of a layout cell's content within the cell's borders.
	 * Note that some values depend on the current locale's writing direction while
	 * others do not.
	 */
	"Begin" |
	/**
	 * Horizontal alignment, e.g. of a layout cell's content within the cell's borders.
	 * Note that some values depend on the current locale's writing direction while
	 * others do not.
	 */
	"Center" |
	/**
	 * Horizontal alignment, e.g. of a layout cell's content within the cell's borders.
	 * Note that some values depend on the current locale's writing direction while
	 * others do not.
	 */
	"End" |
	/**
	 * Horizontal alignment, e.g. of a layout cell's content within the cell's borders.
	 * Note that some values depend on the current locale's writing direction while
	 * others do not.
	 */
	"Left" |
	/**
	 * Horizontal alignment, e.g. of a layout cell's content within the cell's borders.
	 * Note that some values depend on the current locale's writing direction while
	 * others do not.
	 */
	"Right";
	/**
	 * Padding, e.g. of a layout cell's content within the cell's borders.
	 * Note that all options except "None" include a padding of 2px at the top and
	 * bottom, and differ only in the presence of a 4px padding towards the beginning
	 * or end of a line, in the current locale's writing direction.
	 */
	type Padding = 
	/**
	 * Padding, e.g. of a layout cell's content within the cell's borders.
	 * Note that all options except "None" include a padding of 2px at the top and
	 * bottom, and differ only in the presence of a 4px padding towards the beginning
	 * or end of a line, in the current locale's writing direction.
	 */
	"Begin" |
	/**
	 * Padding, e.g. of a layout cell's content within the cell's borders.
	 * Note that all options except "None" include a padding of 2px at the top and
	 * bottom, and differ only in the presence of a 4px padding towards the beginning
	 * or end of a line, in the current locale's writing direction.
	 */
	"Both" |
	/**
	 * Padding, e.g. of a layout cell's content within the cell's borders.
	 * Note that all options except "None" include a padding of 2px at the top and
	 * bottom, and differ only in the presence of a 4px padding towards the beginning
	 * or end of a line, in the current locale's writing direction.
	 */
	"End" |
	/**
	 * Padding, e.g. of a layout cell's content within the cell's borders.
	 * Note that all options except "None" include a padding of 2px at the top and
	 * bottom, and differ only in the presence of a 4px padding towards the beginning
	 * or end of a line, in the current locale's writing direction.
	 */
	"Neither" |
	/**
	 * Padding, e.g. of a layout cell's content within the cell's borders.
	 * Note that all options except "None" include a padding of 2px at the top and
	 * bottom, and differ only in the presence of a 4px padding towards the beginning
	 * or end of a line, in the current locale's writing direction.
	 */
	"None";
	class PositionContainer extends sap.ui.core.Element{
		/**
		 * Constructor for a new layout/PositionContainer.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given
		 * @param mSettings initial settings for the new control
		 */
		 constructor(sId?:string, mSettings?:any);
		/**
		 * Destroys the control in the aggregation <code>control</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 destroyControl(): sap.ui.commons.layout.PositionContainer;
		/**
		 * Creates a new subclass of class sap.ui.commons.layout.PositionContainer with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Gets current value of property <code>bottom</code>.
		 * 
		 * Defines the distance to the bottom of the layout (as specified in HTML)
		 * @return Value of property <code>bottom</code>
		 */
		 getBottom(): sap.ui.core.CSSSize;
		/**
		 * Gets current value of property <code>centerHorizontally</code>.
		 * 
		 * Indicates whether this container shall be centered horizontally within the AbsoluteLayout area.
		 * The values of the attributes left and right are ignored when this feature is activated.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>centerHorizontally</code>
		 */
		 getCenterHorizontally(): boolean;
		/**
		 * Gets current value of property <code>centerVertically</code>.
		 * 
		 * Indicates whether this container should be centered vertically within the AbsoluteLayout area.
		 * The values of the attributes top and bottom are ignored when this feature is activated.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>centerVertically</code>
		 */
		 getCenterVertically(): boolean;
		/**
		 * Gets content of aggregation <code>control</code>.
		 * 
		 * Child control of the position container
		 * @return 
		 */
		 getControl(): sap.ui.core.Control;
		/**
		 * Gets current value of property <code>left</code>.
		 * 
		 * Defines the distance to the left of the layout (as specified in HTML)
		 * @return Value of property <code>left</code>
		 */
		 getLeft(): sap.ui.core.CSSSize;
		/**
		 * Returns a metadata object for class sap.ui.commons.layout.PositionContainer.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Gets current value of property <code>right</code>.
		 * 
		 * Defines the distance to the right of the layout (as specified in HTML)
		 * @return Value of property <code>right</code>
		 */
		 getRight(): sap.ui.core.CSSSize;
		/**
		 * Gets current value of property <code>top</code>.
		 * 
		 * Defines the distance to the top of the layout (as specified in HTML)
		 * @return Value of property <code>top</code>
		 */
		 getTop(): sap.ui.core.CSSSize;
		/**
		 * Sets a new value for property <code>bottom</code>.
		 * 
		 * Defines the distance to the bottom of the layout (as specified in HTML)
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sBottom New value for property <code>bottom</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setBottom(sBottom:sap.ui.core.CSSSize): sap.ui.commons.layout.PositionContainer;
		/**
		 * Sets a new value for property <code>centerHorizontally</code>.
		 * 
		 * Indicates whether this container shall be centered horizontally within the AbsoluteLayout area.
		 * The values of the attributes left and right are ignored when this feature is activated.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bCenterHorizontally New value for property <code>centerHorizontally</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setCenterHorizontally(bCenterHorizontally:boolean): sap.ui.commons.layout.PositionContainer;
		/**
		 * Sets a new value for property <code>centerVertically</code>.
		 * 
		 * Indicates whether this container should be centered vertically within the AbsoluteLayout area.
		 * The values of the attributes top and bottom are ignored when this feature is activated.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bCenterVertically New value for property <code>centerVertically</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setCenterVertically(bCenterVertically:boolean): sap.ui.commons.layout.PositionContainer;
		/**
		 * Sets the aggregated <code>control</code>.
		 * @param oControl The control to set
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setControl(oControl:sap.ui.core.Control): sap.ui.commons.layout.PositionContainer;
		/**
		 * Sets a new value for property <code>left</code>.
		 * 
		 * Defines the distance to the left of the layout (as specified in HTML)
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sLeft New value for property <code>left</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setLeft(sLeft:sap.ui.core.CSSSize): sap.ui.commons.layout.PositionContainer;
		/**
		 * Sets a new value for property <code>right</code>.
		 * 
		 * Defines the distance to the right of the layout (as specified in HTML)
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sRight New value for property <code>right</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setRight(sRight:sap.ui.core.CSSSize): sap.ui.commons.layout.PositionContainer;
		/**
		 * Sets a new value for property <code>top</code>.
		 * 
		 * Defines the distance to the top of the layout (as specified in HTML)
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sTop New value for property <code>top</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setTop(sTop:sap.ui.core.CSSSize): sap.ui.commons.layout.PositionContainer;
		/**
		 * Updates the position properties of the container according to the given position in JSON style.
		 * @param oPos JSON-like object which defines the position of the child control in the absolute layout. The object is expected
		 *         to have one or more out of the attributes top, bottom, left, right (each with a value of type sap.ui.core.CSSSize). If no object
		 *         is given, nothing is updated.
		 */
		 updatePosition(oPos:any);
	}
	/**
	 * Separation, e.g. of a layout cell from its neighbor, via a vertical gutter of
	 * defined width, with or without a vertical line in its middle.
	 */
	type Separation = 
	/**
	 * Separation, e.g. of a layout cell from its neighbor, via a vertical gutter of
	 * defined width, with or without a vertical line in its middle.
	 */
	"Large" |
	/**
	 * Separation, e.g. of a layout cell from its neighbor, via a vertical gutter of
	 * defined width, with or without a vertical line in its middle.
	 */
	"LargeWithLine" |
	/**
	 * Separation, e.g. of a layout cell from its neighbor, via a vertical gutter of
	 * defined width, with or without a vertical line in its middle.
	 */
	"Medium" |
	/**
	 * Separation, e.g. of a layout cell from its neighbor, via a vertical gutter of
	 * defined width, with or without a vertical line in its middle.
	 */
	"MediumWithLine" |
	/**
	 * Separation, e.g. of a layout cell from its neighbor, via a vertical gutter of
	 * defined width, with or without a vertical line in its middle.
	 */
	"None" |
	/**
	 * Separation, e.g. of a layout cell from its neighbor, via a vertical gutter of
	 * defined width, with or without a vertical line in its middle.
	 */
	"Small" |
	/**
	 * Separation, e.g. of a layout cell from its neighbor, via a vertical gutter of
	 * defined width, with or without a vertical line in its middle.
	 */
	"SmallWithLine";
	/**
	 * Vertical alignment, e.g. of a layout cell's content within the cell's borders.
	 */
	type VAlign = 
	/**
	 * Vertical alignment, e.g. of a layout cell's content within the cell's borders.
	 */
	"Bottom" |
	/**
	 * Vertical alignment, e.g. of a layout cell's content within the cell's borders.
	 */
	"Middle" |
	/**
	 * Vertical alignment, e.g. of a layout cell's content within the cell's borders.
	 */
	"Top";
}

declare namespace sap.ui.commons.MessageBox {
	/**
	 * Enumeration of supported actions in a MessageBox.
	 * 
	 * Each action is represented as a button in the message box. The values of this enumeration are used for both,
	 * specifying the set of allowed actions as well as reporting back the user choice.
	 */
	type Action = 
	/**
	 * Enumeration of supported actions in a MessageBox.
	 * 
	 * Each action is represented as a button in the message box. The values of this enumeration are used for both,
	 * specifying the set of allowed actions as well as reporting back the user choice.
	 */
	"ABORT" |
	/**
	 * Enumeration of supported actions in a MessageBox.
	 * 
	 * Each action is represented as a button in the message box. The values of this enumeration are used for both,
	 * specifying the set of allowed actions as well as reporting back the user choice.
	 */
	"CANCEL" |
	/**
	 * Enumeration of supported actions in a MessageBox.
	 * 
	 * Each action is represented as a button in the message box. The values of this enumeration are used for both,
	 * specifying the set of allowed actions as well as reporting back the user choice.
	 */
	"CLOSE" |
	/**
	 * Enumeration of supported actions in a MessageBox.
	 * 
	 * Each action is represented as a button in the message box. The values of this enumeration are used for both,
	 * specifying the set of allowed actions as well as reporting back the user choice.
	 */
	"IGNORE" |
	/**
	 * Enumeration of supported actions in a MessageBox.
	 * 
	 * Each action is represented as a button in the message box. The values of this enumeration are used for both,
	 * specifying the set of allowed actions as well as reporting back the user choice.
	 */
	"NO" |
	/**
	 * Enumeration of supported actions in a MessageBox.
	 * 
	 * Each action is represented as a button in the message box. The values of this enumeration are used for both,
	 * specifying the set of allowed actions as well as reporting back the user choice.
	 */
	"OK" |
	/**
	 * Enumeration of supported actions in a MessageBox.
	 * 
	 * Each action is represented as a button in the message box. The values of this enumeration are used for both,
	 * specifying the set of allowed actions as well as reporting back the user choice.
	 */
	"RETRY" |
	/**
	 * Enumeration of supported actions in a MessageBox.
	 * 
	 * Each action is represented as a button in the message box. The values of this enumeration are used for both,
	 * specifying the set of allowed actions as well as reporting back the user choice.
	 */
	"YES";
	/**
	 * Enumeration of the pre-defined icons that can be used in a MessageBox.
	 */
	type Icon = 
	/**
	 * Enumeration of the pre-defined icons that can be used in a MessageBox.
	 */
	"CRITICAL" |
	/**
	 * Enumeration of the pre-defined icons that can be used in a MessageBox.
	 */
	"ERROR" |
	/**
	 * Enumeration of the pre-defined icons that can be used in a MessageBox.
	 */
	"INFORMATION" |
	/**
	 * Enumeration of the pre-defined icons that can be used in a MessageBox.
	 */
	"NONE" |
	/**
	 * Enumeration of the pre-defined icons that can be used in a MessageBox.
	 */
	"QUESTION" |
	/**
	 * Enumeration of the pre-defined icons that can be used in a MessageBox.
	 */
	"SUCCESS" |
	/**
	 * Enumeration of the pre-defined icons that can be used in a MessageBox.
	 */
	"WARNING";
}

declare namespace sap.ui.core {
	/**
	 * Defines the accessible landmark roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	type AccessibleLandmarkRole = 
	/**
	 * Defines the accessible landmark roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"Banner" |
	/**
	 * Defines the accessible landmark roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"Complementary" |
	/**
	 * Defines the accessible landmark roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"Main" |
	/**
	 * Defines the accessible landmark roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"Navigation" |
	/**
	 * Defines the accessible landmark roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"None" |
	/**
	 * Defines the accessible landmark roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"Region" |
	/**
	 * Defines the accessible landmark roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"Search";
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	type AccessibleRole = 
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"Alert" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"AlertDialog" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"Application" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"Banner" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"Button" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"Checkbox" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"ColumnHeader" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"Combobox" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"ContentInfo" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"Definition" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"Description" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"Dialog" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"Directory" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"Document" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"Grid" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"GridCell" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"Group" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"Heading" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"Img" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"Link" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"List" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"Listbox" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"ListItem" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"Log" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"Main" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"Marquee" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"Menu" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"Menubar" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"MenuItem" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"MenuItemCheckbox" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"MenuItemRadio" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"Navigation" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"Note" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"Option" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"Presentation" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"ProgressBar" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"Radio" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"RadioGroup" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"Region" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"Row" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"RowHeader" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"Search" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"Secondary" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"SeeAlso" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"Separator" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"Slider" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"SpinButton" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"Status" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"Tab" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"Tablist" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"Tabpanel" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"Textbox" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"Timer" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"Toolbar" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"Tooltip" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"Tree" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"TreeGrid" |
	/**
	 * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
	 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
	 */
	"TreeItem";
	/**
	 * The AppCacheBuster is used to hook into URL relevant functions in jQuery
	 * and SAPUI5 and rewrite the URLs with a timestamp segment. The timestamp
	 * information is fetched from the server and used later on for the URL
	 * rewriting.
	 */
	namespace AppCacheBuster {
		/**
		 * Converts the given URL if it matches a URL in the cachebuster index.
		 * If not then the same URL will be returned. To prevent URLs from being
		 * modified by the application cachebuster you can implement the function
		 * <code>sap.ui.core.AppCacheBuster.handleURL</code>.
		 * @param sUrl any URL
		 * @return modified URL when matching the index or unmodified when not
		 */
		function convertURL(sUrl:string): string;
		/**
		 * Callback function which can be overwritten to programmatically decide
		 * whether to rewrite the given URL or not.
		 * @param sUrl any URL
		 * @return <code>true</code> to rewrite or <code>false</code> to ignore
		 */
		function handleURL(sUrl:string): boolean;
		/**
		 * Normalizes the given URL and make it absolute.
		 * @param sUrl any URL
		 * @return normalized URL
		 */
		function normalizeURL(sUrl:string): string;
		/**
		 * Registers an application. Loads the cachebuster index file from this
		 * locations. All registered files will be considered by the cachebuster
		 * and the URLs will be prefixed with the timestamp of the index file.
		 * @param base URL of an application providing a cachebuster index file
		 */
		function register(base:string);
	}
	/**
	 * Configuration options for the colors of a progress bar
	 */
	type BarColor = 
	/**
	 * Configuration options for the colors of a progress bar
	 */
	"CRITICAL" |
	/**
	 * Configuration options for the colors of a progress bar
	 */
	"NEGATIVE" |
	/**
	 * Configuration options for the colors of a progress bar
	 */
	"NEUTRAL" |
	/**
	 * Configuration options for the colors of a progress bar
	 */
	"POSITIVE";
	/**
	 * Provides methods to show or hide a waiting animation covering the whole
	 * page and blocking user interaction.
	 */
	namespace BusyIndicator {
		/**
		 * Registers a handler for the "close" event
		 * @param fnFunction The function to call, when the event occurs.
		 *            This function will be called on the oListener-instance (if
		 *            present) or in a 'static way'.
		 * @param oListener Object on which to call the given function.
		 * @return <code>this</code> to allow method chaining
		 */
		function attachClose(fnFunction:any, oListener?:any): sap.ui.core.BusyIndicator;
		/**
		 * Registers a handler for the "open" event.
		 * @param fnFunction The function to call, when the event occurs. This
		 *            function will be called on the oListener-instance (if present)
		 *            or in a 'static way'.
		 * @param oListener Object on which to call the given function.
		 * @return <code>this</code> to allow method chaining
		 */
		function attachOpen(fnFunction:any, oListener?:any): sap.ui.core.BusyIndicator;
		/**
		 * Unregisters a handler for the "close" event
		 * @param fnFunction The callback function to unregister
		 * @param oListener Object on which the given function had to be called.
		 * @return <code>this</code> to allow method chaining
		 */
		function detachClose(fnFunction:any, oListener:any): sap.ui.core.BusyIndicator;
		/**
		 * Unregisters a handler for the "open" event
		 * @param fnFunction The callback function to unregister
		 * @param oListener Object on which the given function had to be called.
		 * @return <code>this</code> to allow method chaining
		 */
		function detachOpen(fnFunction:any, oListener:any): sap.ui.core.BusyIndicator;
		/**
		 * Removes the BusyIndicator from the screen
		 */
		function hide();
		/**
		 * Displays the BusyIndicator and starts blocking all user input.
		 * This only happens after some delay and if after that delay the
		 * BusyIndicator.hide() has not yet been called in the meantime.
		 * There is a certain default value for the delay, but that one can be
		 * overridden.
		 * @param iDelay The delay in milliseconds before opening the
		 *                       BusyIndicator. It is not opened if hide() is called
		 *                       before end of the delay. If no delay (or no valid
		 *                       delay) is given, the default value is used.
		 */
		function show(iDelay?:number);
	}
	type BusyIndicatorUtils = any
	/**
	 * The types of Calendar
	 */
	type CalendarType = 
	/**
	 * The types of Calendar
	 */
	"Gregorian" |
	/**
	 * The types of Calendar
	 */
	"Islamic" |
	/**
	 * The types of Calendar
	 */
	"Japanese";
	/**
	 * Collision behavior: horizontal/vertical.
	 * 
	 * Defines how the position of an element should be adjusted in case it overflows the window in some direction. For both
	 * directions this can be "flip", "fit" or "none". If only one behavior is provided it is applied to both directions.
	 * Examples: "flip", "fit none".
	 */
	type Collision = any
	class ComponentContainer extends sap.ui.core.Control{
		/**
		 * Constructor for a new ComponentContainer.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given
		 * @param mSettings initial settings for the new control
		 */
		 constructor(sId?:string, mSettings?:any);
		/**
		 * Creates a new subclass of class sap.ui.core.ComponentContainer with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * ID of the element which is the current target of the association <code>component</code>, or <code>null</code>.
		 * @return 
		 */
		 getComponent(): sap.ui.core.ID;
		/**
		 * Gets current value of property <code>handleValidation</code>.
		 * 
		 * Enable/disable validation handling by MessageManager for this component.
		 * The resulting Messages will be propagated to the controls.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>handleValidation</code>
		 */
		 getHandleValidation(): boolean;
		/**
		 * Gets current value of property <code>height</code>.
		 * 
		 * Container height in CSS size
		 * @return Value of property <code>height</code>
		 */
		 getHeight(): sap.ui.core.CSSSize;
		/**
		 * Returns a metadata object for class sap.ui.core.ComponentContainer.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Gets current value of property <code>name</code>.
		 * 
		 * Component name, the package where the component is contained. The property can only be applied initially.
		 * @return Value of property <code>name</code>
		 */
		 getName(): string;
		/**
		 * Gets current value of property <code>propagateModel</code>.
		 * 
		 * Defines whether binding information is propagated to the component.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>propagateModel</code>
		 */
		 getPropagateModel(): boolean;
		/**
		 * Gets current value of property <code>settings</code>.
		 * 
		 * The settings object passed to the component when created. The property can only be applied initially.
		 * @return Value of property <code>settings</code>
		 */
		 getSettings(): any;
		/**
		 * Gets current value of property <code>url</code>.
		 * 
		 * The URL of the component. The property can only be applied initially.
		 * @return Value of property <code>url</code>
		 */
		 getUrl(): sap.ui.core.URI;
		/**
		 * Gets current value of property <code>width</code>.
		 * 
		 * Container width in CSS size
		 * @return Value of property <code>width</code>
		 */
		 getWidth(): sap.ui.core.CSSSize;
		/**
		 * Sets the associated <code>component</code>.
		 * @param oComponent ID of an element which becomes the new target of this component association; alternatively, an element instance may be given
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setComponent(oComponent:sap.ui.core.ID|sap.ui.core.UIComponent): sap.ui.core.ComponentContainer;
		/**
		 * Sets a new value for property <code>handleValidation</code>.
		 * 
		 * Enable/disable validation handling by MessageManager for this component.
		 * The resulting Messages will be propagated to the controls.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bHandleValidation New value for property <code>handleValidation</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setHandleValidation(bHandleValidation:boolean): sap.ui.core.ComponentContainer;
		/**
		 * Sets a new value for property <code>height</code>.
		 * 
		 * Container height in CSS size
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sHeight New value for property <code>height</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setHeight(sHeight:sap.ui.core.CSSSize): sap.ui.core.ComponentContainer;
		/**
		 * Sets a new value for property <code>name</code>.
		 * 
		 * Component name, the package where the component is contained. The property can only be applied initially.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sName New value for property <code>name</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setName(sName:string): sap.ui.core.ComponentContainer;
		/**
		 * Sets a new value for property <code>propagateModel</code>.
		 * 
		 * Defines whether binding information is propagated to the component.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bPropagateModel New value for property <code>propagateModel</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setPropagateModel(bPropagateModel:boolean): sap.ui.core.ComponentContainer;
		/**
		 * Sets a new value for property <code>settings</code>.
		 * 
		 * The settings object passed to the component when created. The property can only be applied initially.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param oSettings New value for property <code>settings</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setSettings(oSettings:any): sap.ui.core.ComponentContainer;
		/**
		 * Sets a new value for property <code>url</code>.
		 * 
		 * The URL of the component. The property can only be applied initially.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sUrl New value for property <code>url</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setUrl(sUrl:sap.ui.core.URI): sap.ui.core.ComponentContainer;
		/**
		 * Sets a new value for property <code>width</code>.
		 * 
		 * Container width in CSS size
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sWidth New value for property <code>width</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setWidth(sWidth:sap.ui.core.CSSSize): sap.ui.core.ComponentContainer;
	}
	class Configuration extends sap.ui.base.Object{
		/**
		 * Creates a new Configuration object.
		 */
		 constructor();
		/**
		 * Creates a new subclass of class sap.ui.core.Configuration with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns whether the accessibility mode is used or not
		 * @return whether the accessibility mode is used or not
		 */
		 getAccessibility(): boolean;
		/**
		 * Returns whether the animations are globally used
		 * @return whether the animations are globally used
		 */
		 getAnimation(): boolean;
		/**
		 * Base URLs to AppCacheBuster Etag-Index files
		 * @return array of base URLs
		 */
		 getAppCacheBuster(): string[];
		/**
		 * Object defining the callback hooks for the AppCacheBuster like e.g.
		 * <code>handleURL</code>, <code>onIndexLoad</code> or <code>onIndexLoaded</code>.
		 * @return object containing the callback functions for the AppCacheBuster
		 */
		 getAppCacheBusterHooks(): any;
		/**
		 * The loading mode (sync|async|batch) of the AppCacheBuster (sync is default)
		 * @return sync | async
		 */
		 getAppCacheBusterMode(): string;
		/**
		 * Returns the used compatibility version for the given feature.
		 * @param sFeature the key of desired feature
		 * @return the used compatibility version
		 */
		 getCompatibilityVersion(sFeature:string): jQuery.sap.Version;
		/**
		 * Returns whether the page runs in debug mode
		 * @return whether the page runs in debug mode
		 */
		 getDebug(): boolean;
		/**
		 * Returns whether the Fiori2Adaptation is on
		 * @return false - no adaptation, true - full adaptation, comma-separated list - partial adaptation
		 * Possible values: style, collapse, title, back, hierarchy
		 */
		 getFiori2Adaptation(): boolean|string;
		/**
		 * Returns the format locale string with language and region code. Falls back to
		 * language configuration, in case it has not been explicitly defined.
		 * @return the format locale string with language and country code
		 */
		 getFormatLocale(): string;
		/**
		 * Returns a configuration object that bundles the format settings of UI5.
		 * @return A FormatSettings object.
		 */
		 getFormatSettings(): sap.ui.core.Configuration.FormatSettings;
		/**
		 * frameOptions mode (allow/deny/trusted).
		 * @return frameOptions mode
		 */
		 getFrameOptions(): string;
		/**
		 * Returns whether the UI5 control inspector is displayed
		 * Has only an effect when the sap-ui-debug module has been loaded
		 * @return whether the UI5 control inspector is displayed
		 */
		 getInspect(): boolean;
		/**
		 * Returns a string that identifies the current language.
		 * 
		 * The value returned by this methods in most cases corresponds to the exact value that has been
		 * configured by the user or application or that has been determined from the user agent settings.
		 * It neither has been normalized nor validated against a specification or standard, although
		 * UI5 expects a value compliant with {@link http://www.ietf.org/rfc/bcp/bcp47.txt BCP47}.
		 * 
		 * The exceptions mentioned above affect languages that have been specified via the URL parameter
		 * <code>sap-language</code>. That parameter by definition represents a SAP logon language code
		 * ('ABAP language'). Most but not all of these language codes are valid ISO639 two-letter languages
		 * and as such are valid BCP47 language tags. For better BCP47 compliance, the framework
		 * maps the following non-BCP47 SAP logon codes to a BCP47 substitute:
		 * <pre>
		 *    "ZH"  -->  "zh-Hans"         // script 'Hans' added to distinguish it from zh-Hant
		 *    "ZF"  -->  "zh-Hant"         // ZF ist not a valid ISO639 code, use the compliant language + script 'Hant'
		 * 		 "    "1Q"  -->  "en-US-x-saptrc"  // special language code for supportability (tracing),
		 *                                    represented as en-US with a priate extension
		 *    "2Q"  -->  "en-US-x-sappsd"  // special language code for supportability (pseudo translation),
		 *                                    represented as en-US with a priate extension
		 * </pre>
		 * @return The language string as configured
		 */
		 getLanguage(): string;
		/**
		 * Returns a BCP47-compliant language tag for the current language.
		 * 
		 * If the current {@link #getLanguage language} can't be interpreted as a
		 * BCP47-compliant language, then the value <code>undefined</code> is returned.
		 * @return The language tag for the current language, conforming to BCP47
		 */
		 getLanguageTag(): string;
		/**
		 * Returns a Locale object for the current language.
		 * 
		 * The Locale is derived from the {@link #getLanguage language} property.
		 * @return The locale
		 */
		 getLocale(): sap.ui.core.Locale;
		/**
		 * Returns a metadata object for class sap.ui.core.Configuration.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Returns whether there should be an exception on any duplicate element IDs
		 * @return whether there should be an exception on any duplicate element IDs
		 */
		 getNoDuplicateIds(): boolean;
		/**
		 * Returns whether the text origin information is collected
		 * @return whether the text info is collected
		 */
		 getOriginInfo(): boolean;
		/**
		 * The name of the root component to start or empty
		 * @return name of the root component
		 */
		 getRootComponent(): string;
		/**
		 * Returns whether the page uses the RTL text direction.
		 * 
		 * If no mode has been explicitly set (neither true nor false),
		 * the mode is derived from the current language setting.
		 * @return whether the page uses the RTL text direction
		 */
		 getRTL(): boolean;
		/**
		 * Returns a SAP logon language for the current language.
		 * 
		 * If the current {@link #getLanguage language} can't be interpreted as a
		 * BCP47-compliant language, or if the BCP47 language can't be converted to
		 * a SAP Logon language, then the value <code>undefined</code> is returned.
		 * @return The SAP logon language code for the current language
		 */
		 getSAPLogonLanguage(): string;
		/**
		 * Returns the theme name
		 * @return the theme name
		 */
		 getTheme(): string;
		/**
		 * Prefix to be used for automatically generated control IDs.
		 * Default is a double underscore "__".
		 * @return the prefix to be used
		 */
		 getUIDPrefix(): string;
		/**
		 * Returns the version of the framework.
		 * 
		 * Similar to <code>sap.ui.version</code>.
		 * @return the version
		 */
		 getVersion(): jQuery.sap.Version;
		/**
		 * URL of the whitelist service.
		 * @return whitelist service URL
		 */
		 getWhitelistService(): string;
		/**
		 * Sets a new formatLocale to be used from now on for retrieving locale
		 * specific formatters. Modifying this setting does not have an impact on
		 * the retrieval of translated texts!
		 * 
		 * Can either be set to a concrete value (a BCP-47 or Java locale compliant
		 * language tag) or to <code>null</code>. When set to <code>null</code> (default
		 * value) then locale specific formatters are retrieved for the current language.
		 * 
		 * After changing the formatLocale, the framework tries to update localization
		 * specific parts of the UI. See the documentation of {@link #setLanguage} for
		 * details and restrictions.
		 * @param sFormatLocale the new format locale as a BCP47 compliant language tag;
		 *   case doesn't matter and underscores can be used instead of a dashes to separate
		 *   components (compatibility with Java Locale Ids)
		 * @return <code>this</code> to allow method chaining
		 */
		 setFormatLocale(sFormatLocale:string): sap.ui.core.Configuration;
		/**
		 * Sets a new language to be used from now on for language/region dependent
		 * functionality (e.g. formatting, data types, translated texts, ...).
		 * 
		 * When the language has changed, the Core will fire its
		 * {@link sap.ui.core.Core#event:localizationChanged localizationChanged} event.
		 * 
		 * The framework <strong>does not</strong> guarantee that already created, language
		 * dependent objects will be updated by this call. It therefore remains best practice
		 * for applications to switch the language early, e.g. before any language dependent
		 * objects are created. Applications that need to support more dynamic changes of
		 * the language should listen to the <code>localizationChanged</code> event and adapt
		 * all language dependent objects that they use (e.g. by rebuilding their UI).
		 * 
		 * Currently, the framework notifies the following objects about a change of the
		 * localization settings before it fires the <code>localizationChanged</code> event:
		 * 
		 * <ul>
		 * <li>date and number data types that are used in property bindings or composite
		 *     bindings in existing Elements, Controls, UIAreas or Components</li>
		 * <li>ResourceModels currently assigned to the Core, an UIArea, Component,
		 *     Element or Control</li>
		 * <li>Elements or Controls that implement the <code>onlocalizationChanged</code> hook
		 *     (note the lowercase 'l' in onlocalizationChanged)
		 * </ul>
		 * 
		 * It furthermore derives the RTL mode from the new language, if no explicit RTL
		 * mode has been set. If the RTL mode changes, the following additional actions will be taken:
		 * 
		 * <ul>
		 * <li>the URLs of already loaded library theme files will be changed</li>
		 * <li>the <code>dir</code> attribute of the page will be changed to reflect the new mode.</li>
		 * <li>all UIAreas will be invalidated (which results in a rendering of the whole UI5 UI)</li>
		 * </ul>
		 * 
		 * This method does not handle SAP logon language codes.
		 * @param sLanguage the new language as a BCP47 compliant language tag; case doesn't matter
		 *   and underscores can be used instead of a dashes to separate components (compatibility with Java Locale Ids)
		 * @return <code>this</code> to allow method chaining
		 */
		 setLanguage(sLanguage:string): sap.ui.core.Configuration;
		/**
		 * Sets the character orientation mode to be used from now on.
		 * 
		 * Can either be set to a concrete value (true meaning right-to-left,
		 * false meaning left-to-right) or to <code>null</code> which means that
		 * the character orientation mode should be derived from the current
		 * language (incl. region) setting.
		 * 
		 * After changing the character orientation mode, the framework tries
		 * to update localization specific parts of the UI. See the documentation of
		 * {@link #setLanguage} for details and restrictions.
		 * @param bRTL new character orientation mode or <code>null</code>
		 * @return <code>this</code> to allow method chaining
		 */
		 setRTL(bRTL:boolean): sap.ui.core.Configuration;
	}
	class Control extends sap.ui.core.Element{
		/**
		 * Creates and initializes a new control with the given <code>sId</code> and settings.
		 * 
		 * The set of allowed entries in the <code>mSettings</code> object depends on the concrete
		 * subclass and is described there. See {@link sap.ui.core.Element} for a general description of this
		 * argument.
		 * 
		 * The settings supported by Control are:
		 * <ul>
		 * <li>Properties
		 * <ul>
		 * <li>{@link #getBusy busy} : boolean (default: false)</li>
		 * <li>{@link #getBusyIndicatorDelay busyIndicatorDelay} : int (default: 1000)</li>
		 * </ul>
		 * </li>
		 * </ul>
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId optional id for the new control; generated automatically if no non-empty id is given
		 *      Note: this can be omitted, no matter whether <code>mSettings</code> will be given or not!
		 * @param mSettings optional map/JSON-object with initial settings for the new control
		 */
		 constructor(sId?:string, mSettings?:any);
		/**
		 * The string given as "sStyleClass" will be added to the "class" attribute of this control's root HTML element.
		 * 
		 * This method is intended to be used to mark controls as being of a special type for which
		 * special styling can be provided using CSS selectors that reference this style class name.
		 * 
		 * <pre>
		 * Example:
		 *    myButton.addStyleClass("myRedTextButton"); // add a CSS class to one button instance
		 * 
		 * ...and in CSS:
		 *    .myRedTextButton {
		 *       color: red;
		 *    }
		 * </pre>
		 * 
		 * This will add the CSS class "myRedTextButton" to the Button HTML and the CSS code above will then
		 * make the text in this particular button red.
		 * 
		 * Only characters allowed inside HTML attributes are allowed.
		 * Quotes are not allowed and this method will ignore any strings containing quotes.
		 * Strings containing spaces are interpreted as multiple custom style classes which are split by space and can be removed
		 * individually later by calling removeStyleClass.
		 * Multiple calls with the same sStyleClass will have no different effect than calling once.
		 * If sStyleClass is null, empty string or it contains quotes, the call is ignored.
		 * @param sStyleClass the CSS class name to be added
		 * @return Returns <code>this</code> to allow method chaining
		 */
		 addStyleClass(sStyleClass:string): sap.ui.core.Control;
		/**
		 * Defines whether the user can select text inside this control.
		 * Defaults to <code>true</code> as long as this method has not been called.
		 * 
		 * <b>Note:</b>This only works in IE and Safari; for Firefox the element's style must
		 * be set to:
		 * <pre>
		 *   -moz-user-select: none;
		 * </pre>
		 * in order to prevent text selection.
		 * @param bAllow whether to allow text selection or not
		 * @return Returns <code>this</code> to allow method chaining
		 */
		 allowTextSelection(bAllow:boolean): sap.ui.core.Control;
		/**
		 * Allows binding handlers for any native browser event to the root HTML element of this Control. This internally handles
		 * DOM element replacements caused by re-rendering.
		 * 
		 * IMPORTANT:
		 * This should be only used as FALLBACK when the Control events do not cover a specific use-case! Always try using
		 * SAPUI5 control events, as e.g. accessibility-related functionality is then provided automatically.
		 * E.g. when working with a sap.ui.commons.Button, always use the Button's "press" event, not the native "click" event, because
		 * "press" is also guaranteed to be fired when certain keyboard activity is supposed to trigger the Button.
		 * 
		 * In the event handler, "this" refers to the Control - not to the root DOM element like in jQuery. While the DOM element can
		 * be used and modified, the general caveats for working with SAPUI5 control DOM elements apply. In particular the DOM element
		 * may be destroyed and replaced by a new one at any time, so modifications that are required to have permanent effect may not
		 * be done. E.g. use Control.addStyleClass() instead if the modification is of visual nature.
		 * 
		 * Use detachBrowserEvent() to remove the event handler(s) again.
		 * @param sEventType A string containing one or more JavaScript event types, such as "click" or "blur".
		 * @param fnHandler A function to execute each time the event is triggered.
		 * @param oListener The object, that wants to be notified, when the event occurs
		 * @return Returns <code>this</code> to allow method chaining
		 */
		 attachBrowserEvent(sEventType?:string, fnHandler?:any, oListener?:any): sap.ui.core.Control;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>validateFieldGroup</code> event of this <code>sap.ui.core.Control</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.ui.core.Control</code> itself.
		 * 
		 * Event is fired if a logical field group defined by <code>fieldGroupIds</code> of a control was left or the user explicitly pressed a validation key combination.
		 * Use this event to validate data of the controls belonging to a field group.
		 * @param fnFunction The function to be called when the event occurs
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.core.Control</code> itself
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 attachValidateFieldGroup(fnFunction:any, oData?:any, oListener?:any): sap.ui.core.Control;
		/**
		 * Returns whether the control has a given field group.
		 * If <code>vFieldGroupIds</code> is not given it checks whether at least one field group ID is given for this control.
		 * If <code>vFieldGroupIds</code> is an empty array or empty string, true is returned if there is no field group ID set for this control.
		 * If <code>vFieldGroupIds</code> is a string array or a string all expected field group IDs are checked and true is returned if all are contained for given for this control.
		 * The comma delimiter can be used to seperate multiple field group IDs in one string.
		 * @param vFieldGroupIds ID of the field group or an array of field group IDs to match
		 * @return true if a field group ID matches
		 */
		 checkFieldGroupIds(vFieldGroupIds?:string|string[]): boolean;
		/**
		 * Overrides {@link sap.ui.core.Element#clone Element.clone} to clone additional
		 * internal state.
		 * 
		 * The additionally cloned information contains:
		 * <ul>
		 * <li>browser event handlers attached with {@link #attachBrowserEvent}
		 * <li>text selection behavior
		 * <li>style classes added with {@link #addStyleClass}
		 * </ul>
		 * @param sIdSuffix a suffix to be appended to the cloned element id
		 * @param aLocalIds an array of local IDs within the cloned hierarchy (internally used)
		 * @return reference to the newly created clone
		 */
		protected clone(sIdSuffix?:string, aLocalIds?:string[]): sap.ui.core.Element;
		/**
		 * Removes event handlers which have been previously attached using {@link #attachBrowserEvent}.
		 * 
		 * Note: listeners are only removed, if the same combination of event type, callback function
		 * and context object is given as in the call to <code>attachBrowserEvent</code>.
		 * @param sEventType A string containing one or more JavaScript event types, such as "click" or "blur".
		 * @param fnHandler The function that is to be no longer executed.
		 * @param oListener The context object that was given in the call to attachBrowserEvent.
		 */
		 detachBrowserEvent(sEventType?:string, fnHandler?:any, oListener?:any);
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>validateFieldGroup</code> event of this <code>sap.ui.core.Control</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 detachValidateFieldGroup(fnFunction:any, oListener:any): sap.ui.core.Control;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Fires event <code>validateFieldGroup</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>fieldGroupIds</code> of type <code>string[]</code>field group IDs of the logical field groups to validate</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		protected fireValidateFieldGroup(mArguments?:any): sap.ui.core.Control;
		/**
		 * Gets current value of property <code>busy</code>.
		 * 
		 * Whether the control is currently in busy state.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>busy</code>
		 */
		 getBusy(): boolean;
		/**
		 * Gets current value of property <code>busyIndicatorDelay</code>.
		 * 
		 * The delay in milliseconds, after which the busy indicator will show up for this control.
		 * 
		 * Default value is <code>1000</code>.
		 * @return Value of property <code>busyIndicatorDelay</code>
		 */
		 getBusyIndicatorDelay(): number;
		/**
		 * Returns a list of all child controls with a field group ID.
		 * See {@link #checkFieldGroupIds checkFieldGroupIds} for a description of the
		 * <code>vFieldGroupIds</code> parameter.
		 * Associated controls are not taken into account.
		 * @param vFieldGroupIds ID of the field group or an array of field group IDs to match
		 * @return The list of controls with a field group ID
		 */
		 getControlsByFieldGroupId(vFieldGroupIds?:string|string[]): sap.ui.core.Control[];
		/**
		 * Returns a copy of the field group IDs array. Modification of the field group IDs
		 * need to call {@link #setFieldGroupIds setFieldGroupIds} to apply the changes.
		 * @return copy of the field group IDs
		 */
		 getFieldGroupIds(): string[];
		/**
		 * Returns the DOMNode Id to be used for the "labelFor" attribute of the label.
		 * 
		 * By default, this is the Id of the control itself.
		 * @return Id to be used for the <code>labelFor</code>
		 */
		 getIdForLabel(): string;
		/**
		 * Returns a metadata object for class sap.ui.core.Control.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Returns a renderer for this control instance.
		 * 
		 * It is retrieved using the RenderManager as done during rendering.
		 * @return a Renderer suitable for this Control instance.
		 */
		protected getRenderer(): any;
		/**
		 * Gets current value of property <code>visible</code>.
		 * 
		 * Whether the control should be visible on the screen. If set to false, a placeholder is rendered instead of the real control
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>visible</code>
		 */
		 getVisible(): boolean;
		/**
		 * Returns true if the given style class or all multiple style classes which are generated by splitting the given string with space are already set on the control
		 * via previous call(s) to addStyleClass().
		 * @param sStyleClass the style to check for
		 * @return 
		 */
		 hasStyleClass(sStyleClass:string): boolean;
		/**
		 * Triggers rerendering of this element and its children.
		 * 
		 * As <code>sap.ui.core.Element</code> "bubbles up" the invalidate, changes to children
		 * potentially result in rerendering of the whole sub tree.
		 * @param oOrigin 
		 */
		protected invalidate(oOrigin:any);
		/**
		 * Check if the control is currently in busy state
		 * @deprecated Use getBusy instead
		 * @return boolean
		 */
		 isBusy();
		/**
		 * Function is called when the rendering of the control is completed.
		 * 
		 * Applications must not call this hook method directly, it is called by the framework.
		 * 
		 * Subclasses of Control should override this hook to implement any necessary actions after the rendering.
		 */
		protected onAfterRendering();
		/**
		 * Function is called before the rendering of the control is started.
		 * 
		 * Applications must not call this hook method directly, it is called by the framework.
		 * 
		 * Subclasses of Control should override this hook to implement any necessary actions before the rendering.
		 */
		protected onBeforeRendering();
		/**
		 * Puts <code>this</code> control into the specified container (<code>oRef</code>) at the given
		 * position (<code>oPosition</code>).
		 * 
		 * First it is checked whether <code>oRef</code> is a container element / control (has a
		 * multiple aggregation with type <code>sap.ui.core.Control</code> and name 'content') or is an Id String
		 * of such an container.
		 * If this is not the case <code>oRef</code> can either be a Dom Reference or Id String of the UIArea
		 * (if it does not yet exist implicitly a new UIArea is created),
		 * 
		 * The <code>oPosition</code> can be one of the following:
		 * 
		 * <ul>
		 *  <li>"first": The control is added as the first element to the container.</li>
		 *  <li>"last": The control is added as the last element to the container (default).</li>
		 *  <li>"only": All existing children of the container are removed (not destroyed!) and the control is added as new child.</li>
		 *  <li><i>index</i>: The control is added at the specified <i>index</i> to the container.</li>
		 * </ul>
		 * @param oRef container into which the control should be put
		 * @param oPosition Describes the position where the control should be put into the container
		 * @return Returns <code>this</code> to allow method chaining
		 */
		 placeAt(oRef:string|any|sap.ui.core.Control, oPosition:string|number): sap.ui.core.Control;
		/**
		 * Removes the given string from the list of custom style classes that have been set previously.
		 * Regular style classes like "sapUiBtn" cannot be removed.
		 * @param sStyleClass the style to be removed
		 * @return Returns <code>this</code> to allow method chaining
		 */
		 removeStyleClass(sStyleClass:string): sap.ui.core.Control;
		/**
		 * Tries to replace its DOM reference by re-rendering.
		 */
		protected rerender();
		/**
		 * Set the controls busy state.
		 * @param bBusy The new busy state to be set
		 * @return <code>this</code> to allow method chaining
		 */
		 setBusy(bBusy:boolean): sap.ui.core.Control;
		/**
		 * Define the delay, after which the busy indicator will show up
		 * @param iDelay The delay in ms
		 * @return <code>this</code> to allow method chaining
		 */
		 setBusyIndicatorDelay(iDelay:number): sap.ui.core.Control;
		/**
		 * Sets a new value for property <code>visible</code>.
		 * 
		 * Whether the control should be visible on the screen. If set to false, a placeholder is rendered instead of the real control
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bVisible New value for property <code>visible</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setVisible(bVisible:boolean): sap.ui.core.Control;
		/**
		 * The string given as "sStyleClass" will be be either added to or removed from the "class" attribute of this control's root HTML element,
		 * depending on the value of "bAdd": if bAdd is true, sStyleClass will be added.
		 * If bAdd is not given, sStyleClass will be removed if it is currently present and will be added if not present.
		 * If sStyleClass is null or empty string, the call is ignored.
		 * 
		 * See addStyleClass and removeStyleClass for further documentation.
		 * @param sStyleClass the CSS class name to be added or removed
		 * @param bAdd whether sStyleClass should be added (or removed); when this parameter is not given, sStyleClass will be toggled (removed, if present, and added if not present)
		 * @return Returns <code>this</code> to allow method chaining
		 */
		 toggleStyleClass(sStyleClass:string, bAdd:boolean): sap.ui.core.Control;
		/**
		 * Triggers the validateFieldGroup event for this control.
		 * Called by sap.ui.core.UIArea if a field group should be validated after is loses the focus or a validation key combibation was pressed.
		 * The validation key is defined in the UI area <code>UIArea._oFieldGroupValidationKey</code>
		 */
		 triggerValidateFieldGroup();
	}
	class Core extends sap.ui.base.Object{
		/**
		 * 
		 */
		 constructor();
		/**
		 * Enforces an immediate update of the visible UI (aka "rendering").
		 * 
		 * In general, applications should avoid calling this method and
		 * instead let the framework manage any necessary rendering.
		 */
		 applyChanges();
		/**
		 * Applies the theme with the given name (by loading the respective style sheets, which does not disrupt the application).
		 * 
		 * By default, the theme files are expected to be located at path relative to the respective control library ([libraryLocation]/themes/[themeName]).
		 * Different locations can be configured by using the method setThemePath() or by using the second parameter "sThemeBaseUrl" of applyTheme().
		 * Usage of this second parameter is a shorthand for setThemePath and internally calls setThemePath, so the theme location is then known.
		 * 
		 * sThemeBaseUrl is a single URL to specify the default location of all theme files. This URL is the base folder below which the control library folders
		 * are located. E.g. if the CSS files are not located relative to the root location of UI5, but instead they are at locations like
		 *    http://my.server/myapp/resources/sap/ui/core/themes/my_theme/library.css
		 * then the URL that needs to be given is:
		 *    http://my.server/myapp/resources
		 * All theme resources are then loaded from below this folder - except if for a certain library a different location has been registered.
		 * 
		 * If the theme resources are not all either below this base location or  with their respective libraries, then setThemePath must be
		 * used to configure individual locations.
		 * @param sThemeName the name of the theme to be loaded
		 * @param sThemeBaseUrl the (optional) base location of the theme
		 */
		 applyTheme(sThemeName:string, sThemeBaseUrl?:string);
		/**
		 * Registers a listener for control events.
		 * @param fnFunction callback to be called for each control event
		 * @param oListener optional context object to call the callback on.
		 */
		 attachControlEvent(fnFunction:any, oListener?:any);
		/**
		 * Attach event-handler <code>fnFunction</code> to the 'formatError' event of <code>sap.ui.core.Core</code>.<br/>
		 * Please note that this event is a bubbling event and may already be canceled before reaching the core.<br/>
		 * @param fnFunction The function to call, when the event occurs. This function will be called on the
		 *            oListener-instance (if present) or in a 'static way'.
		 * @param oListener Object on which to call the given function. If empty, this Model is used.
		 * @return <code>this</code> to allow method chaining
		 */
		 attachFormatError(fnFunction:any, oListener?:any): sap.ui.core.Core;
		/**
		 * Register a listener for the <code>localizationChanged</code> event.
		 * @param fnFunction callback to be called
		 * @param oListener context object to cal lthe function on.
		 */
		 attachLocalizationChanged(fnFunction:any, oListener:any);
		/**
		 * Attach event-handler <code>fnFunction</code> to the 'parseError' event of <code>sap.ui.core.Core</code>.<br/>
		 * Please note that this event is a bubbling event and may already be canceled before reaching the core.<br/>
		 * @param fnFunction The function to call, when the event occurs. This function will be called on the
		 *            oListener-instance (if present) or in a 'static way'.
		 * @param oData The object, that should be passed along with the event-object when firing the event
		 * @param oListener Object on which to call the given function. If empty, this Model is used.
		 * @return <code>this</code> to allow method chaining
		 */
		 attachParseError(fnFunction:any, oData?:any, oListener?:any): sap.ui.core.Core;
		/**
		 * Attach event-handler <code>fnFunction</code> to the 'validationError' event of <code>sap.ui.core.Core</code>.<br/>
		 * Please note that this event is a bubbling event and may already be canceled before reaching the core.<br/>
		 * @param fnFunction The function to call, when the event occurs. This function will be called on the
		 *            oListener-instance (if present) or in a 'static way'.
		 * @param oData The object, that should be passed along with the event-object when firing the event
		 * @param oListener Object on which to call the given function. If empty, this Model is used.
		 * @return <code>this</code> to allow method chaining
		 */
		 attachValidationError(fnFunction:any, oData?:any, oListener?:any): sap.ui.core.Core;
		/**
		 * Attach event-handler <code>fnFunction</code> to the 'validationSuccess' event of <code>sap.ui.core.Core</code>.<br/>
		 * Please note that this event is a bubbling event and may already be canceled before reaching the core.<br/>
		 * @param fnFunction The function to call, when the event occurs. This function will be called on the
		 *            oListener-instance (if present) or in a 'static way'.
		 * @param oData The object, that should be passed along with the event-object when firing the event
		 * @param oListener Object on which to call the given function. If empty, this Model is used.
		 * @return <code>this</code> to allow method chaining
		 */
		 attachValidationSuccess(fnFunction:any, oData?:any, oListener?:any): sap.ui.core.Core;
		/**
		 * Returns a list of all controls with a field group ID.
		 * See {@link sap.ui.core.Control#checkFieldGroupIds Control.prototype.checkFieldGroupIds} for a description of the
		 * <code>vFieldGroupIds</code> parameter.
		 * @param vFieldGroupIds ID of the field group or an array of field group IDs to match
		 * @return The list of controls with matching field group IDs
		 */
		 byFieldGroupId(vFieldGroupIds?:string|string[]): sap.ui.core.Control[];
		/**
		 * Returns the registered element for the given id, if any.
		 * @param sId 
		 * @return the element for the given id
		 */
		 byId(sId:string): sap.ui.core.Element;
		/**
		 * Creates a component with the provided id and settings.
		 * 
		 * When the optional parameter <code>sUrl</code> is given, then all request for resources of the
		 * library will be redirected to the given Url. This is convenience for a call to
		 * <pre>
		 *   jQuery.sap.registerModulePath(sName, sUrl);
		 * </pre>
		 * @param vComponent name of the component to import or object containing all needed parameters
		 * @param sUrl the URL to load the component from
		 * @param sId the ID for the component instance
		 * @param mSettings the settings object for the component
		 */
		 createComponent(vComponent:string|any, sUrl?:string, sId?:string, mSettings?:any);
		/**
		 * Returns a new instance of the RenderManager interface.
		 * @return the new instance of the RenderManager interface.
		 */
		 createRenderManager(): sap.ui.core.RenderManager;
		/**
		 * Creates a new sap.ui.core.UIArea.
		 * @param oDomRef a DOM Element or ID string of the UIArea
		 * @deprecated Use <code>setRoot()</code> instead!
		 * @return a new UIArea
		 */
		 createUIArea(oDomRef:string|any): sap.ui.core.UIArea;
		/**
		 * Unregisters a listener for control events.
		 * 
		 * A listener will only be unregistered if the same function/context combination
		 * is given as in the attachControlEvent call.
		 * @param fnFunction function to unregister
		 * @param oListener context object given during registration
		 */
		 detachControlEvent(fnFunction:any, oListener?:any);
		/**
		 * Detach event-handler <code>fnFunction</code> from the 'formatError' event of <code>sap.ui.core.Core</code>.<br/>
		 * 
		 * The passed function and listener object must match the ones previously used for event registration.
		 * @param fnFunction The callback function to unregister
		 * @param oListener Object on which the given function had to be called.
		 * @return <code>this</code> to allow method chaining
		 */
		 detachFormatError(fnFunction:any, oListener:any): sap.ui.core.Core;
		/**
		 * Unregister a listener from the <code>localizationChanged</code> event.
		 * 
		 * The listener will only be unregistered if the same function/context combination
		 * is given as in the call to <code>attachLocalizationListener</code>.
		 * @param fnFunction callback to be deregistered
		 * @param oListener context object given in a previous call to attachLocalizationChanged.
		 */
		 detachLocalizationChanged(fnFunction:any, oListener:any);
		/**
		 * Detach event-handler <code>fnFunction</code> from the 'parseError' event of <code>sap.ui.core.Core</code>.<br/>
		 * 
		 * The passed function and listener object must match the ones previously used for event registration.
		 * @param fnFunction The callback function to unregister.
		 * @param oListener Object on which the given function had to be called.
		 * @return <code>this</code> to allow method chaining
		 */
		 detachParseError(fnFunction:any, oListener:any): sap.ui.core.Core;
		/**
		 * Detach event-handler <code>fnFunction</code> from the 'validationError' event of <code>sap.ui.core.Core</code>.<br/>
		 * 
		 * The passed function and listener object must match the ones previously used for event registration.
		 * @param fnFunction The callback function to unregister
		 * @param oListener Object on which the given function had to be called.
		 * @return <code>this</code> to allow method chaining
		 */
		 detachValidationError(fnFunction:any, oListener:any): sap.ui.core.Core;
		/**
		 * Detach event-handler <code>fnFunction</code> from the 'validationSuccess' event of <code>sap.ui.core.Core</code>.<br/>
		 * 
		 * The passed function and listener object must match the ones previously used for event registration.
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener Object on which the given function had to be called.
		 * @return <code>this</code> to allow method chaining
		 */
		 detachValidationSuccess(fnFunction:any, oListener:any): sap.ui.core.Core;
		/**
		 * Creates a new subclass of class sap.ui.core.Core with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Fire event formatError to attached listeners.
		 * 
		 * Expects following event parameters:
		 * <ul>
		 * <li>'element' of type <code>sap.ui.core.Element</code> </li>
		 * <li>'property' of type <code>string</code> </li>
		 * <li>'type' of type <code>string</code> </li>
		 * <li>'newValue' of type <code>object</code> </li>
		 * <li>'oldValue' of type <code>object</code> </li>
		 * <li>'exception' of type <code>object</code> </li>
		 * </ul>
		 * @param mArguments the arguments to pass along with the event.
		 * @return <code>this</code> to allow method chaining
		 */
		protected fireFormatError(mArguments?:any): sap.ui.core.Core;
		/**
		 * Fire event parseError to attached listeners.
		 * 
		 * Expects following event parameters:
		 * <ul>
		 * <li>'element' of type <code>sap.ui.core.Element</code> </li>
		 * <li>'property' of type <code>string</code> </li>
		 * <li>'type' of type <code>string</code> </li>
		 * <li>'newValue' of type <code>object</code> </li>
		 * <li>'oldValue' of type <code>object</code> </li>
		 * <li>'exception' of type <code>object</code> </li>
		 * </ul>
		 * @param mArguments the arguments to pass along with the event.
		 * @return <code>this</code> to allow method chaining
		 */
		protected fireParseError(mArguments?:any): sap.ui.core.Core;
		/**
		 * Fire event validationError to attached listeners.
		 * 
		 * Expects following event parameters:
		 * <ul>
		 * <li>'element' of type <code>sap.ui.core.Element</code> </li>
		 * <li>'property' of type <code>string</code> </li>
		 * <li>'type' of type <code>string</code> </li>
		 * <li>'newValue' of type <code>object</code> </li>
		 * <li>'oldValue' of type <code>object</code> </li>
		 * <li>'exception' of type <code>object</code> </li>
		 * </ul>
		 * @param mArguments the arguments to pass along with the event.
		 * @return <code>this</code> to allow method chaining
		 */
		protected fireValidationError(mArguments?:any): sap.ui.core.Core;
		/**
		 * Fire event validationSuccess to attached listeners.
		 * 
		 * Expects following event parameters:
		 * <ul>
		 * <li>'element' of type <code>sap.ui.core.Element</code> </li>
		 * <li>'property' of type <code>string</code> </li>
		 * <li>'type' of type <code>string</code> </li>
		 * <li>'newValue' of type <code>object</code> </li>
		 * <li>'oldValue' of type <code>object</code> </li>
		 * </ul>
		 * @param mArguments the arguments to pass along with the event.
		 * @return <code>this</code> to allow method chaining
		 */
		protected fireValidationSuccess(mArguments?:any): sap.ui.core.Core;
		/**
		 * Returns the registered component for the given id, if any.
		 * @param sId 
		 * @return the component for the given id
		 */
		 getComponent(sId:string): sap.ui.core.Component;
		/**
		 * Returns the Configuration of the Core.
		 * @return the Configuration of the current Core.
		 */
		 getConfiguration(): sap.ui.core.Configuration;
		/**
		 * Returns the registered element for the given ID, if any.
		 * @param sId 
		 * @deprecated use <code>sap.ui.core.Core.byId</code> instead!
		 * @return the element for the given id
		 */
		 getControl(sId:string): sap.ui.core.Element;
		/**
		 * Returns the Id of the control/element currently in focus.
		 * @return the Id of the control/element currently in focus.
		 */
		 getCurrentFocusedControlId(): string;
		/**
		 * Returns the registered element for the given ID, if any.
		 * @param sId 
		 * @deprecated use <code>sap.ui.core.Core.byId</code> instead!
		 * @return the element for the given id
		 */
		 getElementById(sId:string): sap.ui.core.Element;
		/**
		 * Retrieves a resource bundle for the given library and locale.
		 * 
		 * If only one argument is given, it is assumed to be the libraryName. The locale
		 * then falls back to the current {@link sap.ui.core.Configuration.prototype.getLanguage session locale}.
		 * If no argument is given, the library also falls back to a default: "sap.ui.core".
		 * @param sLibraryName name of the library to retrieve the bundle for
		 * @param sLocale locale to retrieve the resource bundle for
		 * @return the best matching resource bundle for the given parameters or undefined
		 */
		 getLibraryResourceBundle(sLibraryName?:string, sLocale?:string): jQuery.sap.util.ResourceBundle;
		/**
		 * Returns a map of library info objects for all currently loaded libraries,
		 * keyed by their names.
		 * 
		 * The structure of the library info objects matches the structure of the info object
		 * that the {@link #initLibrary} method expects. Only property names documented with
		 * <code>initLibrary</code> should be accessed, any additional properties might change or
		 * disappear in future. When a property does not exists, its default value (as documented
		 * with <code>initLibrary</code>) should be assumed.
		 * 
		 * <b>Note:</b> The returned info objects must not be modified. They might be a living
		 * copy of the internal data (for efficiency reasons) and the framework is not prepared
		 * to handle modifications to these objects.
		 * @return Map of library info objects keyed by the library names.
		 */
		 getLoadedLibraries(): any;
		/**
		 * Returns a metadata object for class sap.ui.core.Core.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Get the model with the given model name.
		 * 
		 * The name can be omitted to reference the default model or it must be a non-empty string.
		 * 
		 * Note: to be compatible with future versions of this API, applications must not use the value <code>null</code>,
		 * the empty string <code>""</code> or the string literals <code>"null"</code> or <code>"undefined"</code> as model name.
		 * @param sName name of the model to be retrieved
		 * @return oModel
		 */
		 getModel(sName?:string|any): sap.ui.model.Model;
		/**
		 * Returns the instance of the root component (if exists).
		 * @return instance of the current root component
		 */
		 getRootComponent(): sap.ui.core.Component;
		/**
		 * Returns the static, hidden area DOM element belonging to this core instance.
		 * 
		 * It can be used e.g. for hiding elements like Popups, Shadow, Blocklayer etc.
		 * 
		 * If it is not yet available, a DIV is created and appended to the body.
		 * @return the static, hidden area DOM element belonging to this core instance.
		 */
		 getStaticAreaRef(): any;
		/**
		 * Returns a UIArea if the given ID/Element belongs to one.
		 * @param o a DOM Element or ID string of the UIArea
		 * @return a UIArea with a given id or dom ref.
		 */
		 getUIArea(o:string|any): sap.ui.core.UIArea;
		/**
		 * Returns <code>true</code> if there are any pending rendering tasks or when
		 * such rendering tasks are currently being executed.
		 * @return true if there are pending (or executing) rendering tasks.
		 */
		 getUIDirty(): boolean;
		/**
		 * Check if a Model is set to the core
		 * @return true or false
		 */
		 hasModel(): boolean;
		/**
		 * Includes a library theme into the current page (if a variant is specified it
		 * will include the variant library theme)
		 * @param sLibName the name of the UI library
		 * @param sVariant the variant to include (optional)
		 * @param sQuery to be used only by the Core
		 */
		 includeLibraryTheme(sLibName:string, sVariant?:string, sQuery?:string);
		/**
		 * Provides the framework with information about a library.
		 * 
		 * This method is intended to be called exactly once while the main module of a library
		 * (its <code>library.js</code> module) is executing, typically at its begin. The single
		 * parameter <code>oLibInfo</code> is an info object that describes the content of the library.
		 * 
		 * When the <code>oLibInfo</code> has been processed, a normalized version of it will be kept
		 * and will be returned as library information in later calls to {@link #getLoadedLibraries}.
		 * Finally, <code>initLibrary</code> fires (the currently private) {@link #event:LibraryChanged}
		 * event with operation 'add' for the newly loaded library.
		 * 
		 * 
		 * <h3>Side Effects</h3>
		 * 
		 * While analyzing the <code>oLibInfo</code>, the framework takes some additional actions:
		 * 
		 * <ul>
		 * <li>If the info object contains a list of <code>interfaces</code>, they will be registered
		 * with the {@link sap.ui.base.DataType} class to make them available as aggregation types
		 * in managed objects.</li>
		 * 
		 * <li>If the object contains a list of <code>controls</code> or <code>elements</code>,
		 * {@link sap.ui.lazyRequire lazy stubs} will be created for their constructor as well as for
		 * their static <code>extend</code> and <code>getMetadata</code> methods.<br>
		 * <b>Note:</b> Future versions might abandon the concept of lazy stubs as it requires synchronous
		 * XMLHttpRequests which have been deprecated (see {@link http://xhr.spec.whatwg.org}). To be on the
		 * safe side, productive applications should always require any modules that they directly depend on.</li>
		 * 
		 * <li>With the <code>noLibraryCSS</code> property, the library can be marked as 'theming-free'.
		 * Otherwise, the framework will add a &lt;link&gt; tag to the page's head, pointing to the library's
		 * theme-specific stylesheet. The creation of such a &lt;link&gt; tag can be suppressed with the
		 * {@link sap.ui.core.Configuration global configuration option} <code>preloadLibCss</code>.
		 * It can contain a list of library names for which no stylesheet should be included.
		 * This is e.g. useful when an application merges the CSS for multiple libraries and already
		 * loaded the resulting stylesheet.</li>
		 * 
		 * <li>If a list of library <code>dependencies</code> is specified in the info object, those
		 * libraries will be loaded synchronously by <code>initLibrary</code>.<br>
		 * <b>Note:</b> Dependencies between libraries don't have to be modeled as AMD dependencies.
		 * Only when enums or types from an additional library are used in the coding of the
		 * <code>library.js</code> module, the library should be additionally listed in the AMD dependencies.</li>
		 * </ul>
		 * 
		 * Last but not least, higher layer frameworks might want to include their own metadata for libraries.
		 * The property <code>extensions</code> might contain such additional metadata. Its structure is not defined
		 * by the framework, but it is strongly suggested that each extension only occupies a single property
		 * in the <code>extensions</code> object and that the name of that property contains some namespace
		 * information (e.g. library name that introduces the feature) to avoid conflicts with other extensions.
		 * The framework won't touch the content of <code>extensions</code> but will make it available
		 * in the library info objects returned by {@link #getLoadedLibraries}.
		 * 
		 * 
		 * <h3>Relationship to Descriptor for Libraries (manifest.json)</h3>
		 * 
		 * The information contained in <code>oLibInfo</code> is partially redundant to the content of the descriptor
		 * for the same library (its <code>manifest.json</code> file). Future versions of UI5 might ignore the information
		 * provided in <code>oLibInfo</code> and might evaluate the descriptor file instead. Library developers therefore
		 * should keep the information in both files in sync.
		 * 
		 * When the <code>manifest.json</code> is generated from the <code>.library</code> file (which is the default
		 * for UI5 libraries built with Maven), then the content of the <code>.library</code> and <code>library.js</code>
		 * files must be kept in sync.
		 * @param oLibInfo Info object for the library
		 */
		 initLibrary(oLibInfo:any);
		/**
		 * Returns true if the Core has already been initialized. This means that instances
		 * of RenderManager etc. do already exist and the init event has already been fired
		 * (and will not be fired again).
		 * @return whether the Core has already been initialized
		 */
		 isInitialized(): boolean;
		/**
		 * Returns the locked state of the <code>sap.ui.core.Core</code>
		 * @return locked state
		 */
		 isLocked(): boolean;
		/**
		 * Check if the script is running on mobile
		 * @return true or false
		 */
		 isMobile(): boolean;
		/**
		 * Used to find out whether a certain DOM element is the static area
		 * @param oDomRef 
		 * @return whether the given DomRef is the StaticAreaRef
		 */
		protected isStaticAreaRef(oDomRef:any): boolean;
		/**
		 * Returns true, if the styles of the current theme are already applied, false otherwise.
		 * 
		 * This function must not be used before the init event of the Core.
		 * If the styles are not yet applied an theme changed event will follow when the styles will be applied.
		 * @return whether the styles of the current theme are already applied
		 */
		 isThemeApplied(): boolean;
		/**
		 * Loads a set of libraries, preferably asynchronously.
		 * 
		 * The module loading is still synchronous, so if a library loads additional modules besides
		 * its library.js file, those modules might be loaded synchronously by the library.js
		 * The async loading is only supported by the means of the library-preload.json files, so if a
		 * library doesn't provide a preload or when the preload is deactivated (configuration, debug mode)
		 * then this API falls back to synchronous loading. However, the contract (Promise) remains valid
		 * and a Promise will be returned if async is specified - even when the real loading
		 * is done synchronously.
		 * @param aLibraries set of libraries that should be loaded
		 * @param mOptions configuration options
		 * @return returns a Promise in async mode, otherwise <code>undefined</code>
		 */
		private loadLibraries(aLibraries:string[], mOptions?:any): any|any;
		/**
		 * Synchronously loads the given library and makes it available to the application.
		 * 
		 * Loads the *.library module, which contains all preload modules (enums, types, content of a shared.js
		 * if it exists). The library module will call initLibrary with additional metadata for the library.
		 * 
		 * As a result, consuming applications can instantiate any control or element from that library
		 * without having to write import statements for the controls or for the enums.
		 * 
		 * When the optional parameter <code>sUrl</code> is given, then all request for resources of the
		 * library will be redirected to the given Url. This is convenience for a call to
		 * <pre>
		 *   jQuery.sap.registerModulePath(sLibrary, sUrl);
		 * </pre>
		 * 
		 * When the given library has been loaded already, no further action will be taken.
		 * Especially, a given Url will not be honored!
		 * 
		 * Note: this method does not participate in the supported preload of libraries.
		 * @param sLibrary name of the library to import
		 * @param sUrl URL to load the library from
		 */
		 loadLibrary(sLibrary:string, sUrl?:string);
		/**
		 * Locks the Core. No browser events are dispatched to the controls.
		 * 
		 * Lock should be called before and after the dom is modified for rendering, roundtrips...
		 * Exceptions might be the case for asynchronous UI behavior
		 */
		 lock();
		/**
		 * Registers a Plugin to the <code>sap.ui.core.Core</code>, which lifecycle
		 * will be managed (start and stop).
		 * <br/>
		 * Plugin object need to implement two methods:
		 * <ul>
		 *   <li><code>startPlugin(oCore)</code>: will be invoked, when the Plugin
		 *       should start (as parameter the reference to the Core will be provided</li>
		 *   <li><code>stopPlugin()</code>: will be invoked, when the Plugin should stop</li>
		 * </ul>
		 * @param oPlugin reference to a Plugin object
		 */
		 registerPlugin(oPlugin:any);
		/**
		 * Sets or unsets a model for the given model name.
		 * 
		 * The <code>sName</code> must either be <code>undefined</code> (or omitted) or a non-empty string.
		 * When the name is omitted, the default model is set/unset.
		 * 
		 * When <code>oModel</code> is <code>null</code> or <code>undefined</code>, a previously set model
		 * with that name is removed from the Core.
		 * 
		 * Any change (new model, removed model) is propagated to all existing UIAreas and their descendants
		 * as long as a descendant doesn't have its own model set for the given name.
		 * 
		 * Note: to be compatible with future versions of this API, applications must not use the value <code>null</code>,
		 * the empty string <code>""</code> or the string literals <code>"null"</code> or <code>"undefined"</code> as model name.
		 * @param oModel the model to be set or <code>null</code> or <code>undefined</code>
		 * @param sName the name of the model or <code>undefined</code>
		 * @return <code>this</code> to allow method chaining
		 */
		 setModel(oModel:sap.ui.model.Model, sName?:string): sap.ui.core.Core;
		/**
		 * Implicitly creates a new <code>UIArea</code> (or reuses an exiting one) for the given DOM reference and
		 * adds the given control reference to the UIAreas content (existing content will be removed).
		 * @param oDomRef a DOM Element or Id (string) of the UIArea
		 * @param oControl the Control that should be the added to the <code>UIArea</code>.
		 * @deprecated Use function <code>oControl.placeAt(oDomRef, "only")</code> of <code>sap.ui.core.Control</code> instead.
		 */
		 setRoot(oDomRef:string|any, oControl:sap.ui.base.Interface|sap.ui.core.Control);
		/**
		 * Unlocks the Core.
		 * 
		 * Browser events are dispatched to the controls again after this method is called.
		 */
		 unlock();
		/**
		 * Unregisters a Plugin out of the <code>sap.ui.core.Core</code>
		 * @param oPlugin reference to a Plugin object
		 */
		 unregisterPlugin(oPlugin:any);
	}
	/**
	 * A string type that represents CSS color values.
	 * 
	 * Allowed values are CSS hex colors like "#666666" or "#fff", RGB/HSL values like "rgb(0,0,0)"
	 * or "hsla(50%,10%,30%,0.5)" as well as CSS color names like "green" and "darkblue" and special
	 * values like "inherit" and "transparent".
	 * 
	 * The empty string is also allowed and has the same effect as setting no color.
	 */
	type CSSColor = any
	/**
	 * A string type that represents CSS size values.
	 * 
	 * The CSS specifications calls this the <code>'&lt;length&gt; type'</code>.
	 * Allowed values are CSS sizes like "1px" or "2em" or "50%". The special values <code>auto</code>
	 * and <code>inherit</code> are also accepted as well as mathematical expressions using the CSS3
	 * <code>calc(<i>expression</i>)</code> operator.
	 * 
	 * Note that CSS does not allow all these values for every CSS property representing a size.
	 * E.g. <code>padding-left</code> doesn't allow the value <code>auto</code>. So even if a value is
	 * accepted by <code>sap.ui.core.CSSSize</code>, it still might have no effect in a specific context.
	 * In other words: UI5 controls usually don't extend the range of allowed values in CSS.
	 * 
	 * 
	 * <b>Units</b>
	 * 
	 * Valid font-relative units are <code>em, ex</code> and <code>rem</code>. Supported absolute units
	 * are <code>cm, mm, in, pc, pt</code> and <code>px</code>. Other units are not supported yet.
	 * 
	 * 
	 * <b>Mathematical Expressions</b>
	 * 
	 * Expressions inside the <code>calc()</code> operator are only roughly checked for validity.
	 * Not every value that this type accepts might be a valid expression in the sense of the CSS spec.
	 * But vice versa, any expression that is valid according to the spec should be accepted by this type.
	 * The current implementation is based on the
	 * {@link http://dev.w3.org/csswg/css-values-3/#calc-syntax CSS3 Draft specification from 22 April 2015}.
	 * 
	 * Noteworthy details:
	 * <ul>
	 * <li>whitespace is mandatory around a '-' or '+' operator and optional otherwise</li>
	 * <li>parentheses are accepted but not checked for being balanced (a limitation of regexp based checks)</li>
	 * <li>semantic constraints like type restrictions are not checked</li>
	 * </ul>
	 * 
	 * Future versions of UI5 might check <code>calc()</code> expressions in more detail, so applications should
	 * not assume that a value, that is invalid according to the CSS spec but currently accepted by this type
	 * still will be accepted by future versions of this type.
	 */
	type CSSSize = any
	class CustomData extends sap.ui.core.Element{
		/**
		 * Constructor for a new CustomData.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given
		 * @param mSettings initial settings for the new control
		 */
		 constructor(sId?:string, mSettings?:any);
		/**
		 * Creates a new subclass of class sap.ui.core.CustomData with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Gets current value of property <code>key</code>.
		 * 
		 * The key of the data in this CustomData object.
		 * When the data is just stored, it can be any string, but when it is to be written to HTML (writeToDom == true) then it must also be a valid HTML attribute name (it must conform to the sap.ui.core.ID type and may contain no colon) to avoid collisions, it also may not start with "sap-ui". When written to HTML, the key is prefixed with "data-".
		 * If any restriction is violated, a warning will be logged and nothing will be written to the DOM.
		 * @return Value of property <code>key</code>
		 */
		 getKey(): string;
		/**
		 * Returns a metadata object for class sap.ui.core.CustomData.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Gets current value of property <code>value</code>.
		 * 
		 * The data stored in this CustomData object.
		 * When the data is just stored, it can be any JS type, but when it is to be written to HTML (writeToDom == true) then it must be a string.
		 * If this restriction is violated, a warning will be logged and nothing will be written to the DOM.
		 * @return Value of property <code>value</code>
		 */
		 getValue(): any;
		/**
		 * Sets a new value for property <code>key</code>.
		 * 
		 * The key of the data in this CustomData object.
		 * When the data is just stored, it can be any string, but when it is to be written to HTML (writeToDom == true) then it must also be a valid HTML attribute name (it must conform to the sap.ui.core.ID type and may contain no colon) to avoid collisions, it also may not start with "sap-ui". When written to HTML, the key is prefixed with "data-".
		 * If any restriction is violated, a warning will be logged and nothing will be written to the DOM.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sKey New value for property <code>key</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setKey(sKey:string): sap.ui.core.CustomData;
		/**
		 * Sets a new value for property <code>value</code>.
		 * 
		 * The data stored in this CustomData object.
		 * When the data is just stored, it can be any JS type, but when it is to be written to HTML (writeToDom == true) then it must be a string.
		 * If this restriction is violated, a warning will be logged and nothing will be written to the DOM.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param oValue New value for property <code>value</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setValue(oValue:any): sap.ui.core.CustomData;
	}
	type delegate = any
	/**
	 * Font design for texts
	 */
	type Design = 
	/**
	 * Font design for texts
	 */
	"Monospace" |
	/**
	 * Font design for texts
	 */
	"Standard";
	/**
	 * Docking position: horizontal/vertical.
	 * 
	 * Defines a position on the element which is used for aligned positioning of another element (e.g. the left top
	 * corner of a popup is positioned at the left bottom corner of the input field). For the horizontal position possible values
	 * are "begin", "left", "center", "right" and "end", where left/right always are left and right, or begin/end which are
	 * dependent on the text direction. For the vertical position possible values are "top", "center" and "bottom".
	 * Examples: "left top", "end bottom", "center center".
	 */
	type Dock = any
	class Element extends sap.ui.base.ManagedObject{
		/**
		 * Constructs and initializes an UI Element with the given <code>sId</code> and settings.
		 * 
		 * If the optional <code>mSettings</code> are given, they must be a JSON-like object (object literal)
		 * that defines values for properties, aggregations, associations or events keyed by their name.
		 * 
		 * <b>Valid Names:</b>
		 * 
		 * The property (key) names supported in the object literal are exactly the (case sensitive)
		 * names documented in the JSDoc for the properties, aggregations, associations and events
		 * of the control and its base classes. Note that for  0..n aggregations and associations this
		 * usually is the plural name, whereas it is the singular name in case of 0..1 relations.
		 * 
		 * If a key name is ambiguous for a specific control class (e.g. a property has the same
		 * name as an event), then this method prefers property, aggregation, association and
		 * event in that order. To resolve such ambiguities, the keys can be prefixed with
		 * <code>aggregation:</code>, <code>association:</code> or <code>event:</code>.
		 * In that case the keys must be quoted due to the ':'.
		 * 
		 * Each subclass should document the set of supported names in its constructor documentation.
		 * 
		 * <b>Valid Values:</b>
		 * 
		 * <ul>
		 * <li>for normal properties, the value has to be of the correct simple type (no type conversion occurs)
		 * <li>for 0..1 aggregations, the value has to be an instance of the aggregated control or element type
		 * <li>for 0..n aggregations, the value has to be an array of instances of the aggregated type
		 * <li>for 0..1 associations, an instance of the associated type or an id (string) is accepted
		 * <li>0..n associations are not supported yet
		 * <li>for events either a function (event handler) is accepted or an array of length 2
		 *     where the first element is a function and the 2nd element is an object to invoke the method on.
		 * </ul>
		 * 
		 * Special aggregation "dependents" is connected to the lifecycle management and databinding,
		 * but not rendered automatically and can be used for popups or other dependent controls. This allows
		 * definition of popup controls in declarative views and enables propagation of model and context
		 * information to them.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control; generated automatically if no non-empty id is given
		 *      Note: this can be omitted, no matter whether <code>mSettings</code> will be given or not!
		 * @param mSettings optional map/JSON-object with initial property values, aggregated objects etc. for the new element
		 */
		 constructor(sId?:string, mSettings?:any);
		/**
		 * Returns the best suitable DOM node that represents this Element wrapped as jQuery object.
		 * I.e. the element returned by {@link sap.ui.core.Element#getDomRef} is wrapped and returned.
		 * 
		 * If an ID suffix is given, the ID of this Element is concatenated with the suffix
		 * (separated by a single dash) and the DOM node with that compound ID will be wrapped by jQuery.
		 * This matches the UI5 naming convention for named inner DOM nodes of a control.
		 * @param sSuffix ID suffix to get a jQuery object for
		 * @return The jQuery wrapped element's DOM reference
		 */
		protected (sSuffix?:string): any;
		/**
		 * Adds some customData to the aggregation <code>customData</code>.
		 * @param oCustomData the customData to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 addCustomData(oCustomData:sap.ui.core.CustomData): sap.ui.core.Element;
		/**
		 * Applies the focus info.
		 * 
		 * To be overwritten by the specific control method.
		 * @param oFocusInfo 
		 */
		protected applyFocusInfo(oFocusInfo:any);
		/**
		 * Bind the object to the referenced entity in the model, which is used as the binding context
		 * to resolve bound properties or aggregations of the object itself and all of its children
		 * relatively to the given path.
		 * If a relative binding path is used, this will be applied whenever the parent context changes.
		 * @param vPath the binding path or an object with more detailed binding options
		 * @param mParameters map of additional parameters for this binding (only taken into account when vPath is a string in that case the properties described for vPath above are valid here).
		 * @return reference to the instance itself
		 */
		 bindElement(vPath:string|any, mParameters?:any): sap.ui.base.ManagedObject;
		/**
		 * Clone delegates
		 * @param sIdSuffix a suffix to be appended to the cloned element id
		 * @param aLocalIds an array of local IDs within the cloned hierarchy (internally used)
		 * @return reference to the newly created clone
		 */
		protected clone(sIdSuffix?:string, aLocalIds?:string[]): sap.ui.base.ManagedObject;
		/**
		 * Creates a new Element from the given data.
		 * 
		 * If vData is an Element already, that element is returned.
		 * If vData is an object (literal), then a new element is created with vData as settings.
		 * The type of the element is either determined by a "Type" entry in the vData or
		 * by a type information in the oKeyInfo object
		 * @param vData the data to create the element from
		 * @param oKeyInfo an entity information (e.g. aggregation info)
		 */
		 create(vData:sap.ui.core.Element|any, oKeyInfo?:any);
		/**
		 * Attaches custom data to an Element or retrieves attached data.
		 * 
		 * Usage:
		 *    data("myKey", myData)
		 * attaches myData (which can be any JS data type, e.g. a number, a string, an object, or a function) to this element, under the given key "myKey". If the key already exists,the value will be updated.
		 * 
		 *    data("myKey", myData, writeToDom)
		 * attaches myData to this element, under the given key "myKey" and (if writeToDom is true) writes key and value to the HTML. If the key already exists,the value will be updated. While oValue can be any JS data type to be attached, it must be a string to be also written to DOM. The key must also be a valid HTML attribute name (it must conform to sap.ui.core.ID and may contain no colon) and may not start with "sap-ui". When written to HTML, the key is prefixed with "data-".
		 * 
		 *    data("myKey")
		 * retrieves whatever data has been attached to this Element (using the key "myKey") before
		 * 
		 *    data("myKey", null)
		 * removes whatever data has been attached to this Element (using the key "myKey") before
		 * 
		 *    data(null)
		 * removes all data
		 * 
		 *    data()
		 * returns all data, as a map
		 */
		 data();
		/**
		 * Cleans up the resources associated with this element and all its children.
		 * 
		 * After an element has been destroyed, it can no longer be used in the UI!
		 * 
		 * Applications should call this method if they don't need the element any longer.
		 * @param bSuppressInvalidate if true, the UI element is not marked for redraw
		 */
		 destroy(bSuppressInvalidate?:boolean);
		/**
		 * Destroys all the customData in the aggregation <code>customData</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 destroyCustomData(): sap.ui.core.Element;
		/**
		 * Destroys the layoutData in the aggregation <code>layoutData</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 destroyLayoutData(): sap.ui.core.Element;
		/**
		 * Destroys the tooltip in the aggregation
		 * named <code>tooltip</code>.
		 * @return <code>this</code> to allow method chaining
		 */
		 destroyTooltip(): sap.ui.core.Element;
		/**
		 * Allows the parent of a control to enhance the aria information during rendering.
		 * 
		 * This function is called by the RenderManager's writeAccessibilityState method
		 * for the parent of the currently rendered control - if the parent implements it.
		 * @param oElement the Control/Element for which aria properties are rendered
		 * @param mAriaProps map of aria properties keyed by there name (withour prefix "aria-")
		 * @return map of enhanced aria properties
		 */
		protected enhanceAccessibilityState(oElement:sap.ui.core.Element, mAriaProps:any): any;
		/**
		 * Cleans up the element instance before destruction.
		 * 
		 * Applications must not call this hook method directly, it is called by the framework
		 * when the element is {@link #destroy destroyed}.
		 * 
		 * Subclasses of Element should override this hook to implement any necessary cleanup.
		 */
		protected exit();
		/**
		 * Searches and returns an array of child elements and controls which are
		 * referenced within an aggregation or aggregations of child elements/controls.
		 * This can be either done recursive or not.
		 * <br>
		 * <b>Take care: this operation might be expensive.</b>
		 * @param bRecursive true, if all nested children should be returned.
		 * @return array of child elements and controls
		 */
		 findElements(bRecursive:boolean): sap.ui.core.Element[];
		/**
		 * Fires the given event and notifies all listeners. Listeners must not change
		 * the content of the event.
		 * @param sEventId the event id
		 * @param mParameters the parameter map
		 * @return Returns <code>this</code> to allow method chaining
		 */
		protected fireEvent(sEventId:string, mParameters:any): sap.ui.core.Element;
		/**
		 * Sets the focus to the stored focus DOM reference
		 */
		 focus();
		/**
		 * Gets content of aggregation <code>customData</code>.
		 * 
		 * Custom Data, a data structure like a map containing arbitrary key value pairs.
		 * @return 
		 */
		 getCustomData(): sap.ui.core.CustomData[];
		/**
		 * Returns the best suitable DOM Element that represents this UI5 Element.
		 * By default the DOM Element with the same ID as this Element is returned.
		 * Subclasses should override this method if the lookup via id is not sufficient.
		 * 
		 * Note that such a DOM Element does not necessarily exist in all cases.
		 * Some elements or controls might not have a DOM representation at all (e.g.
		 * a naive FlowLayout) while others might not have one due to their current
		 * state (e.g. an initial, not yet rendered control).
		 * 
		 * If an ID suffix is given, the ID of this Element is concatenated with the suffix
		 * (separated by a single dash) and the DOM node with that compound ID will be returned.
		 * This matches the UI5 naming convention for named inner DOM nodes of a control.
		 * @param sSuffix ID suffix to get the DOMRef for
		 * @return The Element's DOM Element sub DOM Element or null
		 */
		protected getDomRef(sSuffix?:string): any;
		/**
		 * Get the element binding object for a specific model
		 * @param sModelName the name of the model
		 * @return the element binding for the given model name
		 */
		 getElementBinding(sModelName:string): sap.ui.model.Binding;
		/**
		 * Returns the DOM Element that should get the focus.
		 * 
		 * To be overwritten by the specific control method.
		 * @return Returns the DOM Element that should get the focus
		 */
		protected getFocusDomRef(): any;
		/**
		 * Returns an object representing the serialized focus information
		 * To be overwritten by the specific control method
		 * @return an object representing the serialized focus information
		 */
		protected getFocusInfo(): any;
		/**
		 * 
		 */
		 getInterface();
		/**
		 * Gets content of aggregation <code>layoutData</code>.
		 * 
		 * Defines the layout constraints for this control when it is used inside a Layout.
		 * LayoutData classes are typed classes and must match the embedding Layout.
		 * See VariantLayoutData for aggregating multiple alternative LayoutData instances to a single Element.
		 * @return 
		 */
		 getLayoutData(): sap.ui.core.LayoutData;
		/**
		 * Returns the runtime metadata for this UI element.
		 * 
		 * When using the defineClass method, this function is automatically created and returns
		 * a runtime representation of the design time metadata.
		 * @return runtime metadata
		 */
		 getMetadata(): any;
		/**
		 * Returns a metadata object for class sap.ui.core.Element.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Returns the tooltip for this element if any or an undefined value.
		 * The tooltip can either be a simple string or a subclass of
		 * {@link sap.ui.core.TooltipBase}.
		 * 
		 * Callers that are only interested in tooltips of type string (e.g. to render
		 * them as a <code>title</code> attribute), should call the convenience method
		 * {@link #getTooltip_AsString} instead. If they want to get a tooltip text no
		 * matter where it comes from (be it a string tooltip or the text from a TooltipBase
		 * instance) then they could call {@link #getTooltip_Text} instead.
		 * @return The tooltip for this Element.
		 */
		 getTooltip(): string|sap.ui.core.TooltipBase;
		/**
		 * Returns the tooltip for this element but only if it is a simple string.
		 * Otherwise an undefined value is returned.
		 * @return string tooltip or undefined
		 */
		 getTooltip_AsString(): string;
		/**
		 * Returns the main text for the current tooltip or undefined if there is no such text.
		 * If the tooltip is an object derived from sap.ui.core.Tooltip, then the text property
		 * of that object is returned. Otherwise the object itself is returned (either a string
		 * or undefined or null).
		 * @return text of the current tooltip or undefined
		 */
		 getTooltip_Text(): string;
		/**
		 * Checks for the provided <code>sap.ui.core.CustomData</code> in the aggregation <code>customData</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oCustomData The customData whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		 indexOfCustomData(oCustomData:sap.ui.core.CustomData): number;
		/**
		 * Initializes the element instance after creation.
		 * 
		 * Applications must not call this hook method directly, it is called by the framework
		 * while the constructor of an element is executed.
		 * 
		 * Subclasses of Element should override this hook to implement any necessary initialization.
		 */
		protected init();
		/**
		 * Inserts a customData into the aggregation <code>customData</code>.
		 * @param oCustomData the customData to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the customData should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the customData is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the customData is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 insertCustomData(oCustomData:sap.ui.core.CustomData, iIndex:number): sap.ui.core.Element;
		/**
		 * Removes all the controls from the aggregation <code>customData</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		 removeAllCustomData(): sap.ui.core.CustomData[];
		/**
		 * Removes a customData from the aggregation <code>customData</code>.
		 * @param vCustomData The customData to remove or its index or id
		 * @return The removed customData or <code>null</code>
		 */
		 removeCustomData(vCustomData:number|string|sap.ui.core.CustomData): sap.ui.core.CustomData;
		/**
		 * This triggers immediate rerendering of its parent and thus of itself and its children.<br/> As <code>sap.ui.core.Element</code> "bubbles up" the
		 * rerender, changes to child-<code>Elements</code> will also result in immediate rerendering of the whole sub tree.
		 */
		protected rerender();
		/**
		 * Sets the {@link sap.ui.core.LayoutData} defining the layout constraints
		 * for this control when it is used inside a layout.
		 * @param oLayoutData 
		 */
		 setLayoutData(oLayoutData:sap.ui.core.LayoutData);
		/**
		 * Sets a new tooltip for this object. The tooltip can either be a simple string
		 * (which in most cases will be rendered as the <code>title</code> attribute of this
		 * Element) or an instance of {@link sap.ui.core.TooltipBase}.
		 * 
		 * If a new tooltip is set, any previously set tooltip is deactivated.
		 * @param vTooltip 
		 */
		 setTooltip(vTooltip:string|sap.ui.core.TooltipBase);
		/**
		 * Returns a simple string representation of this element.
		 * 
		 * Mainly useful for tracing purposes.
		 * @return a string descripition of this element
		 */
		 toString(): string;
		/**
		 * Removes the defined binding context of this object, all bindings will now resolve
		 * relative to the parent context again.
		 * @param sModelName 
		 * @return reference to the instance itself
		 */
		 unbindElement(sModelName:string): sap.ui.base.ManagedObject;
	}
	class EnabledPropagator {
		/**
		 * 
		 * @param bDefault the value that should be used as default value for the enhancement of the control.
		 * @param bLegacy whether the introduced property should use the old name 'Enabled'
		 */
		 constructor(bDefault?:boolean, bLegacy?:boolean);
	}
	/**
	 * Format classes
	 */
	type format = any
	class Fragment extends sap.ui.base.ManagedObject{
		/**
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 */
		 constructor();
		/**
		 * Returns an Element/Control by its ID in the context of the Fragment with the given ID
		 * @param sFragmentId 
		 * @param sId 
		 * @return Element by its ID and Fragment ID
		 */
		 byId(sFragmentId:string, sId:string);
		/**
		 * Returns the ID which a Control with the given ID in the context of the Fragment with the given ID would have
		 * @param sFragmentId 
		 * @param sId 
		 * @return the prefixed ID
		 */
		 createId(sFragmentId:string, sId:string);
		/**
		 * Creates a new subclass of class sap.ui.core.Fragment with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.core.Fragment.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Gets current value of property <code>type</code>.
		 * @return Value of property <code>type</code>
		 */
		 getType(): string;
		/**
		 * Registers a new Fragment type
		 * @param sType the Fragment type. Types "XML", "HTML" and JS" are built-in and always available.
		 * @param oFragmentImpl an object having a property "init" of type "function" which is called on Fragment instantiation with the settings map as argument
		 */
		 registerType(sType:string, oFragmentImpl:any);
		/**
		 * Sets a new value for property <code>type</code>.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sType New value for property <code>type</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setType(sType:string): sap.ui.core.Fragment;
	}
	class History extends sap.ui.base.Object{
		/**
		 * Creates a new subclass of class sap.ui.core.History with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.core.History.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
	}
	/**
	 * Configuration options for horizontal alignments of controls
	 */
	type HorizontalAlign = 
	/**
	 * Configuration options for horizontal alignments of controls
	 */
	"Begin" |
	/**
	 * Configuration options for horizontal alignments of controls
	 */
	"Center" |
	/**
	 * Configuration options for horizontal alignments of controls
	 */
	"End" |
	/**
	 * Configuration options for horizontal alignments of controls
	 */
	"Left" |
	/**
	 * Configuration options for horizontal alignments of controls
	 */
	"Right";
	class HTML extends sap.ui.core.Control{
		/**
		 * Constructor for a new HTML.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given
		 * @param mSettings initial settings for the new control
		 */
		 constructor(sId?:string, mSettings?:any);
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>afterRendering</code> event of this <code>sap.ui.core.HTML</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.ui.core.HTML</code> itself.
		 * 
		 * Fired after the HTML control has been rendered. Allows to manipulate the resulting DOM.
		 * 
		 * When the control doesn't have string content and no preserved DOM existed for this control,
		 * then this event will fire, but there won't be a DOM node for this control.
		 * @param fnFunction The function to be called when the event occurs
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.core.HTML</code> itself
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 attachAfterRendering(fnFunction:any, oData?:any, oListener?:any): sap.ui.core.HTML;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>afterRendering</code> event of this <code>sap.ui.core.HTML</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 detachAfterRendering(fnFunction:any, oListener:any): sap.ui.core.HTML;
		/**
		 * Creates a new subclass of class sap.ui.core.HTML with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Fires event <code>afterRendering</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>isPreservedDOM</code> of type <code>boolean</code>Whether the current DOM of the control has been preserved (true) or not (e.g.
		 * rendered from content property or it is an empty HTML control).</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		protected fireAfterRendering(mArguments?:any): sap.ui.core.HTML;
		/**
		 * Gets current value of property <code>content</code>.
		 * 
		 * HTML content to be displayed, defined as a string.
		 * 
		 * The content is converted to DOM nodes with a call to <code>new jQuery(content)</code>, so any
		 * restrictions for the jQuery constructor apply to the content of the HTML control as well.
		 * 
		 * Some of these restrictions (there might be others!) are:
		 * <ul>
		 * <li>the content must be enclosed in tags, pure text is not supported. </li>
		 * <li>if the content contains script tags, they will be executed but they will not appear in the
		 *     resulting DOM tree. When the contained code tries to find the corresponding script tag,
		 *     it will fail.</li>
		 * </ul>
		 * 
		 * Please consider to consult the jQuery documentation as well.
		 * 
		 * The HTML control currently doesn't prevent the usage of multiple root nodes in its DOM content
		 * (e.g. <code>setContent("&lt;div/>&lt;div/>")</code>), but this is not a guaranteed feature.
		 * The accepted content might be restricted to single root nodes in future versions.
		 * To notify applications about this fact, a warning is written in the log when multiple root nodes are used.
		 * @return Value of property <code>content</code>
		 */
		 getContent(): string;
		/**
		 * 
		 * @param sSuffix Suffix of the Element to be retrieved or empty
		 * @return The element's DOM reference or null
		 */
		 getDomRef(sSuffix?:string): any;
		/**
		 * Returns a metadata object for class sap.ui.core.HTML.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Gets current value of property <code>preferDOM</code>.
		 * 
		 * Whether existing DOM content is preferred over the given content string.
		 * 
		 * There are two scenarios where this flag is relevant (when set to true):
		 * <ul>
		 * <li>for the initial rendering: when an HTML control is added to an UIArea for the first time
		 *     and if the root node of that UIArea contained DOM content with the same id as the HTML
		 *     control, then that content will be used for rendering instead of any specified string
		 *     content</li>
		 * <li>any follow-up rendering: when an HTML control is rendered for the second or any later
		 *     time and the preferDOM flag is set, then the DOM from the first rendering is preserved
		 *     and not replaced by the string content</li>
		 * </ul>
		 * 
		 * As preserving the existing DOM is the most common use case of the HTML control, the default value is true.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>preferDOM</code>
		 */
		 getPreferDOM(): boolean;
		/**
		 * Gets current value of property <code>sanitizeContent</code>.
		 * 
		 * Whether to run the HTML sanitizer once the content (HTML markup) is applied or not.
		 * 
		 * To configure allowed URLs please use the whitelist API via jQuery.sap.addUrlWhitelist.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>sanitizeContent</code>
		 */
		 getSanitizeContent(): boolean;
		/**
		 * Gets current value of property <code>visible</code>.
		 * 
		 * Specifies whether the control is visible. Invisible controls are not rendered.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>visible</code>
		 */
		 getVisible(): boolean;
		/**
		 * Sets a new value for property <code>content</code>.
		 * 
		 * HTML content to be displayed, defined as a string.
		 * 
		 * The content is converted to DOM nodes with a call to <code>new jQuery(content)</code>, so any
		 * restrictions for the jQuery constructor apply to the content of the HTML control as well.
		 * 
		 * Some of these restrictions (there might be others!) are:
		 * <ul>
		 * <li>the content must be enclosed in tags, pure text is not supported. </li>
		 * <li>if the content contains script tags, they will be executed but they will not appear in the
		 *     resulting DOM tree. When the contained code tries to find the corresponding script tag,
		 *     it will fail.</li>
		 * </ul>
		 * 
		 * Please consider to consult the jQuery documentation as well.
		 * 
		 * The HTML control currently doesn't prevent the usage of multiple root nodes in its DOM content
		 * (e.g. <code>setContent("&lt;div/>&lt;div/>")</code>), but this is not a guaranteed feature.
		 * The accepted content might be restricted to single root nodes in future versions.
		 * To notify applications about this fact, a warning is written in the log when multiple root nodes are used.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sContent New value for property <code>content</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setContent(sContent:string): sap.ui.core.HTML;
		/**
		 * Sets some new DOM content for this HTML control. The content will replace the existing content
		 * after the next rendering. Properties are not modified, but preferDOM should be set to true.
		 * @param oDom the new DOM content
		 * @return <code>this</code> to facilitate method chaining
		 */
		 setDOMContent(oDom:any): sap.ui.core.HTML;
		/**
		 * Sets a new value for property <code>preferDOM</code>.
		 * 
		 * Whether existing DOM content is preferred over the given content string.
		 * 
		 * There are two scenarios where this flag is relevant (when set to true):
		 * <ul>
		 * <li>for the initial rendering: when an HTML control is added to an UIArea for the first time
		 *     and if the root node of that UIArea contained DOM content with the same id as the HTML
		 *     control, then that content will be used for rendering instead of any specified string
		 *     content</li>
		 * <li>any follow-up rendering: when an HTML control is rendered for the second or any later
		 *     time and the preferDOM flag is set, then the DOM from the first rendering is preserved
		 *     and not replaced by the string content</li>
		 * </ul>
		 * 
		 * As preserving the existing DOM is the most common use case of the HTML control, the default value is true.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bPreferDOM New value for property <code>preferDOM</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setPreferDOM(bPreferDOM:boolean): sap.ui.core.HTML;
		/**
		 * Sets a new value for property <code>sanitizeContent</code>.
		 * 
		 * Whether to run the HTML sanitizer once the content (HTML markup) is applied or not.
		 * 
		 * To configure allowed URLs please use the whitelist API via jQuery.sap.addUrlWhitelist.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bSanitizeContent New value for property <code>sanitizeContent</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setSanitizeContent(bSanitizeContent:boolean): sap.ui.core.HTML;
		/**
		 * Sets a new value for property <code>visible</code>.
		 * 
		 * Specifies whether the control is visible. Invisible controls are not rendered.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bVisible New value for property <code>visible</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setVisible(bVisible:boolean): sap.ui.core.HTML;
	}
	/**
	 * Semantic Colors of an icon.
	 */
	type IconColor = 
	/**
	 * Semantic Colors of an icon.
	 */
	"Critical" |
	/**
	 * Semantic Colors of an icon.
	 */
	"Default" |
	/**
	 * Semantic Colors of an icon.
	 */
	"Negative" |
	/**
	 * Semantic Colors of an icon.
	 */
	"Neutral" |
	/**
	 * Semantic Colors of an icon.
	 */
	"Positive";
	/**
	 * The IconPool is a static class for retrieving or registering icons.
	 * It also provides helping methods for easier consumption of icons.
	 * There are already icons registered in IconPool, please use the Demo App named
	 * "Icon Explorer" to find the name of the icon.
	 * 
	 * In order to use the icon inside an existing control, please call
	 * {@link sap.ui.core.IconPool.getIconURI} and assign the URI to the control's property
	 * which supports icons.
	 * If you want to support both, icons and standard images in your own control, please use
	 * the static method {@link sap.ui.core.IconPool.createControlByURI} to either create an Icon in
	 * case the first argument is an icon-URL or another control which you define by
	 * providing it as the second argument.
	 */
	namespace IconPool {
		/**
		 * Register an additional icon to the sap.ui.core.IconPool.
		 * @param iconName the name of the icon.
		 * @param collectionName the name of icon collection. The built in icons are with empty collectionName, so if additional icons need to be registered in IconPool, the collectionName can't be empty.
		 * @param iconInfo the icon info which contains the following properties:
		 * @return the info object of the registered icon which has the name, collection, uri, fontFamily, content and suppressMirroring properties.
		 */
		function addIcon(iconName:string, collectionName:string, iconInfo:any): any;
		/**
		 * Creates an instance of {@link sap.ui.core.Icon} if the given URI is an icon URI, otherwise the given constructor is called.
		 * The given URI is set to the src property of the control.
		 * @param setting contains the properties which will be used to instantiate the returned control. It should contain at least a property named src. If it's given with a string type, it will be taken as the value of src property.
		 * @param constructor the constructor function which is called when the given URI isn't an icon URI
		 * @return either an instance of sap.ui.core.Icon or instance created by calling the given constructor
		 */
		function createControlByURI(setting:string|any, constructor:any): sap.ui.core.Control;
		/**
		 * Returns all names of registered collections in IconPool
		 * @return An array contains all of the registered collections' names.
		 */
		function getIconCollectionNames(): any[];
		/**
		 * Returns an info object for the icon with the given <code>iconName</code> and <code>collectionName</code>.
		 * 
		 * Instead of giving name and collection, a complete icon-URI can be provided as <code>iconName</code>.
		 * The method will determine name and collection from the URI, see {@link #.isIconURI IconPool.isIconURI}
		 * for details.
		 * 
		 * The returned info object has the following properties:
		 * <ul>
		 * <li><code>string: name</code> Name of the icon</li>
		 * <li><code>string: collection</code> Name of the collection that contains the icon or <code>undefined</code> in case of the default collection</li>
		 * <li><code>string: uri</code> Icon URI that identifies the icon</li>
		 * <li><code>string: fontFamily</code> CSS font family to use for this icon</li>
		 * <li><code>string: content</code> Character sequence that represents the icon in the icon font</li>
		 * <li><code>string: text</code> Alternative text describing the icon (optional, might be empty)</li>
		 * <li><code>boolean: suppressMirroring</code> Whether the icon needs no mirroring in right-to-left mode</li>
		 * </ul>
		 * @param iconName Name of the icon, must not be empty
		 * @param collectionName Name of the icon collection; to access built-in icons, omit the collection name
		 * @return Info object for the icon or <code>undefined</code> when the icon can't be found.
		 */
		function getIconInfo(iconName:string, collectionName?:string): any;
		/**
		 * Returns all name of icons that are registerd under the given collection.
		 * @param collectionName the name of collection where icon names are retrieved.
		 * @return An array contains all of the registered icon names under the given collection.
		 */
		function getIconNames(collectionName:string): any[];
		/**
		 * Returns the URI of the icon in the pool which has the given <code>iconName</code> and <code>collectionName</code>.
		 * @param iconName Name of the icon, must not be empty
		 * @param collectionName Name of the icon collection; to access built-in icons, omit the collection name
		 * @return URI of the icon or <code>undefined</code> if the icon can't be found in the IconPool
		 */
		function getIconURI(iconName:string, collectionName?:string): string;
		/**
		 * Returns whether the given <code>uri</code> is an icon URI.
		 * 
		 * A string is an icon URI when it can be parsed as an URI and when it has one of the two forms
		 * <ul>
		 * <li>sap-icon://collectionName/iconName</li>
		 * <li>sap-icon://iconName</li>
		 * </ul>
		 * where collectionName and iconName must be non-empty.
		 * @param uri The URI to check
		 * @return Whether the URI matches the icon URI format
		 */
		function isIconURI(uri:string): boolean;
	}
	/**
	 * A string type representing an Id or a name.
	 * 
	 * Allowed is a sequence of characters (capital/lowercase), digits, underscores, dashes, points and/or colons.
	 * It may start with a character, number or underscore only.
	 */
	type ID = any
	/**
	 * State of the Input Method Editor (IME) for the control.
	 * 
	 * Depending on its value, it allows users to enter and edit for example Chinese characters.
	 */
	type ImeMode = 
	/**
	 * State of the Input Method Editor (IME) for the control.
	 * 
	 * Depending on its value, it allows users to enter and edit for example Chinese characters.
	 */
	"Active" |
	/**
	 * State of the Input Method Editor (IME) for the control.
	 * 
	 * Depending on its value, it allows users to enter and edit for example Chinese characters.
	 */
	"Auto" |
	/**
	 * State of the Input Method Editor (IME) for the control.
	 * 
	 * Depending on its value, it allows users to enter and edit for example Chinese characters.
	 */
	"Disabled" |
	/**
	 * State of the Input Method Editor (IME) for the control.
	 * 
	 * Depending on its value, it allows users to enter and edit for example Chinese characters.
	 */
	"Inactive";
	class Item extends sap.ui.core.Element{
		/**
		 * Constructor for a new Item.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given
		 * @param mSettings initial settings for the new control
		 */
		 constructor(sId?:string, mSettings?:any);
		/**
		 * Creates a new subclass of class sap.ui.core.Item with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Gets current value of property <code>enabled</code>.
		 * 
		 * Enabled items can be selected.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>enabled</code>
		 */
		 getEnabled(): boolean;
		/**
		 * Gets current value of property <code>key</code>.
		 * 
		 * Can be used as input for subsequent actions.
		 * @return Value of property <code>key</code>
		 */
		 getKey(): string;
		/**
		 * Returns a metadata object for class sap.ui.core.Item.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Gets current value of property <code>text</code>.
		 * 
		 * The text to be displayed for the item.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>text</code>
		 */
		 getText(): string;
		/**
		 * Gets current value of property <code>textDirection</code>.
		 * 
		 * Options are RTL and LTR. Alternatively, an item can inherit its text direction from its parent control.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @return Value of property <code>textDirection</code>
		 */
		 getTextDirection(): sap.ui.core.TextDirection;
		/**
		 * Sets a new value for property <code>enabled</code>.
		 * 
		 * Enabled items can be selected.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bEnabled New value for property <code>enabled</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setEnabled(bEnabled:boolean): sap.ui.core.Item;
		/**
		 * Sets a new value for property <code>key</code>.
		 * 
		 * Can be used as input for subsequent actions.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sKey New value for property <code>key</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setKey(sKey:string): sap.ui.core.Item;
		/**
		 * Sets a new value for property <code>text</code>.
		 * 
		 * The text to be displayed for the item.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sText New value for property <code>text</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setText(sText:string): sap.ui.core.Item;
		/**
		 * Sets a new value for property <code>textDirection</code>.
		 * 
		 * Options are RTL and LTR. Alternatively, an item can inherit its text direction from its parent control.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @param sTextDirection New value for property <code>textDirection</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setTextDirection(sTextDirection:sap.ui.core.TextDirection): sap.ui.core.Item;
	}
	interface Label {
	}
	class LayoutData extends sap.ui.core.Element{
		/**
		 * Constructor for a new LayoutData.
		 * @param sId id for the new control, generated automatically if no id is given
		 * @param mSettings initial settings for the new control
		 */
		 constructor(sId?:string, mSettings?:any);
		/**
		 * Creates a new subclass of class sap.ui.core.LayoutData with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.core.LayoutData.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
	}
	class ListItem extends sap.ui.core.Item{
		/**
		 * Constructor for a new ListItem.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given
		 * @param mSettings initial settings for the new control
		 */
		 constructor(sId?:string, mSettings?:any);
		/**
		 * Creates a new subclass of class sap.ui.core.ListItem with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Gets current value of property <code>additionalText</code>.
		 * 
		 * Some additional text of type string, optionally to be displayed along with this item.
		 * @return Value of property <code>additionalText</code>
		 */
		 getAdditionalText(): string;
		/**
		 * Gets current value of property <code>icon</code>.
		 * 
		 * The icon belonging to this list item instance.
		 * This can be an URI to an image or an icon font URI.
		 * @return Value of property <code>icon</code>
		 */
		 getIcon(): string;
		/**
		 * Returns a metadata object for class sap.ui.core.ListItem.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Sets a new value for property <code>additionalText</code>.
		 * 
		 * Some additional text of type string, optionally to be displayed along with this item.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sAdditionalText New value for property <code>additionalText</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setAdditionalText(sAdditionalText:string): sap.ui.core.ListItem;
		/**
		 * Sets a new value for property <code>icon</code>.
		 * 
		 * The icon belonging to this list item instance.
		 * This can be an URI to an image or an icon font URI.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sIcon New value for property <code>icon</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setIcon(sIcon:string): sap.ui.core.ListItem;
	}
	class Locale extends sap.ui.base.Object{
		/**
		 * Creates an instance of the Locale.
		 * @param sLocaleId the locale identifier, in format en-US or en_US.
		 */
		 constructor(sLocaleId:string);
		/**
		 * Creates a new subclass of class sap.ui.core.Locale with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Get the locale extension as a single string or null.
		 * 
		 * The extension always consists of a singleton character (not 'x'),
		 * a dash '-' and one or more extension token, each separated
		 * again with a dash.
		 * 
		 * Use {@link #getExtensions} to get the individual extension tokens as an array.
		 * @return the extension
		 */
		 getExtension(): string;
		/**
		 * Get the locale extensions as an array of tokens.
		 * 
		 * The leading singleton and the separating dashes are not part of the result.
		 * If there is no extensions section in the locale tag, an empty array is returned.
		 * @return the individual extension sections
		 */
		 getExtensionSubtags(): string[];
		/**
		 * Get the locale language.
		 * 
		 * Note that the case might differ from the original script tag
		 * (Lower case is enforced as recommended by BCP47/ISO639).
		 * @return the language code
		 */
		 getLanguage(): string;
		/**
		 * Returns a metadata object for class sap.ui.core.Locale.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Get the locale private use section or null.
		 * @return the private use section
		 */
		 getPrivateUse(): string;
		/**
		 * Get the locale private use section
		 * @return the private use section
		 */
		 getPrivateUseSubtags(): string;
		/**
		 * Get the locale region or null if none was specified.
		 * 
		 * Note that the case might differ from the original script tag
		 * (Upper case is enforced as recommended by BCP47/ISO3166-1).
		 * @return the ISO3166-1 region code (2-letter or 3-digits)
		 */
		 getRegion(): string;
		/**
		 * Get the locale script or null if none was specified.
		 * 
		 * Note that the case might differ from the original language tag
		 * (Upper case first letter and lower case reminder enforced as
		 * recommended by BCP47/ISO15924)
		 * @return the script code or null
		 */
		 getScript(): string;
		/**
		 * Get the locale variants as a single string or null.
		 * 
		 * Multiple variants are separated by a dash '-'.
		 * @return the variant or null
		 */
		 getVariant(): string;
		/**
		 * Get the locale variants as an array of individual variants.
		 * 
		 * The separating dashes are not part of the result.
		 * If there is no variant section in the locale tag, an empty array is returned.
		 * @return the individual variant sections
		 */
		 getVariantSubtags(): string[];
	}
	class LocaleData extends sap.ui.base.Object{
		/**
		 * Creates an instance of the Data.
		 * @param oLocale the locale
		 */
		 constructor(oLocale:sap.ui.core.Locale);
		/**
		 * Creates a new subclass of class sap.ui.core.LocaleData with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Get combined datetime pattern with given date and and time style
		 * @param sDateStyle the required style for the date part
		 * @param sTimeStyle the required style for the time part
		 * @param sCalendarType the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.
		 * @return the combined datetime pattern
		 */
		 getCombinedDateTimePattern(sDateStyle:string, sTimeStyle:string, sCalendarType?:sap.ui.core.CalendarType): string;
		/**
		 * Get currency format pattern
		 * @param sContext the context of the currency pattern (standard or accounting)
		 * @return The pattern
		 */
		 getCurrencyPattern(sContext:string): string;
		/**
		 * Get date pattern in format "short", "medium", "long" or "full"
		 * @param sStyle the required style for the date pattern
		 * @param sCalendarType the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.
		 * @return the selected date pattern
		 */
		 getDatePattern(sStyle:string, sCalendarType?:sap.ui.core.CalendarType): string;
		/**
		 * Get datetime pattern in style "short", "medium", "long" or "full"
		 * @param sStyle the required style for the datetime pattern
		 * @param sCalendarType the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.
		 * @return the selected datetime pattern
		 */
		 getDateTimePattern(sStyle:string, sCalendarType?:sap.ui.core.CalendarType): string;
		/**
		 * Get day periods in width "narrow", "abbreviated" or "wide"
		 * @param sWidth the required width for the day period names
		 * @param sCalendarType the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.
		 * @return array of day periods (AM, PM)
		 */
		 getDayPeriods(sWidth:string, sCalendarType?:sap.ui.core.CalendarType): any[];
		/**
		 * Get standalone day periods in width "narrow", "abbreviated" or "wide"
		 * @param sWidth the required width for the day period names
		 * @param sCalendarType the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.
		 * @return array of day periods (AM, PM)
		 */
		 getDayPeriodsStandAlone(sWidth:string, sCalendarType?:sap.ui.core.CalendarType): any[];
		/**
		 * Get day names in width "narrow", "abbreviated" or "wide"
		 * @param sWidth the required width for the day names
		 * @param sCalendarType the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.
		 * @return array of day names (starting with Sunday)
		 */
		 getDays(sWidth:string, sCalendarType?:sap.ui.core.CalendarType): any[];
		/**
		 * Get stand alone day names in width "narrow", "abbreviated" or "wide"
		 * @param sWidth the required width for the day names
		 * @param sCalendarType the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.
		 * @return array of day names (starting with Sunday)
		 */
		 getDaysStandAlone(sWidth:string, sCalendarType?:sap.ui.core.CalendarType): any[];
		/**
		 * Get decimal format pattern
		 * @return The pattern
		 */
		 getDecimalPattern(): string;
		/**
		 * Returns the day that usually is regarded as the first day
		 * of a week in the current locale. Days are encoded as integer
		 * where sunday=0, monday=1 etc.
		 * 
		 * 
		 * All week data information in the CLDR is provides for territories (countries).
		 * If the locale of this LocaleData doesn't contain country information (e.g. if it
		 * contains only a language), then the "likelySubtag" information of the CLDR
		 * is taken into account to guess the "most likely" territory for the locale.
		 * @return first day of week
		 */
		 getFirstDayOfWeek(): number;
		/**
		 * Get locale specific language names
		 * @return map of locale specific language names
		 */
		 getLanguages(): any;
		/**
		 * Returns a metadata object for class sap.ui.core.LocaleData.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Get month names in width "narrow", "abbreviated" or "wide"
		 * @param sWidth the required width for the month names
		 * @param sCalendarType the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.
		 * @return array of month names (starting with January)
		 */
		 getMonths(sWidth:string, sCalendarType?:sap.ui.core.CalendarType): any[];
		/**
		 * Get stand alone month names in width "narrow", "abbreviated" or "wide"
		 * @param sWidth the required width for the month names
		 * @param sCalendarType the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.
		 * @return array of month names (starting with January)
		 */
		 getMonthsStandAlone(sWidth:string, sCalendarType?:sap.ui.core.CalendarType): any[];
		/**
		 * Get number symbol "decimal", "group", "plusSign", "minusSign", "percentSign"
		 * @param sType the required type of symbol
		 * @return the selected number symbol
		 */
		 getNumberSymbol(sType:string): string;
		/**
		 * Get orientation (left-to-right or right-to-left)
		 * @return character orientation for this locale
		 */
		 getOrientation(): string;
		/**
		 * Get percent format pattern
		 * @return The pattern
		 */
		 getPercentPattern(): string;
		/**
		 * Get quarter names in width "narrow", "abbreviated" or "wide"
		 * @param sWidth the required width for the quarter names
		 * @param sCalendarType the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.
		 * @return array of quarters
		 */
		 getQuarters(sWidth:string, sCalendarType?:sap.ui.core.CalendarType): any[];
		/**
		 * Get stand alone quarter names in width "narrow", "abbreviated" or "wide"
		 * @param sWidth the required width for the quarter names
		 * @param sCalendarType the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.
		 * @return array of quarters
		 */
		 getQuartersStandAlone(sWidth:string, sCalendarType?:sap.ui.core.CalendarType): any[];
		/**
		 * Get locale specific script names
		 * @return map of locale specific script names
		 */
		 getScripts(): any;
		/**
		 * Get locale specific territory names
		 * @return map of locale specific territory names
		 */
		 getTerritories(): any;
		/**
		 * Get time pattern in style "short", "medium", "long" or "full"
		 * @param sStyle the required style for the date pattern
		 * @param sCalendarType the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.
		 * @return the selected time pattern
		 */
		 getTimePattern(sStyle:string, sCalendarType?:sap.ui.core.CalendarType): string;
		/**
		 * Returns the last day of a weekend for the given locale.
		 * 
		 * Days are encoded in the same way as for {@link #getFirstDayOfWeek}.
		 * 
		 * All week data information in the CLDR is provides for territories (countries).
		 * If the locale of this LocaleData doesn't contain country information (e.g. if it
		 * contains only a language), then the "likelySubtag" information of the CLDR
		 * is taken into account to guess the "most likely" territory for the locale.
		 * @return last day of weekend
		 */
		 getWeekendEnd(): number;
		/**
		 * Returns the first day of a weekend for the given locale.
		 * 
		 * Days are encoded in the same way as for {@link #getFirstDayOfWeek}.
		 * 
		 * All week data information in the CLDR is provides for territories (countries).
		 * If the locale of this LocaleData doesn't contain country information (e.g. if it
		 * contains only a language), then the "likelySubtag" information of the CLDR
		 * is taken into account to guess the "most likely" territory for the locale.
		 * @return first day of weekend
		 */
		 getWeekendStart(): number;
	}
	type message = any
	class Message extends sap.ui.core.Element{
		/**
		 * Constructor for a new Message.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given
		 * @param mSettings initial settings for the new control
		 */
		 constructor(sId?:string, mSettings?:any);
		/**
		 * Compares the given message with <code>this</code> message. The types of
		 * {@link sap.ui.core.MessageType} are ordered from "Error" > "Warning" > "Success" >
		 * "Information" > "None".
		 * 
		 * See  {@link sap.ui.core.Message.compareByType}
		 * @param oOther message to compare with this one
		 * @return returns <code>0</code> if both messages are at
		 *         the same level. <code>-1</code> if <code>this</code>
		 *         message has a lower level. <code>1</code> if <code>this</code>
		 *         message has a higher level.
		 */
		 compareByType(oOther:sap.ui.core.Message): number;
		/**
		 * Compares two given messages with each other.
		 * 
		 * The types of {@link sap.ui.core.MessageType} are ordered from "Error" > "Warning" > "Success" >
		 * "Information" > "None".
		 * @param oMessage1 first message to compare
		 * @param oMessage2 second message to compare
		 * @return returns <code>0</code> if both messages are at
		 *         the same level. <code>-1</code> if <code>this</code>
		 *         message has a lower level. <code>1</code> if <code>this</code>
		 *         message has a higher level.
		 */
		 compareByType(oMessage1:sap.ui.core.Message, oMessage2:sap.ui.core.Message): number;
		/**
		 * Creates a new subclass of class sap.ui.core.Message with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns the icon's default URI depending on given size.
		 * 
		 * There are default icons for messages available that can be used this way. If no
		 * parameter is given, the size will be 16x16 per default. If larger icons are needed,
		 * the parameter "32x32" might be given.
		 * @param sSize If parameter is not set the default icon's size will be 16x16. If parameter
		 *         is set to "32x32" the icon size will be 32x32.
		 * @return URI of the default icon.
		 */
		 getDefaultIcon(sSize:string): sap.ui.core.URI;
		/**
		 * Gets current value of property <code>icon</code>.
		 * 
		 * A possible icon URI of the message
		 * @return Value of property <code>icon</code>
		 */
		 getIcon(): sap.ui.core.URI;
		/**
		 * Gets current value of property <code>level</code>.
		 * 
		 * Setting the message's level.
		 * 
		 * Default value is <code>None</code>.
		 * @return Value of property <code>level</code>
		 */
		 getLevel(): sap.ui.core.MessageType;
		/**
		 * Returns a metadata object for class sap.ui.core.Message.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Gets current value of property <code>text</code>.
		 * 
		 * Message text
		 * @return Value of property <code>text</code>
		 */
		 getText(): string;
		/**
		 * Gets current value of property <code>timestamp</code>.
		 * 
		 * Message's timestamp. It is just a simple String that will be used without any transformation. So the application that uses messages needs to format the timestamp to its own needs.
		 * @return Value of property <code>timestamp</code>
		 */
		 getTimestamp(): string;
		/**
		 * Sets a new value for property <code>icon</code>.
		 * 
		 * A possible icon URI of the message
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sIcon New value for property <code>icon</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setIcon(sIcon:sap.ui.core.URI): sap.ui.core.Message;
		/**
		 * Sets a new value for property <code>level</code>.
		 * 
		 * Setting the message's level.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>None</code>.
		 * @param sLevel New value for property <code>level</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setLevel(sLevel:sap.ui.core.MessageType): sap.ui.core.Message;
		/**
		 * Sets a new value for property <code>text</code>.
		 * 
		 * Message text
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sText New value for property <code>text</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setText(sText:string): sap.ui.core.Message;
		/**
		 * Sets a new value for property <code>timestamp</code>.
		 * 
		 * Message's timestamp. It is just a simple String that will be used without any transformation. So the application that uses messages needs to format the timestamp to its own needs.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sTimestamp New value for property <code>timestamp</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setTimestamp(sTimestamp:string): sap.ui.core.Message;
	}
	/**
	 * Defines the different message types of a message
	 */
	type MessageType = 
	/**
	 * Defines the different message types of a message
	 */
	"Error" |
	/**
	 * Defines the different message types of a message
	 */
	"Information" |
	/**
	 * Defines the different message types of a message
	 */
	"None" |
	/**
	 * Defines the different message types of a message
	 */
	"Success" |
	/**
	 * Defines the different message types of a message
	 */
	"Warning";
	type mvc = any
	/**
	 * Defines the different possible states of an element that can be open or closed and does not only
	 * toggle between these states, but also spends some time in between (e.g. because of an animation).
	 */
	type OpenState = 
	/**
	 * Defines the different possible states of an element that can be open or closed and does not only
	 * toggle between these states, but also spends some time in between (e.g. because of an animation).
	 */
	"CLOSED" |
	/**
	 * Defines the different possible states of an element that can be open or closed and does not only
	 * toggle between these states, but also spends some time in between (e.g. because of an animation).
	 */
	"CLOSING" |
	/**
	 * Defines the different possible states of an element that can be open or closed and does not only
	 * toggle between these states, but also spends some time in between (e.g. because of an animation).
	 */
	"OPEN" |
	/**
	 * Defines the different possible states of an element that can be open or closed and does not only
	 * toggle between these states, but also spends some time in between (e.g. because of an animation).
	 */
	"OPENING";
	/**
	 * A string type that represents a percentage value.
	 */
	type Percentage = any
	class Popup extends sap.ui.base.ManagedObject{
		/**
		 * Creates an instance of <code>sap.ui.core.Popup</code> that can be used to open controls as a Popup,
		 * visually appearing in front of other controls.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param oContent the content to render in the popup. In case of sap.ui.core.Element or DOMNode, the content must be present in the page (i.e. rendered). In case of sap.ui.core.Control, the Popup ensures rendering before opening.
		 * @param bModal whether the popup should be opened in a modal way (i.e. with blocking background). Setting this to "true" effectively blocks all attempts to focus content outside the modal popup. A modal popup also automatically sets the focus back to whatever was focused when the popup opened.
		 * @param bShadow whether the popup should be have a visual shadow underneath (shadow appearance depends on active theme and browser support)
		 * @param bAutoClose whether the popup should automatically close when the focus moves out of the popup
		 */
		 constructor(oContent:sap.ui.core.Control|sap.ui.core.Element|any, bModal?:boolean, bShadow?:boolean, bAutoClose?:boolean);
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>closed</code> event of this <code>sap.ui.core.Popup</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.ui.core.Popup</code> itself.
		 * @param fnFunction The function to be called when the event occurs
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.core.Popup</code> itself
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 attachClosed(fnFunction:any, oData?:any, oListener?:any): sap.ui.core.Popup;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>opened</code> event of this <code>sap.ui.core.Popup</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.ui.core.Popup</code> itself.
		 * @param fnFunction The function to be called when the event occurs
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.core.Popup</code> itself
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 attachOpened(fnFunction:any, oData?:any, oListener?:any): sap.ui.core.Popup;
		/**
		 * Closes the popup.
		 * 
		 * If the Popup is already closed or in the process of closing, calling this method does nothing.
		 * If the Popup is in the process of being opened and closed with a duration of 0, calling this method does nothing.
		 * If the Popup is in the process of being opened and closed with an animation duration, the animation will be chained, but this functionality is dangerous,
		 * may lead to inconsistent behavior and is thus not recommended and may even be removed.
		 * @param iDuration animation duration in milliseconds; default is the jQuery preset "fast".  For iDuration == 0 the closing happens synchronously without animation.
		 */
		 close(iDuration?:number);
		/**
		 * Closes and destroys this instance of Popup.
		 * Does not destroy the hosted content.
		 */
		 destroy();
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>closed</code> event of this <code>sap.ui.core.Popup</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 detachClosed(fnFunction:any, oListener:any): sap.ui.core.Popup;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>opened</code> event of this <code>sap.ui.core.Popup</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 detachOpened(fnFunction:any, oListener:any): sap.ui.core.Popup;
		/**
		 * When the Popup is being destroyed all corresponding references should be
		 * deleted as well to prevent any memory leaks.
		 */
		 exit();
		/**
		 * Creates a new subclass of class sap.ui.core.Popup with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Fires event <code>closed</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		protected fireClosed(mArguments?:any): sap.ui.core.Popup;
		/**
		 * Fires event <code>opened</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		protected fireOpened(mArguments?:any): sap.ui.core.Popup;
		/**
		 * Returns this Popup's content.
		 * @return the content that has been set previously (if any)
		 */
		 getContent(): sap.ui.core.Control|any;
		/**
		 * Returns the last z-index that has been handed out. does not increase the internal z-index counter.
		 * @return 
		 */
		 getLastZIndex(): number;
		/**
		 * Returns the last z-index that has been handed out. does not increase the internal z-index counter.
		 * @return 
		 */
		 getLastZIndex(): number;
		/**
		 * Returns a metadata object for class sap.ui.core.Popup.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Returns the value if a Popup is of modal type
		 * @return {boolean] bModal whether the Popup is of modal type
		 */
		 getModal();
		/**
		 * Returns the next available z-index on top of the existing/previous popups. Each call increases the internal z-index counter and the returned z-index.
		 * @return the next z-index on top of the Popup stack
		 */
		 getNextZIndex(): number;
		/**
		 * Returns the next available z-index on top of the existing/previous popups. Each call increases the internal z-index counter and the returned z-index.
		 * @return the next z-index on top of the Popup stack
		 */
		 getNextZIndex(): number;
		/**
		 * Returns whether the Popup is currently open, closed, or transitioning between these states.
		 * @return whether the Popup is opened
		 */
		 getOpenState(): sap.ui.core.OpenState;
		/**
		 * Returns whether the Popup is currently open (this includes opening and
		 * closing animations).
		 * @return whether the Popup is opened (or currently being
		 *                            opened or closed)
		 */
		 isOpen(): boolean;
		/**
		 * Opens the popup's content at the position either specified here or beforehand via {@link #setPosition}.
		 * Content must be capable of being positioned via "position:absolute;"
		 * All parameters are optional (open() may be called without any parameters). iDuration may just be omitted, but if any of "at", "of", "offset", "collision" is given, also the preceding positioning parameters ("my", at",...) must be given.
		 * 
		 * If the Popup's OpenState is different from "CLOSED" (i.e. if the Popup is already open, opening or closing), the call is ignored.
		 * @param iDuration animation duration in milliseconds; default is the jQuery preset "fast". For iDuration == 0 the opening happens synchronously without animation.
		 * @param my the popup content's reference position for docking
		 * @param at the "of" element's reference point for docking to
		 * @param of specifies the reference element to which the given content should dock to
		 * @param offset the offset relative to the docking point, specified as a string with space-separated pixel values (e.g. "0 10" to move the popup 10 pixels to the right). If the docking of both "my" and "at" are both RTL-sensitive ("begin" or "end"), this offset is automatically mirrored in the RTL case as well.
		 * @param collision defines how the position of an element should be adjusted in case it overflows the window in some direction.
		 * @param followOf defines whether the popup should follow the dock reference when the reference changes its position.
		 */
		 open(iDuration?:number, my?:sap.ui.core.Popup.Dock, at?:sap.ui.core.Popup.Dock, of?:string|sap.ui.core.Element|any|any|jQuery.Event, offset?:string, collision?:string, followOf?:boolean);
		/**
		 * Sets the animation functions to use for opening and closing the Popup. Any null value will be ignored and not change the respective animation function.
		 * When called, the animation functions receive three parameters:
		 * - the jQuery object wrapping the DomRef of the popup
		 * - the requested animation duration
		 * - a function that MUST be called once the animation has completed
		 * @param fnOpen 
		 * @param fnClose 
		 * @return <code>this</code> to allow method chaining
		 */
		 setAnimations(fnOpen:any, fnClose:any): sap.ui.core.Popup;
		/**
		 * Used to specify whether the Popup should close as soon as
		 * - for non-touch environment: the focus leaves
		 * - for touch environment: user clicks the area which is outside the popup itself, the dom elemnt which popup aligns to (except document),
		 *  and one of the autoCloseAreas set by calling setAutoCloseAreas.
		 * @param bAutoClose whether the Popup should close as soon as the focus leaves
		 * @return <code>this</code> to allow method chaining
		 */
		 setAutoClose(bAutoClose:boolean): sap.ui.core.Popup;
		/**
		 * Sets the additional areas in the page that are considered part of the Popup when autoclose is enabled.
		 * - non-touch environment: if the focus leaves the Popup but immediately enters one of these areas, the Popup does NOT close.
		 * - touch environment: if user clicks one of these areas, the Popup does NOT close.
		 * @param aAutoCloseAreas an array containing DOM elements considered part of the Popup; a value of null removes all previous areas
		 * @return <code>this</code> to allow method chaining
		 */
		 setAutoCloseAreas(aAutoCloseAreas:any[]): sap.ui.core.Popup;
		/**
		 * Sets the content this instance of the Popup should render.
		 * Content must be capable of being positioned via position:absolute;
		 * @param oContent 
		 * @return <code>this</code> to allow method chaining
		 */
		 setContent(oContent:sap.ui.core.Control|any): sap.ui.core.Popup;
		/**
		 * Sets the durations for opening and closing animations.
		 * Null values and values < 0 are ignored.
		 * A duration of 0 means no animation.
		 * Default value is "fast" which is the jQuery constant for "200 ms".
		 * @param iOpenDuration in milliseconds
		 * @param iCloseDuration in milliseconds
		 * @return <code>this</code> to allow method chaining
		 */
		 setDurations(iOpenDuration:number, iCloseDuration:number): sap.ui.core.Popup;
		/**
		 * Sets the ID of the element that should be focused once the popup opens.
		 * If the given ID is the ID of an existing Control, this Control's focusDomRef will be focused instead, which may be an HTML element with a different ID (usually a sub-element inside the Control).
		 * If no existing element ID is supplied and the Popup is modal or auto-close, the Popup will instead focus the first focusable element.
		 * @param sId the ID of the DOM element to focus
		 */
		 setInitialFocusId(sId:string);
		/**
		 * Used to specify whether the Popup should be modal. A modal popup will put some fading "block layer" over the background and
		 * prevent attempts to put the focus outside/below the popup.
		 * Setting this while the popup is open will change "block layer" immediately.
		 * @param bModal whether the Popup is of modal type
		 * @param sModalCSSClass a CSS class (or space-separated list of classes) that should be added to the block layer
		 * @return <code>this</code> to allow method chaining
		 */
		 setModal(bModal:boolean, sModalCSSClass?:string): sap.ui.core.Popup;
		/**
		 * Sets the position of the Popup (if you refer to a Control as anchor then do not
		 * use the DOMRef of the control which might change after re-renderings).
		 * Optional parameters can only be omitted when all subsequent parameters are omitted as well.
		 * @param my specifies which point of the given Content should be aligned
		 * @param at specifies the point of the reference element to which the given Content should be aligned
		 * @param of specifies the reference element to which the given content should be aligned as specified in the other parameters
		 * @param offset the offset relative to the docking point, specified as a string with space-separated pixel values (e.g. "0 10" to move the popup 10 pixels to the right). If the docking of both "my" and "at" are both RTL-sensitive ("begin" or "end"), this offset is automatically mirrored in the RTL case as well.
		 * @param collision defines how the position of an element should be adjusted in case it overflows the window in some direction. The valid values that refer to jQuery-UI's position parameters are "flip", "fit" and "none".
		 * @return <code>this</code> to allow method chaining
		 */
		 setPosition(my:sap.ui.core.Popup.Dock, at:sap.ui.core.Popup.Dock|any, of?:string|sap.ui.core.Element|any|any|jQuery.Event, offset?:string, collision?:string): sap.ui.core.Popup;
		/**
		 * Determines whether the Popup should have a shadow (in supporting browsers).
		 * This also affects a currently open popup.
		 * @param bShowShadow whether to show a shadow
		 * @return <code>this</code> to allow method chaining
		 */
		 setShadow(bShowShadow:boolean): sap.ui.core.Popup;
	}
	/**
	 * Priorities for general use.
	 */
	type Priority = 
	/**
	 * Priorities for general use.
	 */
	"High" |
	/**
	 * Priorities for general use.
	 */
	"Low" |
	/**
	 * Priorities for general use.
	 */
	"Medium" |
	/**
	 * Priorities for general use.
	 */
	"None";
	/**
	 * Base Class for a Renderer.
	 */
	namespace Renderer {
		/**
		 * Creates a new static renderer class that extends a given renderer.
		 * 
		 * This method can be used with two signatures that are explained below.
		 * In both variants, the returned renderer class inherits all properties (methods, fields)
		 * from the given parent renderer class. Both variants also add an 'extend' method to the
		 * created renderer class that behaves like the new signature of this <code>Renderer.extend</code>
		 * method, but creates subclasses of the new class, not of <code>sap.ui.core.Renderer</code>.
		 * 
		 * <b>New Signature</b><br>
		 * In the new signature variant, two parameters must be given: a qualified name
		 * for the new renderer (its class name), and an optional object literal that contains
		 * methods or fields to be added to the new renderer class.
		 * 
		 * This signature has been designed to resemble the class extension mechanism as
		 * provided by {@link sap.ui.base.Object.extend Object.extend}.
		 * 
		 * <pre>
		 * sap.ui.define(['sap/ui/core/Renderer'],
		 *     function(Renderer) {
		 *     "use strict";
		 * 
		 *     var LabelRenderer = Renderer.extend('sap.m.LabelRenderer', {
		 *         renderer: function(oRM, oControl) {
		 * 
		 *             renderPreamble(oRM, oControl);
		 * 
		 *             // implementation core renderer logic here
		 * 
		 *             renderPreamble(oRM, oControl);
		 * 
		 *         },
		 * 
		 *         renderPreamble : function(oRM, oControl) {
		 *         ...
		 *         },
		 * 
		 *         renderPostamble : function(oRM, oControl) {
		 *         ...
		 *         }
		 * 
		 *     });
		 * 
		 *     return LabelRenderer;
		 * });
		 * </pre>
		 * 
		 * The extension of Renderers works across multiple levels. A FancyLabelRenderer can
		 * extend the above LabelRenderer:
		 * 
		 * <pre>
		 * sap.ui.define(['sap/m/LabelRenderer'],
		 *     function(LabelRenderer) {
		 *     "use strict";
		 * 
		 *     var FancyLabelRenderer = LabelRenderer.extend('sap.mylib.FancyLabelRenderer', {
		 *         renderer: function(oRM, oControl) {
		 * 
		 *             // call base renderer
		 *             LabelRenderer.renderPreamble(oRM, oControl);
		 * 
		 *             // ... do your own fancy rendering here
		 * 
		 *             // call base renderer again
		 *             LabelRenderer.renderPostamble(oRM, oControl);
		 *         }
		 *     });
		 * 
		 *     return FancyLabelRenderer;
		 * });
		 * </pre>
		 * 
		 * <b>Note:</b> the new signature no longer requires the <code>bExport</code> flag to be set for
		 * the enclosing {@link sap.ui.define} call. The Renderer base classes takes care of the necessary
		 * global export of the render. This allows Non-SAP developers to write a renderer that complies with
		 * the documented restriction for <code>sap.ui.define</code> (no use of bExport = true outside
		 * sap.ui.core projects).
		 * 
		 * <b>Deprecated Signature</b><br>
		 * The deprecated old signature expects just one parameter: a renderer that should be extended.
		 * With that signature the renderer can't be exported globally as the name of the renderer class
		 * is not known.
		 * 
		 * For compatibility reasons, the class created by the deprecated signature contains a property
		 * <code>_super</code> that references the parent class. It shouldn't be used by applications / control
		 * developers as it doesn't work reliably for deeper inheritance chains: if the old variant of
		 * <code>Renderer.extend</code> is used on two or more levels of the inheritance hierarchy, the
		 * <code>_super</code> property of the resulting renderer class will always point to the implementation
		 * of the base renderer of the last call to extend. Instead of using <code>this._super</code>, renderer
		 * implementations should use the new signature variant and access the base implementation of a method
		 * via the AMD reference to the base renderer (as shown in the FancyLabelRenderer example above).
		 * @param vName either the name of the new renderer class (new signature) or the base
		 *                              renderer to extend (deprecated signature)
		 * @param oRendererInfo methods and/or properties that should be added to the new renderer class
		 * @return a new static renderer class that can be enriched further
		 */
		function extend(vName:string|any, oRendererInfo?:any): any;
		/**
		 * Returns the TextAlignment for the provided configuration.
		 * @param oTextAlign the text alignment of the Control
		 * @param oTextDirection the text direction of the Control
		 * @return the actual text alignment that must be set for this environment
		 */
		function getTextAlign(oTextAlign:sap.ui.core.TextAlign, oTextDirection:sap.ui.core.TextDirection): string;
	}
	class RenderManager extends sap.ui.base.Object{
		/**
		 * Creates an instance of the RenderManager.
		 */
		 constructor();
		/**
		 * Adds a class to the class collection if the name is not empty or null.
		 * The class collection is flushed if it is written to the buffer using {@link #writeClasses}
		 * @param sName name of the class to be added; null values are ignored
		 * @return this render manager instance to allow chaining
		 */
		 addClass(sName:string): sap.ui.core.RenderManager;
		/**
		 * Adds a style property to the style collection if the value is not empty or null
		 * The style collection is flushed if it is written to the buffer using {@link #writeStyle}
		 * @param sName name of the CSS property to write
		 * @param value value to write
		 * @return this render manager instance to allow chaining
		 */
		 addStyle(sName:string, value:string|number|number): sap.ui.core.RenderManager;
		/**
		 * Creates the ID to be used for the invisible Placeholder DOM element.
		 * This method can be used to get direct access to the placeholder DOM element.
		 * Also statically available as RenderManager.createInvisiblePlaceholderId()
		 * @param oElement The Element instance for which to create the placeholder ID
		 * @return The ID used for the invisible Placeholder of this element
		 */
		protected createInvisiblePlaceholderId(oElement:sap.ui.core.Element): string;
		/**
		 * Cleans up the resources associated with this instance.
		 * After the instance has been destroyed, it must not be used anymore.
		 * Applications should call this function if they don't need the instance any longer.
		 */
		 destroy();
		/**
		 * Creates a new subclass of class sap.ui.core.RenderManager with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Searches "to-be-preserved" nodes for the given control id.
		 * @param sId control id to search content for.
		 * @return a jQuery collection representing the found content
		 */
		 findPreservedContent(sId:string): any;
		/**
		 * Renders the content of the rendering buffer into the provided DOMNode.
		 * 
		 * This function must not be called within control renderers.
		 * 
		 * Usage:
		 * <pre>
		 * // Create a new instance of the RenderManager
		 * var rm = sap.ui.getCore().createRenderManager();
		 * // Use the writer API to fill the buffers
		 * rm.write(...);
		 * rm.renderControl(oControl);
		 * rm.write(...);
		 * ...
		 * // Finally flush the buffer into the provided DOM node (The current content is removed)
		 * rm.flush(oDomNode);
		 * // If the instance is not needed anymore, destroy it
		 * rm.destroy();
		 * </pre>
		 * @param oTargetDomNode The node in the dom where the buffer should be flushed into.
		 * @param bDoNotPreserve flag, whether to not preserve (true) the content or to preserve it (false).
		 * @param vInsert flag, whether to append (true) or replace (false) the buffer of the target dom node or to insert at a certain position (int)
		 */
		 flush(oTargetDomNode:any, bDoNotPreserve:boolean, vInsert:boolean|number);
		/**
		 * Returns the configuration object
		 * Shortcut for <code>sap.ui.getCore().getConfiguration()</code>
		 * @return the configuration object
		 */
		 getConfiguration(): sap.ui.core.Configuration;
		/**
		 * Returns a metadata object for class sap.ui.core.RenderManager.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Returns the hidden area reference belonging to this window instance.
		 * @return the hidden area reference belonging to this core instance.
		 */
		 getPreserveAreaRef(): any;
		/**
		 * Returns the renderer class for a given control instance
		 * @param oControl the control that should be rendered
		 * @return the renderer class for a given control instance
		 */
		 getRenderer(oControl:sap.ui.core.Control);
		/**
		 * Returns the renderer class for a given control instance
		 * @param oControl the control that should be rendered
		 * @return the renderer class for a given control instance
		 */
		 getRenderer(oControl:sap.ui.core.Control): any;
		/**
		 * Collects descendants of the given root node that need to be preserved before the root node
		 * is wiped out. The "to-be-preserved" nodes are moved to a special, hidden 'preserve' area.
		 * 
		 * A node is declared "to-be-preserved" when it has the <code>data-sap-ui-preserve</code>
		 * attribute set. When the optional parameter <code>bPreserveNodesWithId</code> is set to true,
		 * then nodes with an id are preserved as well and their <code>data-sap-ui-preserve</code> attribute
		 * is set automatically. This option is used by UIAreas when they render for the first time and
		 * simplifies the handling of predefined HTML content in a web page.
		 * 
		 * The "to-be-preserved" nodes are searched with a depth first search and moved to the 'preserve'
		 * area in the order that they are found. So for direct siblings the order should be stable.
		 * @param oRootNode to search for "to-be-preserved" nodes
		 * @param bPreserveRoot whether to preserve the root itself
		 * @param bPreserveNodesWithId whether to preserve nodes with an id as well
		 */
		 preserveContent(oRootNode:any, bPreserveRoot?:boolean, bPreserveNodesWithId?:boolean);
		/**
		 * Renders the given control to the provided DOMNode.
		 * 
		 * If the control is already rendered in the provided DOMNode the DOM of the control is replaced. If the control
		 * is already rendered somewhere else the current DOM of the control is removed and the new DOM is appended
		 * to the provided DOMNode.
		 * 
		 * This function must not be called within control renderers.
		 * @param oControl the Control that should be rendered.
		 * @param oTargetDomNode The node in the DOM where the result of the rendering should be inserted.
		 */
		 render(oControl:sap.ui.core.Control, oTargetDomNode:any);
		/**
		 * Turns the given control into its HTML representation and appends it to the
		 * rendering buffer.
		 * 
		 * If the given control is undefined or null, then nothing is rendered.
		 * @param oControl the control that should be rendered
		 * @return this render manager instance to allow chaining
		 */
		 renderControl(oControl:sap.ui.core.Control): sap.ui.core.RenderManager;
		/**
		 * 
		 * @param sKey 
		 * @deprecated Not implemented - DO NOT USE
		 */
		 translate(sKey:string);
		/**
		 * Write the given texts to the buffer
		 * @param sText (can be a number too)
		 * @return this render manager instance to allow chaining
		 */
		 write(sText:string|number): sap.ui.core.RenderManager;
		/**
		 * 
		 * @deprecated Not implemented - DO NOT USE
		 * @return this render manager instance to allow chaining
		 */
		 writeAcceleratorKey(): sap.ui.core.RenderManager;
		/**
		 * Writes the accessibility state (see WAI-ARIA specification) of the provided element into the HTML
		 * based on the element's properties and associations.
		 * 
		 * The ARIA properties are only written when the accessibility feature is activated in the UI5 configuration.
		 * 
		 * The following properties/values to ARIA attribute mappings are done (if the element does have such properties):
		 * <code>editable===false</code> => <code>aria-readonly="true"</code>
		 * <code>enabled===false</code> => <code>aria-disabled="true"</code>
		 * <code>visible===false</code> => <code>aria-hidden="true"</code>
		 * <code>required===true</code> => <code>aria-required="true"</code>
		 * <code>selected===true</code> => <code>aria-selected="true"</code>
		 * <code>checked===true</code> => <code>aria-checked="true"</code>
		 * 
		 * In case of the required attribute also the Label controls which referencing the given element in their 'for' relation
		 * are taken into account to compute the <code>aria-required</code> attribute.
		 * 
		 * Additionally the association <code>ariaDescribedBy</code> and <code>ariaLabelledBy</code> are used to write
		 * the id lists of the ARIA attributes <code>aria-describedby</code> and <code>aria-labelledby</code>.
		 * 
		 * Label controls which referencing the given element in their 'for' relation are automatically added to the
		 * <code>aria-labelledby</code> attributes.
		 * 
		 * Note: This function is only a heuristic of a control property to ARIA attribute mapping. Control developers
		 * have to check whether it fullfills their requirements. In case of problems (for example the RadioButton has a
		 * <code>selected</code> property but must provide an <code>aria-checked</code> attribute) the auto-generated
		 * result of this function can be influenced via the parameter <code>mProps</code> as described below.
		 * 
		 * The parameter <code>mProps</code> can be used to either provide additional attributes which should be added and/or
		 * to avoid the automatic generation of single ARIA attributes. The 'aria-' prefix will be prepended automatically to the keys
		 * (Exception: Attribute 'role' does not get the prefix 'aria-').
		 * 
		 * Examples:
		 * <code>{hidden : true}</code> results in <code>aria-hidden="true"</code> independent of the precense or absence of
		 * the visibility property.
		 * <code>{hidden : null}</code> ensures that no <code>aria-hidden</code> attribute is written independent of the precense
		 * or absence of the visibility property.
		 * The function behaves in the same way for the associations <code>ariaDescribedBy</code> and <code>ariaLabelledBy</code>.
		 * To append additional values to the auto-generated <code>aria-describedby</code> and <code>aria-labelledby</code> attributes
		 * the following format can be used:
		 * <code>{describedby : {value: "id1 id2", append: true}}</code> => <code>aria-describedby="ida idb id1 id2"</code> (assuming that "ida idb"
		 * is the auto-generated part based on the association <code>ariaDescribedBy</code>).
		 * @param oElement the element whose accessibility state should be rendered
		 * @param mProps a map of properties that should be added additionally or changed.
		 * @return this render manager instance to allow chaining
		 */
		 writeAccessibilityState(oElement?:sap.ui.core.Element, mProps?:any): sap.ui.core.RenderManager;
		/**
		 * Writes the attribute and its value into the HTML
		 * @param sName the name of the attribute
		 * @param value the value of the attribute
		 * @return this render manager instance to allow chaining
		 */
		 writeAttribute(sName:string, value:string|number|boolean): sap.ui.core.RenderManager;
		/**
		 * Writes the attribute and its value into the HTML
		 * 
		 * The value is properly escaped to avoid XSS attacks.
		 * @param sName the name of the attribute
		 * @param vValue the value of the attribute
		 * @return this render manager instance to allow chaining
		 */
		 writeAttributeEscaped(sName:string, vValue:any): sap.ui.core.RenderManager;
		/**
		 * Writes and flushes the class collection (all CSS classes added by "addClass()" since the last flush).
		 * Also writes the custom style classes added by the application with "addStyleClass(...)". Custom classes are
		 * added by default from the currently rendered control. If an oElement is given, this Element's custom style
		 * classes are added instead. If oElement === false, no custom style classes are added.
		 * @param oElement an Element from which to add custom style classes (instead of adding from the control itself)
		 * @return this render manager instance to allow chaining
		 */
		 writeClasses(oElement?:sap.ui.core.Element|boolean): sap.ui.core.RenderManager;
		/**
		 * Writes the controls data into the HTML.
		 * Control Data consists at least of the id of a control
		 * @param oControl the control whose identifying information should be written to the buffer
		 * @return this render manager instance to allow chaining
		 */
		 writeControlData(oControl:sap.ui.core.Control): sap.ui.core.RenderManager;
		/**
		 * Writes the elements data into the HTML.
		 * Element Data consists at least of the id of a element
		 * @param oElement the element whose identifying information should be written to the buffer
		 * @return this render manager instance to allow chaining
		 */
		 writeElementData(oElement:sap.ui.core.Element): sap.ui.core.RenderManager;
		/**
		 * Escape text for HTML and write it to the buffer
		 * @param sText 
		 * @param bLineBreaks Whether to convert linebreaks into <br> tags
		 * @return this render manager instance to allow chaining
		 */
		 writeEscaped(sText:string, bLineBreaks:boolean): sap.ui.core.RenderManager;
		/**
		 * Writes necessary invisible control/element placeholder data into the HTML.
		 * 
		 * Controls should only use this method if they can't live with the standard 'visible=false' implementation of the RenderManager which
		 * renders dummy HTMLSpanElement for better re-rendering performance. Even though HTML5 error tolerance accepts this for most of the cases and
		 * these dummy elements are not in the render tree of the Browser, controls may need to generate a valid and semantic HTML output when the
		 * rendered HTMLSpanElement is not an allowed element(e.g. &lt;span&gt; element within the &lt;tr&gt; or &lt;li&gt; group).
		 * 
		 * The caller needs to start an opening HTML tag, then call this method, then complete the opening and closing tag.
		 * <pre>
		 * oRenderManager.write("<tr");
		 * oRenderManager.writeInvisiblePlaceholderData(oControl);
		 * oRenderManager.write("></tr>");
		 * </pre>
		 * @param oElement an instance of sap.ui.core.Element
		 * @return this render manager instance to allow chaining
		 */
		protected writeInvisiblePlaceholderData(oElement:sap.ui.core.Element): sap.ui.core.RenderManager;
		/**
		 * Writes and flushes the style collection
		 * @return this render manager instance to allow chaining
		 */
		 writeStyles(): sap.ui.core.RenderManager;
	}
	/**
	 * The resize handling API provides firing of resize events on all browsers by regularly
	 * checking the width and height of registered DOM elements or controls and firing events accordingly.
	 */
	namespace ResizeHandler {
		/**
		 * Deregisters a previously registered handler for resize events with the given registration ID.
		 * @param sId The registration ID of the handler to deregister. The ID was provided by function {@link sap.ui.core.ResizeHandler.register}
		 *            when the handler was registered.
		 */
		function deregister(sId:string);
		/**
		 * Creates a new subclass of class sap.ui.core.ResizeHandler with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		function extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.core.ResizeHandler.
		 * @return Metadata object describing this class
		 */
		function getMetadata(): sap.ui.base.Metadata;
		/**
		 * Registers the given event handler for resize events on the given DOM element or control.
		 * 
		 * <b>Note:</b> This function must not be used before the UI5 framework is initialized.
		 * Please use the {@link sap.ui.core.Core#attachInit init event} of UI5 if you are not sure whether this is the case.
		 * 
		 * The resize handler periodically checks the dimensions of the registered reference. Whenever it detects changes, an event is fired.
		 * Be careful when changing dimensions within the event handler which might cause another resize event and so on.
		 * 
		 * The available parameters of the resize event are:
		 * <ul>
		 * <li><code>oEvent.target</code>: The DOM element of which the dimensions were checked</li>
		 * <li><code>oEvent.size.width</code>: The current width of the DOM element in pixels</li>
		 * <li><code>oEvent.size.height</code>: The current height of the DOM element in pixels</li>
		 * <li><code>oEvent.oldSize.width</code>: The previous width of the DOM element in pixels</li>
		 * <li><code>oEvent.oldSize.height</code>: The previous height of the DOM element in pixels</li>
		 * <li><code>oEvent.control</code>: The control which was given during registration of the event handler (if present)</li>
		 * </ul>
		 * @param oRef The control or the DOM reference for which the given event handler should be registered (beside the window)
		 * @param fHandler The event handler which should be called whenever the size of the given reference is changed.
		 *             The event object is passed as first argument to the event handler. See the description of this function for more details about the available parameters of this event.
		 * @return A registration ID which can be used for deregistering the event handler, see {@link sap.ui.core.ResizeHandler.deregister}.
		 *             If the UI5 framework is not yet initialized <code>null</code> is returned.
		 */
		function register(oRef:any|sap.ui.core.Control, fHandler:any): string;
	}
	class ScrollBar extends sap.ui.core.Control{
		/**
		 * Constructor for a new ScrollBar.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given
		 * @param mSettings initial settings for the new control
		 */
		 constructor(sId?:string, mSettings?:any);
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>scroll</code> event of this <code>sap.ui.core.ScrollBar</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.ui.core.ScrollBar</code> itself.
		 * 
		 * Scroll event.
		 * @param fnFunction The function to be called when the event occurs
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.core.ScrollBar</code> itself
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 attachScroll(fnFunction:any, oData?:any, oListener?:any): sap.ui.core.ScrollBar;
		/**
		 * Binds the mouse wheel scroll event of the control that has the scrollbar to the scrollbar itself.
		 * @param oOwnerDomRef Dom ref of the control that uses the scrollbar
		 */
		 bind(oOwnerDomRef:string);
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>scroll</code> event of this <code>sap.ui.core.ScrollBar</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 detachScroll(fnFunction:any, oListener:any): sap.ui.core.ScrollBar;
		/**
		 * Creates a new subclass of class sap.ui.core.ScrollBar with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Fires event <code>scroll</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>action</code> of type <code>sap.ui.core.ScrollBarAction</code>Actions are: Click on track, button, drag of thumb, or mouse wheel click.</li>
		 * <li><code>forward</code> of type <code>boolean</code>Direction of scrolling: back (up) or forward (down).</li>
		 * <li><code>newScrollPos</code> of type <code>int</code>Current Scroll position either in pixels or in steps.</li>
		 * <li><code>oldScrollPos</code> of type <code>int</code>Old Scroll position - can be in pixels or in steps.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		protected fireScroll(mArguments?:any): sap.ui.core.ScrollBar;
		/**
		 * Gets current value of property <code>contentSize</code>.
		 * 
		 * Size of the scrollable content (in pixels).
		 * @return Value of property <code>contentSize</code>
		 */
		 getContentSize(): sap.ui.core.CSSSize;
		/**
		 * Returns a metadata object for class sap.ui.core.ScrollBar.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Gets current value of property <code>scrollPosition</code>.
		 * 
		 * Scroll position in steps or pixels.
		 * @return Value of property <code>scrollPosition</code>
		 */
		 getScrollPosition(): number;
		/**
		 * Gets current value of property <code>size</code>.
		 * 
		 * Size of the Scrollbar (in pixels).
		 * @return Value of property <code>size</code>
		 */
		 getSize(): sap.ui.core.CSSSize;
		/**
		 * Gets current value of property <code>steps</code>.
		 * 
		 * Number of steps to scroll. Used if the size of the content is not known as the data is loaded dynamically.
		 * @return Value of property <code>steps</code>
		 */
		 getSteps(): number;
		/**
		 * Gets current value of property <code>vertical</code>.
		 * 
		 * Orientation. Defines if the Scrollbar is vertical or horizontal.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>vertical</code>
		 */
		 getVertical(): boolean;
		/**
		 * Page Down is used to scroll one page forward.
		 */
		 pageDown();
		/**
		 * Page Up is used to scroll one page back.
		 */
		 pageUp();
		/**
		 * Sets a new value for property <code>contentSize</code>.
		 * 
		 * Size of the scrollable content (in pixels).
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sContentSize New value for property <code>contentSize</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setContentSize(sContentSize:sap.ui.core.CSSSize): sap.ui.core.ScrollBar;
		/**
		 * Sets a new value for property <code>scrollPosition</code>.
		 * 
		 * Scroll position in steps or pixels.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param iScrollPosition New value for property <code>scrollPosition</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setScrollPosition(iScrollPosition:number): sap.ui.core.ScrollBar;
		/**
		 * Sets a new value for property <code>size</code>.
		 * 
		 * Size of the Scrollbar (in pixels).
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sSize New value for property <code>size</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setSize(sSize:sap.ui.core.CSSSize): sap.ui.core.ScrollBar;
		/**
		 * Sets a new value for property <code>steps</code>.
		 * 
		 * Number of steps to scroll. Used if the size of the content is not known as the data is loaded dynamically.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param iSteps New value for property <code>steps</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setSteps(iSteps:number): sap.ui.core.ScrollBar;
		/**
		 * Sets a new value for property <code>vertical</code>.
		 * 
		 * Orientation. Defines if the Scrollbar is vertical or horizontal.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bVertical New value for property <code>vertical</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setVertical(bVertical:boolean): sap.ui.core.ScrollBar;
		/**
		 * Unbinds the mouse wheel scroll event of the control that has the scrollbar
		 * @param oOwnerDomRef Dom ref of the Control that uses the scrollbar
		 */
		 unbind(oOwnerDomRef:string);
	}
	/**
	 * Actions are: Click on track, button, drag of thumb, or mouse wheel click
	 */
	type ScrollBarAction = 
	/**
	 * Actions are: Click on track, button, drag of thumb, or mouse wheel click
	 */
	"Drag" |
	/**
	 * Actions are: Click on track, button, drag of thumb, or mouse wheel click
	 */
	"MouseWheel" |
	/**
	 * Actions are: Click on track, button, drag of thumb, or mouse wheel click
	 */
	"Page" |
	/**
	 * Actions are: Click on track, button, drag of thumb, or mouse wheel click
	 */
	"Step";
	/**
	 * Defines the possible values for horizontal and vertical scrolling behavior.
	 */
	type Scrolling = 
	/**
	 * Defines the possible values for horizontal and vertical scrolling behavior.
	 */
	"Auto" |
	/**
	 * Defines the possible values for horizontal and vertical scrolling behavior.
	 */
	"Hidden" |
	/**
	 * Defines the possible values for horizontal and vertical scrolling behavior.
	 */
	"None" |
	/**
	 * Defines the possible values for horizontal and vertical scrolling behavior.
	 */
	"Scroll";
	class SeparatorItem extends sap.ui.core.Item{
		/**
		 * Constructor for a new SeparatorItem.
		 * @param sId id for the new control, generated automatically if no id is given
		 * @param mSettings initial settings for the new control
		 */
		 constructor(sId?:string, mSettings?:any);
		/**
		 * Creates a new subclass of class sap.ui.core.SeparatorItem with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.core.SeparatorItem.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
	}
	/**
	 * Configuration options for text alignments.
	 */
	type TextAlign = 
	/**
	 * Configuration options for text alignments.
	 */
	"Begin" |
	/**
	 * Configuration options for text alignments.
	 */
	"Center" |
	/**
	 * Configuration options for text alignments.
	 */
	"End" |
	/**
	 * Configuration options for text alignments.
	 */
	"Initial" |
	/**
	 * Configuration options for text alignments.
	 */
	"Left" |
	/**
	 * Configuration options for text alignments.
	 */
	"Right";
	/**
	 * Configuration options for the direction of texts.
	 */
	type TextDirection = 
	/**
	 * Configuration options for the direction of texts.
	 */
	"Inherit" |
	/**
	 * Configuration options for the direction of texts.
	 */
	"LTR" |
	/**
	 * Configuration options for the direction of texts.
	 */
	"RTL";
	type theming = any
	class TooltipBase extends sap.ui.core.Control{
		/**
		 * Constructor for a new TooltipBase.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given
		 * @param mSettings initial settings for the new control
		 */
		 constructor(sId?:string, mSettings?:any);
		/**
		 * Creates a new subclass of class sap.ui.core.TooltipBase with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Gets current value of property <code>atPosition</code>.
		 * 
		 * Optional. At position defines which position on the target control to align the positioned tooltip.
		 * 
		 * Default value is <code>begin bottom</code>.
		 * @return Value of property <code>atPosition</code>
		 */
		 getAtPosition(): sap.ui.core.Dock;
		/**
		 * Gets current value of property <code>closeDelay</code>.
		 * 
		 * Closing delay of the tooltip in milliseconds
		 * 
		 * Default value is <code>100</code>.
		 * @return Value of property <code>closeDelay</code>
		 */
		 getCloseDelay(): number;
		/**
		 * Gets current value of property <code>closeDuration</code>.
		 * 
		 * Optional. Close Duration in milliseconds.
		 * 
		 * Default value is <code>200</code>.
		 * @return Value of property <code>closeDuration</code>
		 */
		 getCloseDuration(): number;
		/**
		 * Gets current value of property <code>collision</code>.
		 * 
		 * Optional. Collision - when the positioned element overflows the window in some direction, move it to an alternative position.
		 * 
		 * Default value is <code>flip</code>.
		 * @return Value of property <code>collision</code>
		 */
		 getCollision(): sap.ui.core.Collision;
		/**
		 * Returns a metadata object for class sap.ui.core.TooltipBase.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Gets current value of property <code>myPosition</code>.
		 * 
		 * Optional. My position defines which position on the extended tooltip being positioned to align with the target control.
		 * 
		 * Default value is <code>begin top</code>.
		 * @return Value of property <code>myPosition</code>
		 */
		 getMyPosition(): sap.ui.core.Dock;
		/**
		 * Gets current value of property <code>offset</code>.
		 * 
		 * Optional. Offset adds these left-top values to the calculated position.
		 * Example: "10 3".
		 * 
		 * Default value is <code>10 3</code>.
		 * @return Value of property <code>offset</code>
		 */
		 getOffset(): string;
		/**
		 * Gets current value of property <code>openDelay</code>.
		 * 
		 * Opening delay of the tooltip in milliseconds
		 * 
		 * Default value is <code>500</code>.
		 * @return Value of property <code>openDelay</code>
		 */
		 getOpenDelay(): number;
		/**
		 * Gets current value of property <code>openDuration</code>.
		 * 
		 * Optional. Open Duration in milliseconds.
		 * 
		 * Default value is <code>200</code>.
		 * @return Value of property <code>openDuration</code>
		 */
		 getOpenDuration(): number;
		/**
		 * Gets current value of property <code>text</code>.
		 * 
		 * The text that is shown in the tooltip that extends the TooltipBase class, for example in RichTooltip.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>text</code>
		 */
		 getText(): string;
		/**
		 * Sets a new value for property <code>atPosition</code>.
		 * 
		 * Optional. At position defines which position on the target control to align the positioned tooltip.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>begin bottom</code>.
		 * @param sAtPosition New value for property <code>atPosition</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setAtPosition(sAtPosition:sap.ui.core.Dock): sap.ui.core.TooltipBase;
		/**
		 * Sets a new value for property <code>closeDelay</code>.
		 * 
		 * Closing delay of the tooltip in milliseconds
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>100</code>.
		 * @param iCloseDelay New value for property <code>closeDelay</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setCloseDelay(iCloseDelay:number): sap.ui.core.TooltipBase;
		/**
		 * Sets a new value for property <code>closeDuration</code>.
		 * 
		 * Optional. Close Duration in milliseconds.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>200</code>.
		 * @param iCloseDuration New value for property <code>closeDuration</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setCloseDuration(iCloseDuration:number): sap.ui.core.TooltipBase;
		/**
		 * Sets a new value for property <code>collision</code>.
		 * 
		 * Optional. Collision - when the positioned element overflows the window in some direction, move it to an alternative position.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>flip</code>.
		 * @param sCollision New value for property <code>collision</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setCollision(sCollision:sap.ui.core.Collision): sap.ui.core.TooltipBase;
		/**
		 * Sets a new value for property <code>myPosition</code>.
		 * 
		 * Optional. My position defines which position on the extended tooltip being positioned to align with the target control.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>begin top</code>.
		 * @param sMyPosition New value for property <code>myPosition</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setMyPosition(sMyPosition:sap.ui.core.Dock): sap.ui.core.TooltipBase;
		/**
		 * Sets a new value for property <code>offset</code>.
		 * 
		 * Optional. Offset adds these left-top values to the calculated position.
		 * Example: "10 3".
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>10 3</code>.
		 * @param sOffset New value for property <code>offset</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setOffset(sOffset:string): sap.ui.core.TooltipBase;
		/**
		 * Sets a new value for property <code>openDelay</code>.
		 * 
		 * Opening delay of the tooltip in milliseconds
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>500</code>.
		 * @param iOpenDelay New value for property <code>openDelay</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setOpenDelay(iOpenDelay:number): sap.ui.core.TooltipBase;
		/**
		 * Sets a new value for property <code>openDuration</code>.
		 * 
		 * Optional. Open Duration in milliseconds.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>200</code>.
		 * @param iOpenDuration New value for property <code>openDuration</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setOpenDuration(iOpenDuration:number): sap.ui.core.TooltipBase;
		/**
		 * Sets a new value for property <code>text</code>.
		 * 
		 * The text that is shown in the tooltip that extends the TooltipBase class, for example in RichTooltip.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sText New value for property <code>text</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setText(sText:string): sap.ui.core.TooltipBase;
	}
	class UIArea extends sap.ui.base.ManagedObject{
		/**
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param oCore internal API of the <core>Core</code> that manages this UIArea
		 * @param oRootNode reference to the Dom Node that should be 'hosting' the UI Area.
		 */
		 constructor(oCore:sap.ui.core.Core, oRootNode?:any);
		/**
		 * Adds some content to the aggregation <code>content</code>.
		 * @param oContent the content to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 addContent(oContent:sap.ui.core.Control): sap.ui.core.UIArea;
		/**
		 * Adds some dependent to the aggregation <code>dependents</code>.
		 * @param oDependent the dependent to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 addDependent(oDependent:sap.ui.core.Control): sap.ui.core.UIArea;
		/**
		 * Destroys all the content in the aggregation <code>content</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 destroyContent(): sap.ui.core.UIArea;
		/**
		 * Destroys all the dependents in the aggregation <code>dependents</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 destroyDependents(): sap.ui.core.UIArea;
		/**
		 * Creates a new subclass of class sap.ui.core.UIArea with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Provide getBindingContext, as UIArea can be parent of an element.
		 * @return Always returns null.
		 */
		protected getBindingContext();
		/**
		 * Gets content of aggregation <code>content</code>.
		 * 
		 * Content that is displayed in the UIArea.
		 * @return 
		 */
		 getContent(): sap.ui.core.Control[];
		/**
		 * Gets content of aggregation <code>dependents</code>.
		 * 
		 * Dependent objects whose lifecycle is bound to the UIarea but which are not automatically rendered by the UIArea.
		 * @return 
		 */
		 getDependents(): sap.ui.core.Control[];
		/**
		 * Returns the Core's event provider as new eventing parent to enable control event bubbling to the core to ensure compatibility with the core validation events.
		 * @return the parent event provider
		 */
		protected getEventingParent(): sap.ui.base.EventProvider;
		/**
		 * Returns this <code>UIArea</code>'s id (as determined from provided RootNode).
		 * @return id of this UIArea
		 */
		 getId(): string;
		/**
		 * Returns a metadata object for class sap.ui.core.UIArea.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Returns the content control of this <code>UIArea</code> at the specified index.
		 * If no index is given the first content control is returned.
		 * @param idx index of the control in the content of this <code>UIArea</code>
		 * @deprecated use function <code>getContent</code> instead
		 * @return the content control of this <code>UIArea</code> at the specified index.
		 */
		 getRootControl(idx:number): sap.ui.core.Control;
		/**
		 * Returns the Root Node hosting this instance of <code>UIArea</code>.
		 * @return the Root Node hosting this instance of <code>UIArea</code>.
		 */
		 getRootNode(): any;
		/**
		 * Returns this UI area. Needed to stop recursive calls from an element to its parent.
		 * @return this
		 */
		protected getUIArea(): sap.ui.core.UIArea;
		/**
		 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oContent The content whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		 indexOfContent(oContent:sap.ui.core.Control): number;
		/**
		 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>dependents</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oDependent The dependent whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		 indexOfDependent(oDependent:sap.ui.core.Control): number;
		/**
		 * Inserts a content into the aggregation <code>content</code>.
		 * @param oContent the content to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the content should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the content is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 insertContent(oContent:sap.ui.core.Control, iIndex:number): sap.ui.core.UIArea;
		/**
		 * Inserts a dependent into the aggregation <code>dependents</code>.
		 * @param oDependent the dependent to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the dependent should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the dependent is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the dependent is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 insertDependent(oDependent:sap.ui.core.Control, iIndex:number): sap.ui.core.UIArea;
		/**
		 * Will be used as end-point for invalidate-bubbling from controls up their hierarchy.<br/> Triggers re-rendering of
		 * the UIAreas content.
		 */
		protected invalidate();
		/**
		 * Checks whether the control is still valid (is in the DOM)
		 * @return True if the control is still in the active DOM
		 */
		protected isActive(): boolean;
		/**
		 * Returns whether rerendering is currently suppressed on this UIArea
		 * @return boolean
		 */
		protected isInvalidateSuppressed();
		/**
		 * Returns the locked state of the <code>sap.ui.core.UIArea</code>
		 * @return locked state
		 */
		 isLocked(): boolean;
		/**
		 * Locks this instance of UIArea.
		 * 
		 * Rerendering and eventing will not be active as long as no
		 * {@link #unlock} is called.
		 */
		 lock();
		/**
		 * Removes all the controls from the aggregation <code>content</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		 removeAllContent(): sap.ui.core.Control[];
		/**
		 * Removes all the controls from the aggregation <code>dependents</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		 removeAllDependents(): sap.ui.core.Control[];
		/**
		 * Removes a content from the aggregation <code>content</code>.
		 * @param vContent The content to remove or its index or id
		 * @return The removed content or <code>null</code>
		 */
		 removeContent(vContent:number|string|sap.ui.core.Control): sap.ui.core.Control;
		/**
		 * Removes a dependent from the aggregation <code>dependents</code>.
		 * @param vDependent The dependent to remove or its index or id
		 * @return The removed dependent or <code>null</code>
		 */
		 removeDependent(vDependent:number|string|sap.ui.core.Control): sap.ui.core.Control;
		/**
		 * Sets the root control to be displayed in this UIArea.
		 * 
		 * First, all old content controls (if any) will be detached from this UIArea (e.g. their parent
		 * relationship to this UIArea will be cut off). Then the parent relationship for the new
		 * content control (if not empty) will be set to this UIArea and finally, the UIArea will
		 * be marked for re-rendering.
		 * 
		 * The real re-rendering happens whenever the re-rendering is called. Either implicitly
		 * at the end of any control event or by calling sap.ui.getCore().applyChanges().
		 * @param oRootControl the Control that should be the Root for this <code>UIArea</code>.
		 * @deprecated use functions <code>removeAllContent</code> and <code>addContent</code> instead
		 */
		 setRootControl(oRootControl:sap.ui.base.Interface|sap.ui.core.Control);
		/**
		 * Allows setting the Root Node hosting this instance of <code>UIArea</code>.<br/> The Dom Ref must have an Id that
		 * will be used as Id for this instance of <code>UIArea</code>.
		 * @param oRootNode the hosting Dom Ref for this instance of <code>UIArea</code>.
		 */
		 setRootNode(oRootNode:any);
		/**
		 * Un-Locks this instance of UIArea.
		 * 
		 * Rerendering and eventing will now be enabled again.
		 */
		 unlock();
	}
	/**
	 * A string type that represents an RFC 3986 conformant URI.
	 */
	type URI = any
	/**
	 * Marker for the correctness of the current value.
	 */
	type ValueState = 
	/**
	 * Marker for the correctness of the current value.
	 */
	"Error" |
	/**
	 * Marker for the correctness of the current value.
	 */
	"None" |
	/**
	 * Marker for the correctness of the current value.
	 */
	"Success" |
	/**
	 * Marker for the correctness of the current value.
	 */
	"Warning";
	/**
	 * Helper functionality for value state support.
	 */
	namespace ValueStateSupport {
		/**
		 * Appends a generic success, warning or error message to the given tooltip text if the given Element
		 * has a property "valueState" with one of these three states.
		 * @param oElement the Element of which the tooltip needs to be modified
		 * @param sTooltipText the original tooltip text (may be null)
		 * @return the given text, with appended success/warning/error text, if appropriate
		 */
		function enrichTooltip(oElement:sap.ui.core.Element, sTooltipText:string): string;
		/**
		 * Returns a generic success, warning or error message if the given Element
		 * has a property "valueState" with one of these three states or the given ValueState
		 * represents one of these states.
		 * @param vValue the Element of which the valueState needs to be checked, or the ValueState explicitly
		 * @return the success/warning/error text, if appropriate; otherwise null
		 */
		function getAdditionalText(vValue:sap.ui.core.Element|sap.ui.core.ValueState): string;
	}
	/**
	 * Configuration options for vertical alignments, for example of a layout cell content within the borders.
	 */
	type VerticalAlign = 
	/**
	 * Configuration options for vertical alignments, for example of a layout cell content within the borders.
	 */
	"Bottom" |
	/**
	 * Configuration options for vertical alignments, for example of a layout cell content within the borders.
	 */
	"Inherit" |
	/**
	 * Configuration options for vertical alignments, for example of a layout cell content within the borders.
	 */
	"Middle" |
	/**
	 * Configuration options for vertical alignments, for example of a layout cell content within the borders.
	 */
	"Top";
	/**
	 * Configuration options for text wrapping.
	 */
	type Wrapping = 
	/**
	 * Configuration options for text wrapping.
	 */
	"Hard" |
	/**
	 * Configuration options for text wrapping.
	 */
	"None" |
	/**
	 * Configuration options for text wrapping.
	 */
	"Off" |
	/**
	 * Configuration options for text wrapping.
	 */
	"Soft";
}

declare namespace sap.ui.core.Configuration {
	class FormatSettings extends sap.ui.base.Object{
		/**
		 * 
		 */
		 constructor();
		/**
		 * Creates a new subclass of class sap.ui.core.Configuration.FormatSettings with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns the currently set date pattern or undefined if no pattern has been defined.
		 */
		 getDatePattern();
		/**
		 * Returns the locale to be used for formatting.
		 * 
		 * If no such locale has been defined, this method falls back to the language,
		 * see {@link sap.ui.core.Configuration#getLanguage Configuration.getLanguage()}.
		 * 
		 * If any user preferences for date, time or number formatting have been set,
		 * and if no format locale has been specified, then a special private use subtag
		 * is added to the locale, indicating to the framework that these user preferences
		 * should be applied.
		 * @return the format locale
		 */
		 getFormatLocale(): sap.ui.core.Locale;
		/**
		 * Returns the currently set customizing data for Islamic calendar support
		 * @return Returns an array contains the customizing data. Each element in the array has properties: dateFormat, islamicMonthStart, gregDate. For details, please see {@link #setLegacyDateCalendarCustomizing}
		 */
		 getLegacyDateCalendarCustomizing(): any[];
		/**
		 * Returns the currently set legacy ABAP date format (its id) or undefined if none has been set.
		 */
		 getLegacyDateFormat();
		/**
		 * Returns the currently set legacy ABAP number format (its id) or undefined if none has been set.
		 */
		 getLegacyNumberFormat();
		/**
		 * Returns the currently set legacy ABAP time format (its id) or undefined if none has been set.
		 */
		 getLegacyTimeFormat();
		/**
		 * Returns a metadata object for class sap.ui.core.Configuration.FormatSettings.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Returns the currently set number symbol of the given type or undefined if no symbol has been defined.
		 */
		 getNumberSymbol();
		/**
		 * Returns the currently set time pattern or undefined if no pattern has been defined.
		 */
		 getTimePattern();
		/**
		 * Defines the preferred format pattern for the given date format style.
		 * Calling this method with a null or undefined pattern removes a previously set pattern.
		 * 
		 * If a pattern is defined, it will be preferred over patterns derived from the current locale.
		 * 
		 * See class {@link sap.ui.core.format.DateFormat} for details about the pattern syntax.
		 * 
		 * After changing the date pattern, the framework tries to update localization
		 * specific parts of the UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage}
		 * for details and restrictions.
		 * @param sStyle must be one of short, medium, long or full.
		 * @param sPattern the format pattern to be used in LDML syntax.
		 * @return Returns <code>this</code> to allow method chaining
		 */
		 setDatePattern(sStyle:string, sPattern:string): sap.ui.core.Configuration.FormatSettings;
		/**
		 * Defines the day used as the first day of the week.
		 * The day is set as an integer value between 0 (Sunday) and 6 (Saturday).
		 * Calling this method with a null or undefined symbol removes a previously set value.
		 * 
		 * If a value is defined, it will be preferred over values derived from the current locale.
		 * 
		 * Usually in the US the week starts on Sunday while in most European countries on Monday.
		 * There are special cases where you want to have the first day of week set independent of the
		 * user locale.
		 * 
		 * After changing the first day of week, the framework tries to update localization
		 * specific parts of the UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage}
		 * for details and restrictions.
		 * @param iValue must be an integer value between 0 and 6
		 * @return Returns <code>this</code> to allow method chaining
		 */
		 setFirstDayOfWeek(iValue:number): sap.ui.core.Configuration.FormatSettings;
		/**
		 * Allows to specify the customizing data for Islamic calendar support
		 * @param aMappings contains the customizing data for the support of Islamic calendar.
		 * @return Returns <code>this</code> to allow method chaining
		 */
		 setLegacyDateCalendarCustomizing(aMappings:any[]): sap.ui.core.Configuration.FormatSettings;
		/**
		 * Allows to specify one of the legacy ABAP date formats.
		 * 
		 * This method modifies the date patterns for 'short' and 'medium' style with the corresponding ABAP
		 * format. When called with a null or undefined format id, any previously applied format will be removed.
		 * 
		 * After changing the legacy date format, the framework tries to update localization
		 * specific parts of the UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage}
		 * for details and restrictions.
		 * 
		 * Note: Iranian date format 'C' is NOT yet supported by UI5. It's accepted by this method for convenience
		 * (user settings from ABAP system can be used without filtering), but it's ignored. Instead, the formats
		 * from the current format locale will be used and a warning will be logged.
		 * @param sFormatId id of the ABAP data format (one of '1','2','3','4','5','6','7','8','9','A','B','C')
		 * @return Returns <code>this</code> to allow method chaining
		 */
		 setLegacyDateFormat(sFormatId:string): sap.ui.core.Configuration.FormatSettings;
		/**
		 * Allows to specify one of the legacy ABAP number format.
		 * 
		 * This method will modify the 'group' and 'decimal' symbols. When called with a null
		 * or undefined format id, any previously applied format will be removed.
		 * 
		 * After changing the legacy number format, the framework tries to update localization
		 * specific parts of the UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage}
		 * for details and restrictions.
		 * @param sFormatId id of the ABAP number format set (one of ' ','X','Y')
		 * @return Returns <code>this</code> to allow method chaining
		 */
		 setLegacyNumberFormat(sFormatId:string): sap.ui.core.Configuration.FormatSettings;
		/**
		 * Allows to specify one of the legacy ABAP time formats.
		 * 
		 * This method sets the time patterns for 'short' and 'medium' style to the corresponding ABAP
		 * formats and sets the day period texts to "AM"/"PM" or "am"/"pm" respectively. When called
		 * with a null or undefined format id, any previously applied format will be removed.
		 * 
		 * After changing the legacy time format, the framework tries to update localization
		 * specific parts of the UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage}
		 * for details and restrictions.
		 * @param sFormatId id of the ABAP time format (one of '0','1','2','3','4')
		 * @return Returns <code>this</code> to allow method chaining
		 */
		 setLegacyTimeFormat(sFormatId:string): sap.ui.core.Configuration.FormatSettings;
		/**
		 * Defines the string to be used for the given number symbol.
		 * Calling this method with a null or undefined symbol removes a previously set symbol string.
		 * Note that an empty string is explicitly allowed.
		 * 
		 * If a symbol is defined, it will be preferred over symbols derived from the current locale.
		 * 
		 * See class {@link sap.ui.core.format.NumberFormat} for details about the symbols.
		 * 
		 * After changing the number symbol, the framework tries to update localization
		 * specific parts of the UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage}
		 * for details and restrictions.
		 * @param sStyle must be one of decimal, group, plusSign, minusSign.
		 * @param sSymbol will be used to represent the given symbol type
		 * @return Returns <code>this</code> to allow method chaining
		 */
		 setNumberSymbol(sStyle:string, sSymbol:string): sap.ui.core.Configuration.FormatSettings;
		/**
		 * Defines the preferred format pattern for the given time format style.
		 * Calling this method with a null or undefined pattern removes a previously set pattern.
		 * 
		 * If a pattern is defined, it will be preferred over patterns derived from the current locale.
		 * 
		 * See class {@link sap.ui.core.format.DateFormat} for details about the pattern syntax.
		 * 
		 * After changing the time pattern, the framework tries to update localization
		 * specific parts of the UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage}
		 * for details and restrictions.
		 * @param sStyle must be one of short, medium, long or full.
		 * @param sPattern the format pattern to be used in LDML syntax.
		 * @return Returns <code>this</code> to allow method chaining
		 */
		 setTimePattern(sStyle:string, sPattern:string): sap.ui.core.Configuration.FormatSettings;
	}
}

declare namespace sap.ui.core.delegate {
	class ItemNavigation extends sap.ui.base.EventProvider{
		/**
		 * Creates an <code>ItemNavigation</code> delegate that can be attached to controls requiring
		 * capabilities for keyboard navigation between items.
		 * @param oDomRef The root DOM reference that includes all items
		 * @param aItemDomRefs Array of DOM references representing the items for the navigation
		 * @param bNotInTabChain Whether the selected element should be in the tab chain or not
		 */
		 constructor(oDomRef:any, aItemDomRefs:any[], bNotInTabChain?:boolean);
		/**
		 * Creates a new subclass of class sap.ui.core.delegate.ItemNavigation with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns disabled modifiers
		 * These modifiers will not be handled by the <code>ItemNavigation</code>
		 * @param oDisabledModifiers Object that includes event type with disabled keys as an array
		 * @return Object that includes event type with disabled keys as an array
		 */
		 getDisabledModifiers(oDisabledModifiers:any): any;
		/**
		 * Returns the array of item DOM references
		 * @return Array of item DOM references
		 */
		 getItemDomRefs(): any[];
		/**
		 * Returns a metadata object for class sap.ui.core.delegate.ItemNavigation.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Returns the root DOM reference surrounding the items
		 * @return Root DOM reference
		 */
		 getRootDomRef(): any;
		/**
		 * Check whether given event has disabled modifier or not
		 * @param oEvent jQuery event
		 * @return Flag if disabled modifiers are set
		 */
		 hasDisabledModifier(oEvent:jQuery.Event): boolean;
		/**
		 * Sets whether the items are displayed in columns.
		 * 
		 * If columns are used, the Arrow Up and Arrow Down keys navigate to the next or previous
		 * item of the column. If the first or last item of the column is reached, the next focused
		 * item is then in the next or previous column.
		 * @param iColumns Count of columns for the table mode or cycling mode
		 * @param bNoColumnChange Forbids jumping to an other column with Arrow Up and Arrow Down keys
		 * @return <code>this</code> to allow method chaining
		 */
		 setColumns(iColumns:number, bNoColumnChange:boolean): sap.ui.core.delegate.ItemNavigation;
		/**
		 * Sets whether the <code>ItemNavigation</code> should cycle through the items.
		 * 
		 * If cycling is disabled the navigation stops at the first and last item, if the corresponding arrow keys are used.
		 * @param bCycling Set to true if cycling should be done, else false
		 * @return <code>this</code> to allow method chaining
		 */
		 setCycling(bCycling:boolean): sap.ui.core.delegate.ItemNavigation;
		/**
		 * Sets the disabled modifiers
		 * These modifiers will not be handled by the <code>ItemNavigation</code>
		 * 
		 * <pre>
		 * Example: Disable shift + up handling of the <code>ItemNavigation</code>
		 * 
		 * oItemNavigation.setDisabledModifiers({
		 *     sapnext : ["shift"]
		 * });
		 * 
		 * Possible keys are : "shift", "alt", "ctrl", "meta"
		 * Possible events are : "sapnext", "sapprevious", "saphome", "sapend"
		 * </pre>
		 * @param oDisabledModifiers Object that includes event type with disabled keys as an array
		 * @return <code>this</code> to allow method chaining
		 */
		 setDisabledModifiers(oDisabledModifiers:any): sap.ui.core.delegate.ItemNavigation;
		/**
		 * Sets behavior of HOME and END keys if columns are used.
		 * @param bStayInRow HOME -> go to first item in row; END -> go to last item in row
		 * @param bCtrlEnabled HOME/END with CTRL -> go to first/last item of all
		 * @return <code>this</code> to allow method chaining
		 */
		 setHomeEndColumnMode(bStayInRow:boolean, bCtrlEnabled:boolean): sap.ui.core.delegate.ItemNavigation;
		/**
		 * Sets the item DOM references as an array for the items
		 * @param aItemDomRefs Array of DOM references representing the items
		 * @return <code>this</code> to allow method chaining
		 */
		 setItemDomRefs(aItemDomRefs:any[]): sap.ui.core.delegate.ItemNavigation;
		/**
		 * Sets the page size of the item navigation to allow Page Up and Page Down keys.
		 * @param iPageSize The page size, needs to be at least 1
		 * @return <code>this</code> to allow method chaining
		 */
		 setPageSize(iPageSize:number): sap.ui.core.delegate.ItemNavigation;
		/**
		 * Sets the root DOM reference surrounding the items
		 * @param oDomRef Root DOM reference
		 * @return <code>this</code> to allow method chaining
		 */
		 setRootDomRef(oDomRef:any): sap.ui.core.delegate.ItemNavigation;
		/**
		 * Sets the selected index if the used control supports selection.
		 * @param iIndex Index of the first selected item
		 * @return <code>this</code> to allow method chaining
		 */
		 setSelectedIndex(iIndex:number): sap.ui.core.delegate.ItemNavigation;
		/**
		 * Sets whether the <code>ItemNavigation</code> should use the table mode to navigate through
		 * the items (navigation in a grid).
		 * @param bTableMode Set to true if table mode should be used, else false
		 * @param bTableList This sets a different behavior for table mode.
		 * In this mode we keep using table navigation but there are some differences. e.g.
		 * <ul>
		 * 	<li>Page-up moves focus to the first row, not to the first cell like in table mode</li>
		 * 	<li>Page-down moves focus to the last row, not to the last cell like in table mode</li>
		 * </ul>
		 * @return <code>this</code> to allow method chaining
		 */
		 setTableMode(bTableMode:boolean, bTableList?:boolean): sap.ui.core.delegate.ItemNavigation;
	}
	class ScrollEnablement extends sap.ui.base.Object{
		/**
		 * Destroys this Scrolling delegate.
		 * 
		 * This function must be called by the control which uses this delegate in the <code>exit</code> function.
		 */
		protected destroy();
		/**
		 * Creates a new subclass of class sap.ui.core.delegate.ScrollEnablement with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Calculates scroll position of a child of a container.
		 * @param vElement An element(DOM or jQuery) for which the scroll position will be calculated.
		 * @return Position object.
		 */
		protected getChildPosition(vElement:any|any): any;
		/**
		 * Returns a metadata object for class sap.ui.core.delegate.ScrollEnablement.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Refreshes this Scrolling delegate.
		 */
		protected refresh();
		/**
		 * Scrolls to an element within a container.
		 * @param oElement A DOM element.
		 * @param iTime The duration of animated scrolling in milliseconds. To scroll immediately without animation, give 0 as value.
		 * @return 
		 */
		protected scrollToElement(oElement:any, iTime?:number): sap.ui.core.delegate.ScrollEnablement;
		/**
		 * Enable or disable horizontal scrolling.
		 * @param bHorizontal set true to enable horizontal scrolling, false - to disable
		 */
		protected setHorizontal(bHorizontal:boolean);
		/**
		 * Enable or disable vertical scrolling.
		 * @param bVertical set true to enable vertical scrolling, false - to disable
		 */
		protected setVertical(bVertical:boolean);
	}
}

declare namespace sap.ui.core.format {
	class DateFormat {
		/**
		 * Constructor for DateFormat - must not be used: To get a DateFormat instance, please use getInstance, getDateTimeInstance or getTimeInstance.
		 */
		 constructor();
		/**
		 * Format a date according to the given format options.
		 * @param oDate the value to format
		 * @param bUTC whether to use UTC
		 * @return the formatted output value. If an invalid date is given, an empty string is returned.
		 */
		 format(oDate:any, bUTC:boolean): string;
		/**
		 * Get a date instance of the DateFormat, which can be used for formatting.
		 * @param oFormatOptions Object which defines the format options
		 * @param oLocale Locale to ask for locale specific texts/settings
		 * @return date instance of the DateFormat
		 */
		 getDateInstance(oFormatOptions?:any, oLocale?:sap.ui.core.Locale): sap.ui.core.format.DateFormat;
		/**
		 * Get a datetime instance of the DateFormat, which can be used for formatting.
		 * @param oFormatOptions Object which defines the format options
		 * @param oLocale Locale to ask for locale specific texts/settings
		 * @return datetime instance of the DateFormat
		 */
		 getDateTimeInstance(oFormatOptions?:any, oLocale?:sap.ui.core.Locale): sap.ui.core.format.DateFormat;
		/**
		 * Get a time instance of the DateFormat, which can be used for formatting.
		 * @param oFormatOptions Object which defines the format options
		 * @param oLocale Locale to ask for locale specific texts/settings
		 * @return time instance of the DateFormat
		 */
		 getTimeInstance(oFormatOptions?:any, oLocale?:sap.ui.core.Locale): sap.ui.core.format.DateFormat;
		/**
		 * Parse a string which is formatted according to the given format options.
		 * @param sValue the string containing a formatted date/time value
		 * @param bUTC whether to use UTC, if no timezone is contained
		 * @param bStrict to use strict value check
		 * @return the parsed value
		 */
		 parse(sValue:string, bUTC:boolean, bStrict:boolean): any;
	}
	class FileSizeFormat extends sap.ui.base.Object{
		/**
		 * Constructor for FileSizeFormat - must not be used: To get a FileSizeFormat instance, please use getInstance.
		 */
		 constructor();
		/**
		 * Creates a new subclass of class sap.ui.core.format.FileSizeFormat with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Format a filesize (in bytes) according to the given format options.
		 * @param oValue the number (or hex string) to format
		 * @return the formatted output value
		 */
		 format(oValue:number|string): string;
		/**
		 * Get an instance of the FileSizeFormat, which can be used for formatting.
		 * 
		 * If no locale is given, the currently configured
		 * {@link sap.ui.core.Configuration.FormatSettings#getFormatLocale formatLocale} will be used.
		 * @param oFormatOptions Object which defines the format options
		 * @param oLocale Locale to get the formatter for
		 * @return instance of the FileSizeFormat
		 */
		 getInstance(oFormatOptions?:any, oLocale?:sap.ui.core.Locale): sap.ui.core.format.FileSizeFormat;
		/**
		 * Returns a metadata object for class sap.ui.core.format.FileSizeFormat.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Parse a string which is formatted according to the given format options.
		 * @param sValue the string containing a formatted filesize value
		 * @return the parsed value in bytes
		 */
		 parse(sValue:string): number;
	}
	class NumberFormat extends sap.ui.base.Object{
		/**
		 * Constructor for NumberFormat - must not be used: To get a NumberFormat instance, please use getInstance, getFloatInstance or getIntegerInstance.
		 * @param oFormatOptions The option object which support the following parameters. If no options is given, default values according to the type and locale settings are used.
		 */
		 constructor(oFormatOptions?:any);
		/**
		 * Creates a new subclass of class sap.ui.core.format.NumberFormat with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Format a number according to the given format options.
		 * @param oValue the number to format or an array which contains the number to format and the sMeasure parameter
		 * @param sMeasure a measure which has an impact on the formatting
		 * @return the formatted output value
		 */
		 format(oValue:number|any[], sMeasure?:string): string;
		/**
		 * Get a currency instance of the NumberFormat, which can be used for formatting.
		 * 
		 * If no locale is given, the currently configured
		 * {@link sap.ui.core.Configuration.FormatSettings#getFormatLocale formatLocale} will be used.
		 * 
		 * <p>
		 * This instance has HALF_AWAY_FROM_ZERO set as default rounding mode.
		 * Please set the roundingMode property in oFormatOptions to change the
		 * default value.
		 * </p>
		 * @param oFormatOptions Object which defines the format options
		 * @param oLocale Locale to get the formatter for
		 * @return integer instance of the NumberFormat
		 */
		 getCurrencyInstance(oFormatOptions?:any, oLocale?:sap.ui.core.Locale): sap.ui.core.format.NumberFormat;
		/**
		 * Get a float instance of the NumberFormat, which can be used for formatting.
		 * 
		 * If no locale is given, the currently configured
		 * {@link sap.ui.core.Configuration.FormatSettings#getFormatLocale formatLocale} will be used.
		 * 
		 * <p>
		 * This instance has HALF_AWAY_FROM_ZERO set as default rounding mode.
		 * Please set the roundingMode property in oFormatOptions to change the
		 * default value.
		 * </p>
		 * @param oFormatOptions Object which defines the format options
		 * @param oLocale Locale to get the formatter for
		 * @return float instance of the NumberFormat
		 */
		 getFloatInstance(oFormatOptions?:any, oLocale?:sap.ui.core.Locale): sap.ui.core.format.NumberFormat;
		/**
		 * Get an integer instance of the NumberFormat, which can be used for formatting.
		 * 
		 * If no locale is given, the currently configured
		 * {@link sap.ui.core.Configuration.FormatSettings#getFormatLocale formatLocale} will be used.
		 * 
		 * <p>
		 * This instance has TOWARDS_ZERO set as default rounding mode.
		 * Please set the roundingMode property in oFormatOptions to change the
		 * default value.
		 * </p>
		 * @param oFormatOptions Object which defines the format options
		 * @param oLocale Locale to get the formatter for
		 * @return integer instance of the NumberFormat
		 */
		 getIntegerInstance(oFormatOptions?:any, oLocale?:sap.ui.core.Locale): sap.ui.core.format.NumberFormat;
		/**
		 * Returns a metadata object for class sap.ui.core.format.NumberFormat.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Get a percent instance of the NumberFormat, which can be used for formatting.
		 * 
		 * If no locale is given, the currently configured
		 * {@link sap.ui.core.Configuration.FormatSettings#getFormatLocale formatLocale} will be used.
		 * 
		 * <p>
		 * This instance has HALF_AWAY_FROM_ZERO set as default rounding mode.
		 * Please set the roundingMode property in oFormatOptions to change the
		 * default value.
		 * </p>
		 * @param oFormatOptions Object which defines the format options
		 * @param oLocale Locale to get the formatter for
		 * @return integer instance of the NumberFormat
		 */
		 getPercentInstance(oFormatOptions?:any, oLocale?:sap.ui.core.Locale): sap.ui.core.format.NumberFormat;
		/**
		 * Parse a string which is formatted according to the given format options.
		 * @param sValue the string containing a formatted numeric value
		 * @return the parsed value or an array which contains the parsed value and the currency code (symbol) when the NumberFormat is a currency instance
		 */
		 parse(sValue:string): number|any[];
	}
}

declare namespace sap.ui.core.format.NumberFormat {
	/**
	 * Specifies a rounding behavior for numerical operations capable of discarding precision. Each rounding mode in this object indicates how the least
	 * significant returned digits of rounded result is to be calculated.
	 */
	type RoundingMode = 
	/**
	 * Specifies a rounding behavior for numerical operations capable of discarding precision. Each rounding mode in this object indicates how the least
	 * significant returned digits of rounded result is to be calculated.
	 */
	"AWAY_FROM_ZERO" |
	/**
	 * Specifies a rounding behavior for numerical operations capable of discarding precision. Each rounding mode in this object indicates how the least
	 * significant returned digits of rounded result is to be calculated.
	 */
	"CEILING" |
	/**
	 * Specifies a rounding behavior for numerical operations capable of discarding precision. Each rounding mode in this object indicates how the least
	 * significant returned digits of rounded result is to be calculated.
	 */
	"FLOOR" |
	/**
	 * Specifies a rounding behavior for numerical operations capable of discarding precision. Each rounding mode in this object indicates how the least
	 * significant returned digits of rounded result is to be calculated.
	 */
	"HALF_AWAY_FROM_ZERO" |
	/**
	 * Specifies a rounding behavior for numerical operations capable of discarding precision. Each rounding mode in this object indicates how the least
	 * significant returned digits of rounded result is to be calculated.
	 */
	"HALF_CEILING" |
	/**
	 * Specifies a rounding behavior for numerical operations capable of discarding precision. Each rounding mode in this object indicates how the least
	 * significant returned digits of rounded result is to be calculated.
	 */
	"HALF_FLOOR" |
	/**
	 * Specifies a rounding behavior for numerical operations capable of discarding precision. Each rounding mode in this object indicates how the least
	 * significant returned digits of rounded result is to be calculated.
	 */
	"HALF_TOWARDS_ZERO" |
	/**
	 * Specifies a rounding behavior for numerical operations capable of discarding precision. Each rounding mode in this object indicates how the least
	 * significant returned digits of rounded result is to be calculated.
	 */
	"TOWARDS_ZERO";
}

declare namespace sap.ui.core.message {
	class ControlMessageProcessor extends sap.ui.core.message.MessageProcessor{
		/**
		 * Constructor for a new ControlMessageProcessor
		 */
		 constructor();
		/**
		 * Check Messages and update controls with messages
		 */
		protected checkMessages();
		/**
		 * Creates a new subclass of class sap.ui.core.message.ControlMessageProcessor with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.message.MessageProcessor.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.core.message.ControlMessageProcessor.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Set Messages to check
		 * @param vMessages map of messages: {'target': [array of messages],...}
		 */
		protected setMessages(vMessages:any);
	}
	class Message extends sap.ui.base.Object{
		/**
		 * Constructor for a new Message.
		 * @param mParameters (optional) a map which contains the following parameter properties:
		 */
		 constructor(mParameters?:any);
		/**
		 * Creates a new subclass of class sap.ui.core.message.Message with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.core.message.Message.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
	}
	class MessageManager extends sap.ui.base.EventProvider{
		/**
		 * Constructor for a new MessageManager.
		 */
		 constructor();
		/**
		 * Add messages to MessageManager
		 * @param vMessages Array of sap.ui.core.message.Message or single sap.ui.core.message.Message
		 */
		 addMessages(vMessages:sap.ui.core.message.Message|sap.ui.core.message.Message[]);
		/**
		 * destroy MessageManager
		 * @deprecated 
		 */
		 destroy();
		/**
		 * Creates a new subclass of class sap.ui.core.message.MessageManager with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Get the MessageModel
		 * @return oMessageModel The Message Model
		 */
		 getMessageModel(): sap.ui.core.message.MessageModel;
		/**
		 * Returns a metadata object for class sap.ui.core.message.MessageManager.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Register MessageProcessor
		 * @param oProcessor The MessageProcessor
		 */
		 registerMessageProcessor(oProcessor:sap.ui.core.message.MessageProcessor);
		/**
		 * Register ManagedObject: Validation and Parse errors are handled by the MessageManager for this object
		 * @param oObject The sap.ui.base.ManageObject
		 * @param bHandleValidation Handle validation for this object. If set to true validation/parse events creates Messages and cancel event.
		 * 					If set to false only the event will be canceled, but no messages will be created
		 */
		 registerObject(oObject:sap.ui.base.ManageObject, bHandleValidation:boolean);
		/**
		 * Remove all messages
		 */
		 removeAllMessages();
		/**
		 * Remove given Messages
		 * @param vMessages The message(s) to be removed.
		 */
		 removeMessages(vMessages:sap.ui.core.message.Message|sap.ui.core.message.Message[]);
		/**
		 * Deregister MessageProcessor
		 * @param oProcessor The MessageProcessor
		 */
		 unregisterMessageProcessor(oProcessor:sap.ui.core.message.MessageProcessor);
		/**
		 * Unregister ManagedObject
		 * @param oObject The sap.ui.base.ManageObject
		 */
		 unregisterObject(oObject:sap.ui.base.ManageObject);
	}
	class MessageParser extends sap.ui.base.Object{
		/**
		 * Abstract MessageParser class to be inherited in back-end specific implementations.
		 */
		 constructor();
		/**
		 * Creates a new subclass of class sap.ui.core.message.MessageParser with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.core.message.MessageParser.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Returns the registered processor on which the events for message handling can be fired
		 * @return The currently set MessageProcessor or null if none is set
		 */
		protected getProcessor(): sap.ui.message.MessageProcessor;
		/**
		 * Abstract parse method must be implemented in the inheriting class.
		 */
		 parse();
		/**
		 * This method is used by the model to register itself as MessageProcessor for this parser
		 * @param oProcessor The MessageProcessor that can be used to fire events
		 * @return Instance reference for method chaining
		 */
		protected setProcessor(oProcessor:sap.ui.message.MessageProcessor): sap.ui.message.MessagePaser;
	}
	class MessageProcessor extends sap.ui.base.EventProvider{
		/**
		 * Constructor for a new MessageProcessor
		 */
		 constructor();
		/**
		 * Attach event-handler <code>fnFunction</code> to the 'messageChange' event of this <code>sap.ui.core.message.MessageProcessor</code>.<br/>
		 * @param fnFunction The function to call, when the event occurs. This function will be called on the
		 *            oListener-instance (if present) or in a 'static way'.
		 * @param oData The object, that should be passed along with the event-object when firing the event.
		 * @param oListener Object on which to call the given function. If empty, this MessageProcessor is used.
		 * @return <code>this</code> to allow method chaining
		 */
		 attachMessageChange(fnFunction:any, oData?:any, oListener?:any): sap.ui.core.message.MessageProcessor;
		/**
		 * Implement in inheriting classes
		 * @return 
		 */
		 checkMessage(): sap.ui.model.ListBinding;
		/**
		 * Destroys the MessageProcessor Instance
		 */
		 destroy();
		/**
		 * Detach event-handler <code>fnFunction</code> from the 'sap.ui.core.message.MessageProcessor' event of this <code>sap.ui.core.message.MessageProcessor</code>.<br/>
		 * 
		 * The passed function and listener object must match the ones previously used for event registration.
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener Object on which the given function had to be called.
		 * @return <code>this</code> to allow method chaining
		 */
		 detachMessageChange(fnFunction:any, oListener:any): sap.ui.core.message.MessageProcessor;
		/**
		 * Creates a new subclass of class sap.ui.core.message.MessageProcessor with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Fire event messageChange to attached listeners.
		 * @param mArguments the arguments to pass along with the event.
		 * @return <code>this</code> to allow method chaining
		 */
		protected fireMessageChange(mArguments?:any): sap.ui.core.message.MessageProcessor;
		/**
		 * Returns the ID of the MessageProcessor instance
		 * @return sId The MessageProcessor ID
		 */
		 getId(): string;
		/**
		 * Returns a metadata object for class sap.ui.core.message.MessageProcessor.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Implement in inheriting classes
		 * @param vMessages map of messages: {'target': [array of messages],...}
		 */
		 setMessages(vMessages:any);
	}
}

declare namespace sap.ui.core.mvc {
	class Controller extends sap.ui.base.EventProvider{
		/**
		 * Instantiates a (MVC-style) controller. Consumers should call the constructor only in the
		 * typed controller scenario. In the generic controller use case, they should use
		 * {@link sap.ui.controller} instead.
		 * @param sName The name of the controller to instantiate. If a controller is defined as real sub-class,
		 *                                   the "arguments" of the sub-class constructor should be given instead.
		 */
		 constructor(sName:string|any[]);
		/**
		 * Returns an Element of the connected view with the given local ID.
		 * 
		 * Views automatically prepend their own ID as a prefix to created Elements
		 * to make the IDs unique even in the case of multiple view instances.
		 * This method helps to find an element by its local ID only.
		 * 
		 * If no view is connected or if the view doesn't contain an element with
		 * the given local ID, undefined is returned.
		 * @param sId View-local ID
		 * @return Element by its (view local) ID
		 */
		 byId(sId:string): sap.ui.core.Element;
		/**
		 * Converts a view local ID to a globally unique one by prepending
		 * the view ID.
		 * 
		 * If no view is connected, undefined is returned.
		 * @param sId View-local ID
		 * @return Prefixed ID
		 */
		 createId(sId:string): string;
		/**
		 * Creates a new subclass of class sap.ui.core.mvc.Controller with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.core.mvc.Controller.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Returns the view associated with this controller or undefined.
		 * @return View connected to this controller.
		 */
		 getView(): sap.ui.core.mvc.View;
		/**
		 * This method is called every time the View is rendered, after the HTML is placed in the DOM-Tree. It can be
		 * used to apply additional changes to the DOM after the Renderer has finished.
		 * (Even though this method is declared as "abstract", it does not need to be defined in controllers, if the
		 * method does not exist, it will simply not be called.)
		 */
		protected onAfterRendering();
		/**
		 * This method is called every time the View is rendered, before the Renderer is called and the HTML is placed in
		 * the DOM-Tree. It can be used to perform clean-up-tasks before re-rendering.
		 * (Even though this method is declared as "abstract", it does not need to be defined in controllers, if the
		 * method does not exist, it will simply not be called.)
		 */
		protected onBeforeRendering();
		/**
		 * This method is called upon desctuction of the View. The controller should perform its internal destruction in
		 * this hook. It is only called once per View instance, unlike the onBeforeRendering and onAfterRendering
		 * hooks.
		 * (Even though this method is declared as "abstract", it does not need to be defined in controllers, if the
		 * method does not exist, it will simply not be called.)
		 */
		protected onExit();
		/**
		 * This method is called upon initialization of the View. The controller can perform its internal setup in
		 * this hook. It is only called once per View instance, unlike the onBeforeRendering and onAfterRendering
		 * hooks.
		 * (Even though this method is declared as "abstract", it does not need to be defined in controllers, if the
		 * method does not exist, it will simply not be called.)
		 */
		protected onInit();
	}
	class JSONView extends sap.ui.core.mvc.View{
		/**
		 * Constructor for a new mvc/JSONView.
		 * @param sId id for the new control, generated automatically if no id is given
		 * @param mSettings initial settings for the new control
		 */
		 constructor(sId?:string, mSettings?:any);
		/**
		 * Creates a new subclass of class sap.ui.core.mvc.JSONView with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.mvc.View.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.core.mvc.JSONView.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
	}
	class JSView extends sap.ui.core.mvc.View{
		/**
		 * Constructor for a new mvc/JSView.
		 * @param sId id for the new control, generated automatically if no id is given
		 * @param mSettings initial settings for the new control
		 */
		 constructor(sId?:string, mSettings?:any);
		/**
		 * A method to be implemented by JSViews, returning the View UI.
		 * While for declarative View types like XMLView or JSONView the user interface definition is declared in a separate file,
		 * JSViews programmatically construct the UI. This happens in the createContent method which every JSView needs to implement.
		 * The View implementation can construct the complete UI in this method - or only return the root control and create the rest of the UI lazily later on.
		 * @return a control or (typically) tree of controls representing the View user interface
		 */
		 createContent(): sap.ui.core.Control;
		/**
		 * Creates a new subclass of class sap.ui.core.mvc.JSView with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.mvc.View.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.core.mvc.JSView.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
	}
	class View extends sap.ui.core.Control{
		/**
		 * Constructor for a new View.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given
		 * @param mSettings initial settings for the new control
		 */
		 constructor(sId?:string, mSettings?:any);
		/**
		 * Adds some content to the aggregation <code>content</code>.
		 * @param oContent the content to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 addContent(oContent:sap.ui.core.Control): sap.ui.core.mvc.View;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>afterInit</code> event of this <code>sap.ui.core.mvc.View</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.ui.core.mvc.View</code> itself.
		 * 
		 * Fired when the View has parsed the UI description and instantiated the contained controls (/control tree).
		 * @param fnFunction The function to be called when the event occurs
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.core.mvc.View</code> itself
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 attachAfterInit(fnFunction:any, oData?:any, oListener?:any): sap.ui.core.mvc.View;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>afterRendering</code> event of this <code>sap.ui.core.mvc.View</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.ui.core.mvc.View</code> itself.
		 * 
		 * Fired when the View has been (re-)rendered and its HTML is present in the DOM.
		 * @param fnFunction The function to be called when the event occurs
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.core.mvc.View</code> itself
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 attachAfterRendering(fnFunction:any, oData?:any, oListener?:any): sap.ui.core.mvc.View;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>beforeExit</code> event of this <code>sap.ui.core.mvc.View</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.ui.core.mvc.View</code> itself.
		 * 
		 * Fired when the view has received the request to destroy itself, but before it has destroyed anything.
		 * @param fnFunction The function to be called when the event occurs
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.core.mvc.View</code> itself
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 attachBeforeExit(fnFunction:any, oData?:any, oListener?:any): sap.ui.core.mvc.View;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>beforeRendering</code> event of this <code>sap.ui.core.mvc.View</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.ui.core.mvc.View</code> itself.
		 * 
		 * Fired before this View is re-rendered. Use to unbind event handlers from HTML elements etc.
		 * @param fnFunction The function to be called when the event occurs
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.core.mvc.View</code> itself
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 attachBeforeRendering(fnFunction:any, oData?:any, oListener?:any): sap.ui.core.mvc.View;
		/**
		 * Returns an element by its ID in the context of the view.
		 * @param sId View local ID of the element
		 * @return element by its ID or <code>undefined</code>
		 */
		 byId(sId:string): sap.ui.core.Element;
		/**
		 * Override clone method to avoid conflict between generic cloning of content
		 * and content creation as defined by the UI5 Model View Controller lifecycle.
		 * 
		 * For more details see the development guide section about Model View Controller in UI5.
		 * @param sIdSuffix a suffix to be appended to the cloned element id
		 * @param aLocalIds an array of local IDs within the cloned hierarchy (internally used)
		 * @return reference to the newly created clone
		 */
		protected clone(sIdSuffix?:string, aLocalIds?:string[]): sap.ui.core.Element;
		/**
		 * Convert the given view local element ID to a globally unique ID
		 * by prefixing it with the view ID.
		 * @param sId View local ID of the element
		 * @return prefixed id
		 */
		 createId(sId:string): string;
		/**
		 * Destroys all the content in the aggregation <code>content</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 destroyContent(): sap.ui.core.mvc.View;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>afterInit</code> event of this <code>sap.ui.core.mvc.View</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 detachAfterInit(fnFunction:any, oListener:any): sap.ui.core.mvc.View;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>afterRendering</code> event of this <code>sap.ui.core.mvc.View</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 detachAfterRendering(fnFunction:any, oListener:any): sap.ui.core.mvc.View;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>beforeExit</code> event of this <code>sap.ui.core.mvc.View</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 detachBeforeExit(fnFunction:any, oListener:any): sap.ui.core.mvc.View;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>beforeRendering</code> event of this <code>sap.ui.core.mvc.View</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 detachBeforeRendering(fnFunction:any, oListener:any): sap.ui.core.mvc.View;
		/**
		 * Creates a new subclass of class sap.ui.core.mvc.View with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Fires event <code>afterInit</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		protected fireAfterInit(mArguments?:any): sap.ui.core.mvc.View;
		/**
		 * Fires event <code>afterRendering</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		protected fireAfterRendering(mArguments?:any): sap.ui.core.mvc.View;
		/**
		 * Fires event <code>beforeExit</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		protected fireBeforeExit(mArguments?:any): sap.ui.core.mvc.View;
		/**
		 * Fires event <code>beforeRendering</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		protected fireBeforeRendering(mArguments?:any): sap.ui.core.mvc.View;
		/**
		 * Gets content of aggregation <code>content</code>.
		 * 
		 * Child Controls of the view
		 * @return 
		 */
		 getContent(): sap.ui.core.Control[];
		/**
		 * Returns the view's Controller instance or null for a controller-less View.
		 * @return Controller of this view.
		 */
		 getController(): any;
		/**
		 * An (optional) method to be implemented by Views. When no controller instance is given at View instantiation time
		 * AND this method exists and returns the (package and class) name of a controller, the View tries to load and
		 * instantiate the controller and to connect it to itself.
		 * @return the name of the controller
		 */
		 getControllerName(): string;
		/**
		 * Gets current value of property <code>displayBlock</code>.
		 * 
		 * Whether the CSS display should be set to "block".
		 * Set this to "true" if the default display "inline-block" causes a vertical scrollbar with Views that are set to 100% height.
		 * Do not set this to "true" if you want to display other content in the same HTML parent on either side of the View (setting to "true" may push that other content to the next/previous line).
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>displayBlock</code>
		 */
		 getDisplayBlock(): boolean;
		/**
		 * Gets current value of property <code>height</code>.
		 * 
		 * The height
		 * @return Value of property <code>height</code>
		 */
		 getHeight(): sap.ui.core.CSSSize;
		/**
		 * Returns a metadata object for class sap.ui.core.mvc.View.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Returns the info object which is also passed to the preprocessors
		 * @param bSync Describes the view execution, true if sync
		 * @return Info object for the view
		 */
		protected getPreprocessorInfo(bSync:boolean): any;
		/**
		 * Returns user specific data object
		 * @return viewData
		 */
		 getViewData(): any;
		/**
		 * Gets current value of property <code>viewName</code>.
		 * 
		 * Name of the View
		 * @return Value of property <code>viewName</code>
		 */
		 getViewName(): string;
		/**
		 * Gets current value of property <code>width</code>.
		 * 
		 * The width
		 * 
		 * Default value is <code>100%</code>.
		 * @return Value of property <code>width</code>
		 */
		 getWidth(): sap.ui.core.CSSSize;
		/**
		 * Checks if any preprocessors are active for the specified type
		 * @param sType Type of the preprocessor, e.g. "raw", "xml" or "controls"
		 * @return <code>true</code> if a preprocessor is active
		 */
		protected hasPreprocessor(sType:string): boolean;
		/**
		 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oContent The content whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		 indexOfContent(oContent:sap.ui.core.Control): number;
		/**
		 * Inserts a content into the aggregation <code>content</code>.
		 * @param oContent the content to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the content should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the content is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 insertContent(oContent:sap.ui.core.Control, iIndex:number): sap.ui.core.mvc.View;
		/**
		 * Register a preprocessor for all views of a specific type.
		 * 
		 * The preprocessor can be registered for several stages of view initialization, which are
		 * dependant from the view type, e.g. "raw", "xml" or already initialized "controls". If there is a preprocessor
		 * passed to or activated at the view instance already, that one is used. When several preprocessors are registered
		 * for one hook, it has to be made sure that they do not conflict when beeing processed serially.
		 * 
		 * It can be either a module name as string of an implementation of {@link sap.ui.core.mvc.View.Preprocessor} or a
		 * function with a signature according to {@link sap.ui.core.mvc.View.Preprocessor.process}.
		 * 
		 * <strong>Note</strong>: Preprocessors only work in async views and will be ignored when the view is instantiated
		 * in sync mode by default, as this could have unexpected side effects. You may override this behaviour by setting the
		 * <code>bSyncSupport</code> flag to <code>true</code>.
		 * @param sType the type of content to be processed
		 * @param vPreprocessor module path of the preprocessor implementation or a preprocessor function
		 * @param sViewType type of the calling view, e.g. <code>XML</code>
		 * @param bSyncSupport declares if the vPreprocessor ensures safe sync processing. This means the preprocessor will be executed
		 * 		also for sync views. Please be aware that any kind of async processing (like Promises, XHR, etc) may
		 * 		break the view initialization and lead to unexpected results.
		 * @param bOnDemand on-demand preprocessor which enables developers to quickly activate the preprocessor for a view,
		 * 		by setting <code>preprocessors : { xml }</code>, for example. This should be false except for very special
		 * 		cases. There can only be one on-demand preprocessor per content type.
		 * @param mSettings optional configuration for preprocessor
		 */
		protected registerPreprocessor(sType:string, vPreprocessor:string|any, sViewType:string, bSyncSupport:boolean, bOnDemand?:boolean, mSettings?:any);
		/**
		 * Removes all the controls from the aggregation <code>content</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		 removeAllContent(): sap.ui.core.Control[];
		/**
		 * Removes a content from the aggregation <code>content</code>.
		 * @param vContent The content to remove or its index or id
		 * @return The removed content or <code>null</code>
		 */
		 removeContent(vContent:number|string|sap.ui.core.Control): sap.ui.core.Control;
		/**
		 * Executes preprocessors for a type of source
		 * @param sType the type of preprocessor, e.g. "raw", "xml" or "controls"
		 * @param vSource the view source as a JSON object, a raw text, an XML document element or a Promise resolving with those
		 * @param bSync describes the view execution, true if sync
		 * @return a promise resolving with the processed source or an error | the source when bSync=true
		 */
		protected runPreprocessor(sType:string, vSource:any|string|any, bSync?:boolean): any|any|string|any;
		/**
		 * Sets a new value for property <code>displayBlock</code>.
		 * 
		 * Whether the CSS display should be set to "block".
		 * Set this to "true" if the default display "inline-block" causes a vertical scrollbar with Views that are set to 100% height.
		 * Do not set this to "true" if you want to display other content in the same HTML parent on either side of the View (setting to "true" may push that other content to the next/previous line).
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bDisplayBlock New value for property <code>displayBlock</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setDisplayBlock(bDisplayBlock:boolean): sap.ui.core.mvc.View;
		/**
		 * Sets a new value for property <code>height</code>.
		 * 
		 * The height
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sHeight New value for property <code>height</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setHeight(sHeight:sap.ui.core.CSSSize): sap.ui.core.mvc.View;
		/**
		 * Sets a new value for property <code>viewName</code>.
		 * 
		 * Name of the View
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sViewName New value for property <code>viewName</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setViewName(sViewName:string): sap.ui.core.mvc.View;
		/**
		 * Sets a new value for property <code>width</code>.
		 * 
		 * The width
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>100%</code>.
		 * @param sWidth New value for property <code>width</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setWidth(sWidth:sap.ui.core.CSSSize): sap.ui.core.mvc.View;
	}
	/**
	 * Specifies possible view types
	 */
	type ViewType = 
	/**
	 * Specifies possible view types
	 */
	"HTML" |
	/**
	 * Specifies possible view types
	 */
	"JS" |
	/**
	 * Specifies possible view types
	 */
	"JSON" |
	/**
	 * Specifies possible view types
	 */
	"Template" |
	/**
	 * Specifies possible view types
	 */
	"XML";
	class XMLView extends sap.ui.core.mvc.View{
		/**
		 * Constructor for a new mvc/XMLView.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * 
		 * This class does not have its own settings, but all settings applicable to the base type
		 * {@link sap.ui.core.mvc.View#constructor sap.ui.core.mvc.View} can be used.
		 * @param sId id for the new control, generated automatically if no id is given
		 * @param mSettings initial settings for the new control
		 */
		 constructor(sId?:string, mSettings?:any);
		/**
		 * Creates a new subclass of class sap.ui.core.mvc.XMLView with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.mvc.View.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.core.mvc.XMLView.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Register a preprocessor for all views of a specific type.
		 * 
		 * The preprocessor can be registered for several stages of view initialization, for xml views these are
		 * either the plain "xml" or the already initialized "controls" , see {@link sap.ui.core.mvc.XMLView.PreprocessorType}.
		 * For each type one preprocessor is executed. If there is a preprocessor passed to or activated at the
		 * view instance already, that one is used. When several preprocessors are registered for one hook, it has to be made
		 * sure, that they do not conflict when beeing processed serially.
		 * 
		 * It can be either a module name as string of an implementation of {@link sap.ui.core.mvc.View.Preprocessor} or a
		 * function with a signature according to {@link sap.ui.core.mvc.View.Preprocessor.process}.
		 * 
		 * <strong>Note</strong>: Preprocessors work only in async views and will be ignored when the view is instantiated
		 * in sync mode by default, as this could have unexpected side effects. You may override this behaviour by setting the
		 * bSyncSupport flag to true.
		 * @param sType the type of content to be processed
		 * @param vPreprocessor module path of the preprocessor implementation or a preprocessor function
		 * @param bSyncSupport declares if the vPreprocessor ensures safe sync processing. This means the preprocessor will be executed
		 * 		also for sync views. Please be aware that any kind of async processing (like Promises, XHR, etc) may
		 * 		break the view initialization and lead to unexpected results.
		 * @param bOnDemand ondemand preprocessor which enables developers to quickly activate the preprocessor for a view,
		 * 		by setting <code>preprocessors : { xml }</code>, for example.
		 * @param mSettings optional configuration for preprocessor
		 */
		 registerPreprocessor(sType:string|sap.ui.core.mvc.XMLView.PreprocessorType, vPreprocessor:string|any, bSyncSupport:boolean, bOnDemand?:boolean, mSettings?:any);
	}
}

declare namespace sap.ui.core.mvc.XMLView {
	/**
	 * Specifies the available preprocessor types for XMLViews
	 */
	type PreprocessorType = 
	/**
	 * Specifies the available preprocessor types for XMLViews
	 */
	"CONTROLS" |
	/**
	 * Specifies the available preprocessor types for XMLViews
	 */
	"VIEWXML" |
	/**
	 * Specifies the available preprocessor types for XMLViews
	 */
	"XML";
}

declare namespace sap.ui.core.Popup {
	/**
	 * Enumeration providing options for docking of some element to another.
	 * "Right" and "Left" will stay the same in RTL mode, but "Begin" and "End" will flip to the other side ("Begin" is "Right" in RTL).
	 */
	type Dock = any
}

declare namespace sap.ui.core.routing {
	class HashChanger extends sap.ui.base.EventProvider{
		/**
		 * 
		 */
		 constructor();
		/**
		 * Cleans the event registration
		 */
		protected destroy();
		/**
		 * Creates a new subclass of class sap.ui.core.routing.HashChanger with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Fires the hashchanged event, may be extended to modify the hash before fireing the event
		 * @param newHash the new hash of the browser
		 * @param oldHash the previous hash
		 */
		protected fireHashChanged(newHash:string, oldHash:string);
		/**
		 * Gets the current hash
		 * @return the current hash
		 */
		 getHash(): string;
		/**
		 * Gets a global singleton of the HashChanger. The singleton will get created when this function is invoked for the first time.
		 */
		 getInstance();
		/**
		 * Returns a metadata object for class sap.ui.core.routing.HashChanger.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Will start listening to hashChanges with the parseHash function.
		 * This will also fire a hashchanged event with the initial hash.
		 * @return false if it was initialized before, true if it was initialized the first time
		 */
		 init();
		/**
		 * Replaces the hash to a certain value. When using the replace function no browser history is written.
		 * If you want to have an entry in the browser history, please use set setHash function.
		 * @param sHash the hash
		 */
		 replaceHash(sHash:string);
		/**
		 * Sets the hashChanger to a new instance, destroys the old one and copies all its event listeners to the new one
		 * @param oHashChanger the new instance for the global singleton
		 */
		protected replaceHashChanger(oHashChanger:sap.ui.core.routing.HashChanger);
		/**
		 * Sets the hash to a certain value. When using the set function a browser history  entry is written.
		 * If you do not want to have an entry in the browser history, please use set replaceHash function.
		 * @param sHash the hash
		 */
		 setHash(sHash:string);
	}
	class History {
		/**
		 * Used to determine the {@link sap.ui.core.HistoryDirection} of the current or a future navigation,
		 * done with a {@link sap.ui.core.routing.Router} or {@link sap.ui.core.routing.HashChanger}.
		 * 
		 * <strong>ATTENTION:</strong> this class will not be accurate if someone does hash-replacement without the named classes above
		 * If you are manipulating the hash directly this class is not supported anymore.
		 * @param oHashChanger required, without a HashChanger this class cannot work. The class needs to be aware of the hash-changes.
		 */
		 constructor(oHashChanger:sap.ui.core.routing.HashChanger);
		/**
		 * Determines what the navigation direction for a newly given hash would be
		 * It will say Unknown if there is a history foo - bar (current history) - foo
		 * If you now ask for the direction of the hash "foo" you get Unknown because it might be backwards or forwards.
		 * For hash replacements, the history stack will be replaced at this position for the history.
		 * @param sNewHash optional, if this parameter is not passed the last hashChange is taken.
		 * @return or undefined, if no navigation has taken place yet.
		 */
		 getDirection(sNewHash?:string): sap.ui.core.routing.HistoryDirection;
		/**
		 * 
		 * @return a global singleton that gets created as soon as the sap.ui.core.routing.History is required
		 */
		 getInstance(): sap.ui.core.routing.History;
		/**
		 * gets the previous hash in the history - if the last direction was Unknown or there was no navigation yet, undefined will be returned
		 * @return or undefined
		 */
		 getPreviousHash(): string;
	}
	/**
	 * Enumaration for different HistoryDirections
	 */
	type HistoryDirection = 
	/**
	 * Enumaration for different HistoryDirections
	 */
	"Backwards" |
	/**
	 * Enumaration for different HistoryDirections
	 */
	"Forwards" |
	/**
	 * Enumaration for different HistoryDirections
	 */
	"NewEntry" |
	/**
	 * Enumaration for different HistoryDirections
	 */
	"Unknown";
	class Route extends sap.ui.base.EventProvider{
		/**
		 * Instantiates a SAPUI5 Route
		 * @param The router instance, the route will be added to.
		 * @param oConfig configuration object for the route
		 * @param oParent The parent route - if a parent route is given, the routeMatched event of this route will also trigger the route matched of the parent and it will also create the view of the parent(if provided).
		 */
		 constructor(The:sap.ui.core.routing.Router, oConfig:any, oParent?:sap.ui.core.routing.Route);
		/**
		 * Destroys a route
		 * @return this for chaining.
		 */
		 destroy(): sap.ui.core.routing.Route;
		/**
		 * Creates a new subclass of class sap.ui.core.routing.Route with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.core.routing.Route.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Return the pattern of the route. If there are multiple patterns, the first pattern is returned
		 * @return the routes pattern
		 */
		 getPattern(): string;
		/**
		 * Returns the URL for the route and replaces the placeholders with the values in oParameters
		 * @param oParameters Parameters for the route
		 * @return the unencoded pattern with interpolated arguments
		 */
		 getURL(oParameters:any): string;
	}
	class Router extends sap.ui.base.EventProvider{
		/**
		 * Instantiates a SAPUI5 Router
		 * @param oRoutes may contain many Route configurations as {@link sap.ui.core.routing.Route#constructor}.<br/>
		 * Each of the routes contained in the array/object will be added to the router.<br/>
		 * 
		 * One way of defining routes is an array:
		 * <pre>
		 * [
		 *     //Will create a route called 'firstRouter' you can later use this name in navTo to navigate to this route
		 *     {
		 *         name: "firstRoute"
		 *         pattern : "usefulPattern"
		 *     },
		 *     //Will create a route called 'anotherRoute'
		 *     {
		 *         name: "anotherRoute"
		 *         pattern : "anotherPattern"
		 *     }
		 * ]
		 * </pre>
		 * 
		 * The alternative way of defining routes is an Object.
		 * If you choose this way, the name attribute is the name of the property.
		 * <pre>
		 * {
		 *     //Will create a route called 'firstRouter' you can later use this name in navTo to navigate to this route
		 *     firstRoute : {
		 *         pattern : "usefulPattern"
		 *     },
		 *     //Will create a route called 'anotherRoute'
		 *     anotherRoute : {
		 *         pattern : "anotherPattern"
		 *     }
		 * }
		 * </pre>
		 * The values that may be provided are the same as in {@link sap.ui.core.routing.Route#constructor}
		 * @param oConfig Default values for route configuration - also takes the same parameters as {@link sap.ui.core.routing.Target#constructor}.<br/>
		 * This config will be used for routes and for targets, used in the router<br/>
		 * Eg: if the config object specifies :
		 * <pre>
		 * <code>
		 * {
		 *     viewType : "XML"
		 * }
		 * </code>
		 * </pre>
		 * The targets look like this:
		 * <pre>
		 * {
		 *     xmlTarget : {
		 *         ...
		 *     },
		 *     jsTarget : {
		 *         viewType : "JS"
		 *         ...
		 *     }
		 * }
		 * </pre>
		 * Then the effective config will look like this:
		 * <pre>
		 * {
		 *     xmlTarget : {
		 *         viewType : "XML"
		 *         ...
		 *     },
		 *     jsTarget : {
		 *         viewType : "JS"
		 *         ...
		 *     }
		 * }
		 * </pre>
		 * 
		 * Since the xmlTarget does not specify its viewType, XML is taken from the config object. The jsTarget is specifying it, so the viewType will be JS.
		 * @param oOwner the Component of all the views that will be created by this Router,<br/>
		 * will get forwarded to the {@link sap.ui.core.routing.Views#contructor}.<br/>
		 * If you are using the componentMetadata to define your routes you should skip this parameter.
		 * @param oTargetsConfig available @since 1.28 the target configuration, see {@link sap.ui.core.Targets#constructor} documentation (the options object).<br/>
		 * You should use Targets to create and display views. Since 1.28 the route should only contain routing relevant properties.<br/>
		 * <b>Example:</b>
		 * <pre>
		 * <code>
		 *     new Router(
		 *     // Routes
		 *     [
		 *         {
		 *             // no view creation related properties are in the route
		 *             name: "startRoute",
		 *             //no hash
		 *             pattern: "",
		 *             // you can find this target in the targetConfig
		 *             target: "welcome"
		 *         }
		 *     ],
		 *     // Default values shared by routes and Targets
		 *     {
		 *         viewNamespace: "my.application.namespace",
		 *         viewType: "XML"
		 *     },
		 *     // You should only use this constructor when you are not using a router with a component.
		 *     // Please use the metadata of a component to define your routes and targets.
		 *     // The documentation can be found here: {@link sap.ui.core.UIComponent#.extend}.
		 *     null,
		 *     // Target config
		 *     {
		 *          //same name as in the route called 'startRoute'
		 *          welcome: {
		 *              // All properties for creating and placing a view go here or in the config
		 *              viewName: "Welcome",
		 *              controlId: "app",
		 *              controlAggregation: "pages"
		 *          }
		 *     })
		 * </code>
		 * </pre>
		 */
		 constructor(oRoutes?:any|any[], oConfig?:any, oOwner?:sap.ui.core.UIComponent, oTargetsConfig?:any);
		/**
		 * Adds a route to the router
		 * @param oConfig configuration object for the route @see sap.ui.core.routing.Route#constructor
		 * @param oParent The parent route - if a parent route is given, the routeMatched event of this route will also trigger the route matched of the parent and it will also create the view of the parent (if provided).
		 */
		 addRoute(oConfig:any, oParent:sap.ui.core.routing.Route);
		/**
		 * Attach event-handler <code>fnFunction</code> to the 'bypassed' event of this <code>sap.ui.core.routing.Router</code>.<br/>
		 * The event will get fired, if none of the routes of the routes is matching. <br/>
		 * @param fnFunction The function to call, when the event occurs. This function will be called on the
		 *            oListener-instance (if present) or in a 'static way'.
		 * @param oData The object, that should be passed along with the event-object when firing the event.
		 * @param oListener Object on which to call the given function. If empty, this Model is used.
		 * @return <code>this</code> to allow method chaining
		 */
		 attachBypassed(fnFunction:any, oData?:any, oListener?:any): sap.ui.core.routing.Router;
		/**
		 * Attach event-handler <code>fnFunction</code> to the 'routeMatched' event of this <code>sap.ui.core.routing.Router</code>.<br/>
		 * @param fnFunction The function to call, when the event occurs. This function will be called on the
		 *            oListener-instance (if present) or in a 'static way'.
		 * @param oData The object, that should be passed along with the event-object when firing the event.
		 * @param oListener Object on which to call the given function. If empty, this Model is used.
		 * @return <code>this</code> to allow method chaining
		 */
		 attachRouteMatched(fnFunction:any, oData?:any, oListener?:any): sap.ui.core.routing.Router;
		/**
		 * Attach event-handler <code>fnFunction</code> to the 'routePatternMatched' event of this <code>sap.ui.core.routing.Router</code>.<br/>
		 * This event is similar to route matched. But it will only fire for the route that has a matching pattern, not for its parent Routes <br/>
		 * @param fnFunction The function to call, when the event occurs. This function will be called on the
		 *            oListener-instance (if present) or in a 'static way'.
		 * @param oData The object, that should be passed along with the event-object when firing the event.
		 * @param oListener Object on which to call the given function. If empty, this Model is used.
		 * @return <code>this</code> to allow method chaining
		 */
		 attachRoutePatternMatched(fnFunction:any, oData?:any, oListener?:any): sap.ui.core.routing.Router;
		/**
		 * Removes the router from the hash changer @see sap.ui.core.routing.HashChanger
		 * @return this for chaining.
		 */
		 destroy(): sap.ui.core.routing.Router;
		/**
		 * Detach event-handler <code>fnFunction</code> from the 'bypassed' event of this <code>sap.ui.core.routing.Router</code>.<br/>
		 * The event will get fired, if none of the routes of the routes is matching. <br/>
		 * 
		 * The passed function and listener object must match the ones previously used for event registration.
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener Object on which the given function had to be called.
		 * @return <code>this</code> to allow method chaining
		 */
		 detachBypassed(fnFunction:any, oListener:any): sap.ui.core.routing.Router;
		/**
		 * Detach event-handler <code>fnFunction</code> from the 'routeMatched' event of this <code>sap.ui.core.routing.Router</code>.<br/>
		 * 
		 * The passed function and listener object must match the ones previously used for event registration.
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener Object on which the given function had to be called.
		 * @return <code>this</code> to allow method chaining
		 */
		 detachRouteMatched(fnFunction:any, oListener:any): sap.ui.core.routing.Router;
		/**
		 * Detach event-handler <code>fnFunction</code> from the 'routePatternMatched' event of this <code>sap.ui.core.routing.Router</code>.<br/>
		 * This event is similar to route matched. But it will only fire for the route that has a matching pattern, not for its parent Routes <br/>
		 * 
		 * The passed function and listener object must match the ones previously used for event registration.
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener Object on which the given function had to be called.
		 * @return <code>this</code> to allow method chaining
		 */
		 detachRoutePatternMatched(fnFunction:any, oListener:any): sap.ui.core.routing.Router;
		/**
		 * Creates a new subclass of class sap.ui.core.routing.Router with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Fire event bypassed to attached listeners.
		 * The event will get fired, if none of the routes of the routes is matching. <br/>
		 * @param mArguments the arguments to pass along with the event.
		 * @return <code>this</code> to allow method chaining
		 */
		protected fireBypassed(mArguments?:any): sap.ui.core.routing.Router;
		/**
		 * Fire event routeMatched to attached listeners.
		 * @param mArguments the arguments to pass along with the event.
		 * @return <code>this</code> to allow method chaining
		 */
		protected fireRouteMatched(mArguments?:any): sap.ui.core.routing.Router;
		/**
		 * Fire event routePatternMatched to attached listeners.
		 * This event is similar to route matched. But it will only fire for the route that has a matching pattern, not for its parent Routes <br/>
		 * @param mArguments the arguments to pass along with the event.
		 * @return <code>this</code> to allow method chaining
		 */
		protected fireRoutePatternMatched(mArguments?:any): sap.ui.core.routing.Router;
		/**
		 * Returns a metadata object for class sap.ui.core.routing.Router.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Get a registered router
		 * @param sName Name of the router
		 * @return The router with the specified name, else undefined
		 */
		 getRouter(sName:string): sap.ui.core.routing.Router;
		/**
		 * Returns the instance of Targets, if you pass a targets config to the router
		 * @return The instance of targets, the router uses to place views or undefined if you did not specify the targets parameter in the router's constructor.
		 */
		 getTargets(): sap.ui.core.routing.Targets|any;
		/**
		 * Returns the URL for the route and replaces the placeholders with the values in oParameters
		 * @param sName Name of the route
		 * @param oParameters Parameters for the route
		 * @return the unencoded pattern with interpolated arguments
		 */
		 getURL(sName:string, oParameters?:any): string;
		/**
		 * Attaches the router to the hash changer @see sap.ui.core.routing.HashChanger
		 * @return this for chaining.
		 */
		 initialize(): sap.ui.core.routing.Router;
		/**
		 * Navigates to a specific route defining a set of parameters. The Parameters will be URI encoded - the characters ; , / ? : @ & = + $ are reserved and will not be encoded.
		 * If you want to use special characters in your oParameters, you have to encode them (encodeURIComponent).
		 * 
		 * IF the given route name can't be found, an error message is logged to the console and the hash will be changed to empty string.
		 * @param sName Name of the route
		 * @param oParameters Parameters for the route
		 * @param bReplace Defines if the hash should be replaced (no browser history entry) or set (browser history entry)
		 * @return this for chaining.
		 */
		 navTo(sName:string, oParameters?:any, bReplace?:boolean): sap.ui.core.routing.Router;
		/**
		 * Will trigger routing events + place targets for routes matching the string
		 * @param sNewHash a new hash
		 */
		protected parse(sNewHash:string);
		/**
		 * Registers the router to access it from another context. Use sap.ui.routing.Router.getRouter() to receive the instance
		 * @param sName Name of the router
		 */
		 register(sName:string);
		/**
		 * Stops to listen to the hashChange of the browser.</br>
		 * If you want the router to start again, call initialize again.
		 * @return this for chaining.
		 */
		 stop(): sap.ui.core.routing.Router;
	}
}

declare namespace sap.ui.core.search {
	class OpenSearchProvider extends sap.ui.core.search.SearchProvider{
		/**
		 * Constructor for a new search/OpenSearchProvider.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given
		 * @param mSettings initial settings for the new control
		 */
		 constructor(sId?:string, mSettings?:any);
		/**
		 * Creates a new subclass of class sap.ui.core.search.OpenSearchProvider with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.search.SearchProvider.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.core.search.OpenSearchProvider.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Gets current value of property <code>suggestType</code>.
		 * 
		 * The type of data which is provided by the given suggestUrl: either 'json' or 'xml'.
		 * 
		 * Default value is <code>json</code>.
		 * @return Value of property <code>suggestType</code>
		 */
		 getSuggestType(): string;
		/**
		 * Gets current value of property <code>suggestUrl</code>.
		 * 
		 * The URL for suggestions of the search provider. As placeholder for the concrete search queries '{searchTerms}' must be used. For cross domain requests maybe a proxy must be used.
		 * @return Value of property <code>suggestUrl</code>
		 */
		 getSuggestUrl(): sap.ui.core.URI;
		/**
		 * Sets a new value for property <code>suggestType</code>.
		 * 
		 * The type of data which is provided by the given suggestUrl: either 'json' or 'xml'.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>json</code>.
		 * @param sSuggestType New value for property <code>suggestType</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setSuggestType(sSuggestType:string): sap.ui.core.search.OpenSearchProvider;
		/**
		 * Sets a new value for property <code>suggestUrl</code>.
		 * 
		 * The URL for suggestions of the search provider. As placeholder for the concrete search queries '{searchTerms}' must be used. For cross domain requests maybe a proxy must be used.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sSuggestUrl New value for property <code>suggestUrl</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setSuggestUrl(sSuggestUrl:sap.ui.core.URI): sap.ui.core.search.OpenSearchProvider;
		/**
		 * Call this function to get suggest values from the search provider.
		 * The given callback function is called with the suggest value (type 'string', 1st parameter)
		 * and an array of the suggestions (type '[string]', 2nd parameter).
		 * @param sValue The value for which suggestions are requested.
		 * @param fCallback The callback function which is called when the suggestions are available.
		 */
		 suggest(sValue:string, fCallback:any);
	}
	class SearchProvider extends sap.ui.core.Element{
		/**
		 * Constructor for a new search/SearchProvider.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given
		 * @param mSettings initial settings for the new control
		 */
		 constructor(sId?:string, mSettings?:any);
		/**
		 * Creates a new subclass of class sap.ui.core.search.SearchProvider with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Gets current value of property <code>icon</code>.
		 * 
		 * Icon of the Search Provider
		 * @return Value of property <code>icon</code>
		 */
		 getIcon(): string;
		/**
		 * Returns a metadata object for class sap.ui.core.search.SearchProvider.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Sets a new value for property <code>icon</code>.
		 * 
		 * Icon of the Search Provider
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sIcon New value for property <code>icon</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setIcon(sIcon:string): sap.ui.core.search.SearchProvider;
		/**
		 * Call this function to get suggest values from the search provider.
		 * The given callback function is called with the suggest value (type 'string', 1st parameter)
		 * and an array of the suggestions (type '[string]', 2nd parameter).
		 * @param sValue The value for which suggestions are requested.
		 * @param fnCallback The callback function which is called when the suggestions are available.
		 */
		 suggest(sValue:string, fnCallback:any);
	}
}

declare namespace sap.ui.core.theming {
	/**
	 * A helper used for (read-only) access to CSS parameters at runtime
	 */
	namespace Parameters {
		/**
		 * Returns the scopes from current theming parameters.
		 * @param bAvoidLoading Whether loading of parameters should be avoided
		 * @return Scope names
		 */
		function _getScopes(bAvoidLoading?:boolean): any[];
		/**
		 * Returns the current value for one or more theming parameters, depending on the given arguments.
		 * <ul>
		 * <li>If no parameter is given a key-value map containing all parameters is returned</li>
		 * <li>If a <code>string</code> is given as first parameter the value is returned as a <code>string</code></li>
		 * <li>If an <code>array</code> is given as first parameter a key-value map containing all parameters from the <code>array</code> is returned</li>
		 * </ul>
		 * <p>The returned key-value maps are a copy so changing values in the map does not have any effect</p>
		 * @param vName the (array with) CSS parameter name(s)
		 * @param oElement Element / control instance to take into account when looking for a parameter value.
		 *                           This can make a difference when a parameter value is overridden in a theme scope set via a CSS class.
		 * @return the CSS parameter value(s)
		 */
		function get(vName:string|string[], oElement?:sap.ui.core.Element): string|any|any;
		/**
		 * Returns the active scope(s) for a given control by looking up the hierarchy.
		 * 
		 * The lookup navigates the DOM hierarchy if it's available. Otherwise if controls aren't rendered yet,
		 * it navigates the control hierarchy. By navigating the control hierarchy, inner-html elements
		 * with the respective scope classes can't get recognized as the Custom Style Class API does only for
		 * root elements.
		 * @param oElement element/control instance
		 * @return Two dimensional array with scopes in bottom up order
		 */
		function getActiveScopesFor(oElement:any): string[][];
		/**
		 * Resets the CSS parameters which finally will reload the parameters
		 * the next time they are queried via the method <code>get</code>.
		 */
		function reset();
	}
}

declare namespace sap.ui.core.tmpl {
	class DOMAttribute extends sap.ui.core.Element{
		/**
		 * Constructor for a new tmpl/DOMAttribute.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given
		 * @param mSettings initial settings for the new control
		 */
		 constructor(sId?:string, mSettings?:any);
		/**
		 * Creates a new subclass of class sap.ui.core.tmpl.DOMAttribute with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.core.tmpl.DOMAttribute.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Gets current value of property <code>name</code>.
		 * 
		 * Name of the DOM attribute
		 * @return Value of property <code>name</code>
		 */
		 getName(): string;
		/**
		 * Gets current value of property <code>value</code>.
		 * 
		 * Value of the DOM attribute
		 * @return Value of property <code>value</code>
		 */
		 getValue(): string;
		/**
		 * Sets a new value for property <code>name</code>.
		 * 
		 * Name of the DOM attribute
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sName New value for property <code>name</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setName(sName:string): sap.ui.core.tmpl.DOMAttribute;
		/**
		 * Sets a new value for property <code>value</code>.
		 * 
		 * Value of the DOM attribute
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sValue New value for property <code>value</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setValue(sValue:string): sap.ui.core.tmpl.DOMAttribute;
	}
	class DOMElement extends sap.ui.core.Control{
		/**
		 * Constructor for a new tmpl/DOMElement.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given
		 * @param mSettings initial settings for the new control
		 */
		 constructor(sId?:string, mSettings?:any);
		/**
		 * Adds some attribute to the aggregation <code>attributes</code>.
		 * @param oAttribute the attribute to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 addAttribute(oAttribute:sap.ui.core.tmpl.DOMAttribute): sap.ui.core.tmpl.DOMElement;
		/**
		 * Adds some element to the aggregation <code>elements</code>.
		 * @param oElement the element to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 addElement(oElement:sap.ui.core.tmpl.DOMElement): sap.ui.core.tmpl.DOMElement;
		/**
		 * Returns the value of a DOM attribute if available or undefined if the DOM attribute is not available when using this method with the parameter name only.
		 * When using the method with the parameter name and value the method acts as a setter and sets the value of a DOM attribute.
		 * In this case the return value is the reference to this DOM element to support method chaining. If you pass null as value of the attribute the attribute will be removed.
		 * @param sName The name of the DOM attribute.
		 * @param sValue The value of the DOM attribute. If the value is undefined the DOM attribute will be removed.
		 * @return value of attribute or <code>this</code> when called as a setter
		 */
		 attr(sName:string, sValue:string): any;
		/**
		 * Destroys all the attributes in the aggregation <code>attributes</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 destroyAttributes(): sap.ui.core.tmpl.DOMElement;
		/**
		 * Destroys all the elements in the aggregation <code>elements</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 destroyElements(): sap.ui.core.tmpl.DOMElement;
		/**
		 * Creates a new subclass of class sap.ui.core.tmpl.DOMElement with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Gets content of aggregation <code>attributes</code>.
		 * 
		 * DOM attributes which are rendered as part of the DOM element and bindable
		 * @return 
		 */
		 getAttributes(): sap.ui.core.tmpl.DOMAttribute[];
		/**
		 * Gets content of aggregation <code>elements</code>.
		 * 
		 * Nested DOM elements to support nested bindable structures
		 * @return 
		 */
		 getElements(): sap.ui.core.tmpl.DOMElement[];
		/**
		 * Returns a metadata object for class sap.ui.core.tmpl.DOMElement.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Gets current value of property <code>tag</code>.
		 * 
		 * The HTML-tag of the DOM element which contains the text
		 * 
		 * Default value is <code>span</code>.
		 * @return Value of property <code>tag</code>
		 */
		 getTag(): string;
		/**
		 * Gets current value of property <code>text</code>.
		 * 
		 * The text content of the DOM element
		 * @return Value of property <code>text</code>
		 */
		 getText(): string;
		/**
		 * Checks for the provided <code>sap.ui.core.tmpl.DOMAttribute</code> in the aggregation <code>attributes</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oAttribute The attribute whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		 indexOfAttribute(oAttribute:sap.ui.core.tmpl.DOMAttribute): number;
		/**
		 * Checks for the provided <code>sap.ui.core.tmpl.DOMElement</code> in the aggregation <code>elements</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oElement The element whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		 indexOfElement(oElement:sap.ui.core.tmpl.DOMElement): number;
		/**
		 * Inserts a attribute into the aggregation <code>attributes</code>.
		 * @param oAttribute the attribute to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the attribute should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the attribute is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the attribute is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 insertAttribute(oAttribute:sap.ui.core.tmpl.DOMAttribute, iIndex:number): sap.ui.core.tmpl.DOMElement;
		/**
		 * Inserts a element into the aggregation <code>elements</code>.
		 * @param oElement the element to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the element should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the element is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the element is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 insertElement(oElement:sap.ui.core.tmpl.DOMElement, iIndex:number): sap.ui.core.tmpl.DOMElement;
		/**
		 * Removes all the controls from the aggregation <code>attributes</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		 removeAllAttributes(): sap.ui.core.tmpl.DOMAttribute[];
		/**
		 * Removes all the controls from the aggregation <code>elements</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		 removeAllElements(): sap.ui.core.tmpl.DOMElement[];
		/**
		 * Removes the DOM attribute for the given name and returns the reference to this DOM element to support method chaining.
		 * @param sName The name of the DOM attribute.
		 * @return 
		 */
		 removeAttr(sName:string): sap.ui.core.tmpl.DOMElement;
		/**
		 * Removes a attribute from the aggregation <code>attributes</code>.
		 * @param vAttribute The attribute to remove or its index or id
		 * @return The removed attribute or <code>null</code>
		 */
		 removeAttribute(vAttribute:number|string|sap.ui.core.tmpl.DOMAttribute): sap.ui.core.tmpl.DOMAttribute;
		/**
		 * Removes a element from the aggregation <code>elements</code>.
		 * @param vElement The element to remove or its index or id
		 * @return The removed element or <code>null</code>
		 */
		 removeElement(vElement:number|string|sap.ui.core.tmpl.DOMElement): sap.ui.core.tmpl.DOMElement;
		/**
		 * Sets a new value for property <code>tag</code>.
		 * 
		 * The HTML-tag of the DOM element which contains the text
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>span</code>.
		 * @param sTag New value for property <code>tag</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setTag(sTag:string): sap.ui.core.tmpl.DOMElement;
		/**
		 * Sets a new value for property <code>text</code>.
		 * 
		 * The text content of the DOM element
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sText New value for property <code>text</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setText(sText:string): sap.ui.core.tmpl.DOMElement;
	}
	class HandlebarsTemplate extends sap.ui.core.tmpl.Template{
		/**
		 * Creates and initializes a new handlebars template with the given <code>sId</code>
		 * and settings.
		 * 
		 * The set of allowed entries in the <code>mSettings</code> object depends on
		 * the concrete subclass and is described there.
		 * @param sId optional id for the new template; generated automatically if
		 *            no non-empty id is given Note: this can be omitted, no matter
		 *            whether <code>mSettings</code> will be given or not!
		 * @param mSettings optional map/JSON-object with initial settings for the
		 *            new component instance
		 */
		 constructor(sId?:string, mSettings?:any);
		/**
		 * Creates a new subclass of class sap.ui.core.tmpl.HandlebarsTemplate with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.tmpl.Template.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.core.tmpl.HandlebarsTemplate.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
	}
	class Template extends sap.ui.base.ManagedObject{
		/**
		 * Creates and initializes a new template with the given <code>sId</code> and
		 * settings.
		 * 
		 * The set of allowed entries in the <code>mSettings</code> object depends on
		 * the concrete subclass and is described there.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId optional id for the new template; generated automatically if
		 *            no non-empty id is given Note: this can be omitted, no matter
		 *            whether <code>mSettings</code> will be given or not!
		 * @param mSettings optional map/JSON-object with initial settings for the
		 *            new component instance
		 */
		 constructor(sId?:string, mSettings?:any);
		/**
		 * Returns the registered template for the given id, if any.
		 * @param sId 
		 * @return the template for the given id
		 */
		 byId(sId:string): sap.ui.core.tmpl.Template;
		/**
		 * Creates an anonymous TemplateControl for the Template.
		 * @param sId the control ID
		 * @param oView 
		 * @param oContext the context for the renderer/templating
		 * @return the created control instance
		 */
		 createControl(sId:string, oView:sap.ui.core.mvc.View, oContext?:any): sap.ui.core.tmpl.TemplateControl;
		/**
		 * Declares a new control based on this template and returns the created
		 * class / constructor function. The class is based on the information coming
		 * from the abstract functions <code>createMetadata</code> and
		 * <code>createRenderer</code>.
		 * @param sControl the fully qualified name of the control
		 * @return the created class / constructor function
		 */
		 declareControl(sControl:string): any;
		/**
		 * Creates a new subclass of class sap.ui.core.tmpl.Template with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Gets current value of property <code>content</code>.
		 * 
		 * The Template definition as a String.
		 * @return Value of property <code>content</code>
		 */
		 getContent(): string;
		/**
		 * 
		 */
		 getInterface();
		/**
		 * Returns a metadata object for class sap.ui.core.tmpl.Template.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * parses the given path and extracts the model and path
		 * @param sPath the path
		 * @return the model and the path
		 */
		protected parsePath(sPath:string): any;
		/**
		 * Creates an anonymous TemplateControl for the Template and places the control
		 * into the specified DOM element.
		 * @param oRef the id or the DOM reference where to render the template
		 * @param bInline 
		 * @param oContext The context to use to evaluate the Template. It will be applied as value for the context property of the created control.
		 * @param vPosition Describes the position where the control should be put into the container
		 * @return the created control instance
		 */
		 placeAt(oRef:string|any, bInline:boolean, oContext?:any, vPosition?:string|number): sap.ui.core.tmpl.TemplateControl;
		/**
		 * Sets a new value for property <code>content</code>.
		 * 
		 * The Template definition as a String.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sContent New value for property <code>content</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setContent(sContent:string): sap.ui.core.tmpl.Template;
	}
	class TemplateControl extends sap.ui.core.Control{
		/**
		 * Constructor for a new tmpl/TemplateControl.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given
		 * @param mSettings initial settings for the new control
		 */
		 constructor(sId?:string, mSettings?:any);
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>afterRendering</code> event of this <code>sap.ui.core.tmpl.TemplateControl</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.ui.core.tmpl.TemplateControl</code> itself.
		 * 
		 * Fired when the Template Control has been (re-)rendered and its HTML is present in the DOM.
		 * @param fnFunction The function to be called when the event occurs
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.core.tmpl.TemplateControl</code> itself
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 attachAfterRendering(fnFunction:any, oData?:any, oListener?:any): sap.ui.core.tmpl.TemplateControl;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>beforeRendering</code> event of this <code>sap.ui.core.tmpl.TemplateControl</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.ui.core.tmpl.TemplateControl</code> itself.
		 * 
		 * Fired before this Template Control is re-rendered. Use to unbind event handlers from HTML elements etc.
		 * @param fnFunction The function to be called when the event occurs
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.core.tmpl.TemplateControl</code> itself
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 attachBeforeRendering(fnFunction:any, oData?:any, oListener?:any): sap.ui.core.tmpl.TemplateControl;
		/**
		 * Creates a pseudo binding for a aggregation to get notified once the property
		 * changes to invalidate the control and trigger a re-rendering.
		 * @param sPath the binding path
		 * @return the value of the path
		 */
		protected bindList(sPath:string): any;
		/**
		 * Creates a pseudo binding for a property to get notified once the property
		 * changes to invalidate the control and trigger a re-rendering.
		 * @param sPath the binding path
		 * @return the value of the path
		 */
		protected bindProp(sPath:string): any;
		/**
		 * compiles (creates and registers) a new control
		 * @param mSettings the settings for the new control
		 * @param oView 
		 * @param sParentPath the parent path for the control
		 * @param bDoNotAdd if true, then the control will not be
		 *          added to the _controls aggregation
		 * @return new control instance
		 */
		protected createControl(mSettings:any, oView:sap.ui.core.mvc.View, sParentPath?:string, bDoNotAdd?:boolean): sap.ui.core.Control;
		/**
		 * compiles (creates and registers) a new DOM element
		 * @param mSettings the settings for the new DOM element
		 * @param sParentPath the parent path for the DOM element
		 * @param bDoNotAdd if true, then the control will not be
		 *          added to the _controls aggregation
		 * @return new DOM element instance
		 */
		protected createDOMElement(mSettings:any, sParentPath?:string, bDoNotAdd?:boolean): sap.ui.core.Control;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>afterRendering</code> event of this <code>sap.ui.core.tmpl.TemplateControl</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 detachAfterRendering(fnFunction:any, oListener:any): sap.ui.core.tmpl.TemplateControl;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>beforeRendering</code> event of this <code>sap.ui.core.tmpl.TemplateControl</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 detachBeforeRendering(fnFunction:any, oListener:any): sap.ui.core.tmpl.TemplateControl;
		/**
		 * Creates a new subclass of class sap.ui.core.tmpl.TemplateControl with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Fires event <code>afterRendering</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		protected fireAfterRendering(mArguments?:any): sap.ui.core.tmpl.TemplateControl;
		/**
		 * Fires event <code>beforeRendering</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		protected fireBeforeRendering(mArguments?:any): sap.ui.core.tmpl.TemplateControl;
		/**
		 * Gets current value of property <code>context</code>.
		 * 
		 * The context is a data object. It can be used for default template expressions. A change of the context object leads to a re-rendering whereas a change of a nested property of the context object doesn't. By default the context is an empty object.
		 * @return Value of property <code>context</code>
		 */
		 getContext(): any;
		/**
		 * Returns a metadata object for class sap.ui.core.tmpl.TemplateControl.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * ID of the element which is the current target of the association <code>template</code>, or <code>null</code>.
		 * @return 
		 */
		 getTemplate(): sap.ui.core.ID;
		/**
		 * Returns the instance specific renderer for an anonymous template control.
		 * @return the instance specific renderer function
		 */
		protected getTemplateRenderer(): any;
		/**
		 * checks whether the control is inline or not
		 * @return flag, whether to control is inline or not
		 */
		protected isInline(): boolean;
		/**
		 * Sets a new value for property <code>context</code>.
		 * 
		 * The context is a data object. It can be used for default template expressions. A change of the context object leads to a re-rendering whereas a change of a nested property of the context object doesn't. By default the context is an empty object.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param oContext New value for property <code>context</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setContext(oContext:any): sap.ui.core.tmpl.TemplateControl;
		/**
		 * Sets the associated <code>template</code>.
		 * @param oTemplate ID of an element which becomes the new target of this template association; alternatively, an element instance may be given
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setTemplate(oTemplate:sap.ui.core.ID|sap.ui.core.tmpl.Template): sap.ui.core.tmpl.TemplateControl;
		/**
		 * Sets the instance specific renderer for an anonymous template control.
		 * @param fnRenderer the instance specific renderer function
		 * @return <code>this</code> to allow method chaining
		 */
		protected setTemplateRenderer(fnRenderer:any): sap.ui.core.tmpl.Template;
	}
}

declare namespace sap.ui.core.util {
	class MockServer extends sap.ui.base.ManagedObject{
		/**
		 * Creates a mocked server. This helps to mock all or some backend calls, e.g. for OData/JSON Models or simple XHR calls, without
		 * changing the application code. This class can also be used for qunit tests.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new server object; generated automatically if no non-empty id is given
		 *      Note: this can be omitted, no matter whether <code>mSettings</code> will be given or not!
		 * @param mSettings optional map/JSON-object with initial property values, aggregated objects etc. for the new object
		 * @param oScope scope object for resolving string based type and formatter references in bindings
		 */
		 constructor(sId?:string, mSettings?:any, oScope?:any);
		/**
		 * Attaches an event handler to be called after the built-in request processing of the mock server
		 * @param event type according to HTTP Method
		 * @param fnCallback the name of the function that will be called at this exit
		 * The callback function exposes an event with parameters, depending on the type of the request.
		 * oEvent.getParameters() lists the parameters as per the request. Examples are:
		 * oXhr : the request object; oFilteredData : the mock data entries that are about to be returned in the response; oEntry : the mock data entry that is about to be returned in the response;
		 * @param sEntitySet (optional) the name of the entity set
		 */
		 attachAfter(event:string, fnCallback:any, sEntitySet:string);
		/**
		 * Attaches an event handler to be called before the built-in request processing of the mock server
		 * @param event type according to HTTP Method
		 * @param fnCallback the name of the function that will be called at this exit.
		 * The callback function exposes an event with parameters, depending on the type of the request.
		 * oEvent.getParameters() lists the parameters as per the request. Examples are:
		 * oXhr : the request object; sUrlParams : the URL parameters of the request; sKeys : key properties of the requested entry; sNavProp/sNavName : name of navigation
		 * @param sEntitySet (optional) the name of the entity set
		 */
		 attachBefore(event:string, fnCallback:any, sEntitySet:string);
		/**
		 * Cleans up the resources associated with this object and all its aggregated children.
		 * 
		 * After an object has been destroyed, it can no longer be used in!
		 * 
		 * Applications should call this method if they don't need the object any longer.
		 * @param bSuppressInvalidate if true, this ManagedObject is not marked as changed
		 */
		 destroy(bSuppressInvalidate?:boolean);
		/**
		 * Removes a previously attached event handler
		 * @param event type according to HTTP Method
		 * @param fnCallback the name of the function that will be called at this exit
		 * @param sEntitySet (optional) the name of the entity set
		 */
		 detachAfter(event:string, fnCallback:any, sEntitySet:string);
		/**
		 * Removes a previously attached event handler
		 * @param event type according to HTTP Method
		 * @param fnCallback the name of the function that will be called at this exit
		 * @param sEntitySet (optional) the name of the entity set
		 */
		 detachBefore(event:string, fnCallback:any, sEntitySet:string);
		/**
		 * Creates a new subclass of class sap.ui.core.util.MockServer with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns the data model of the given EntitySet name.
		 * @param sEntitySetName EntitySet name
		 * @return data model of the given EntitySet
		 */
		 getEntitySetData(sEntitySetName:any): any[];
		/**
		 * Returns a metadata object for class sap.ui.core.util.MockServer.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Getter for property <code>requests</code>.
		 * 
		 * Default value is <code>[]</code>
		 * @return the value of property <code>rootUri</code>
		 */
		 getRequests(): any[];
		/**
		 * Getter for property <code>rootUri</code>.
		 * 
		 * Default value is empty/<code>undefined</code>
		 * @return the value of property <code>rootUri</code>
		 */
		 getRootUri(): string;
		/**
		 * Returns whether the server is started or not.
		 * @return whether the server is started or not.
		 */
		 isStarted(): boolean;
		/**
		 * Sets the data of the given EntitySet name with the given array.
		 * @param sEntitySetName EntitySet name
		 * @param aData 
		 */
		 setEntitySetData(sEntitySetName:any, aData:any);
		/**
		 * Setter for property <code>requests</code>.
		 * 
		 * Default value is is <code>[]</code>
		 * 
		 * Each array entry should consist of an array with the following properties / values:
		 * 
		 * <ul>
		 * <li><b>method <string>: "GET"|"POST"|"DELETE|"PUT"</b>
		 * <br>
		 * (any HTTP verb)
		 * </li>
		 * <li><b>path <string>: "/path/to/resource"</b>
		 * <br>
		 * The path is converted to a regular expression, so it can contain normal regular expression syntax.
		 * All regular expression groups are forwarded as arguments to the <code>response</code> function.
		 * In addition to this, parameters can be written in this notation: <code>:param</code>. These placeholder will be replaced by regular expression groups.
		 * </li>
		 * <li><b>response <function>: function(xhr, param1, param2, ...) { }</b>
		 * <br>
		 * The xhr object can be used to respond on the request. Supported methods are:
		 * <br>
		 * <code>xhr.respond(iStatusCode, mHeaders, sBody)</code>
		 * <br>
		 * <code>xhr.respondJSON(iStatusCode, mHeaders, oJsonObjectOrString)</code>. By default a JSON header is set for response header
		 * <br>
		 * <code>xhr.respondXML(iStatusCode, mHeaders, sXmlString)</code>. By default a XML header is set for response header
		 * <br>
		 * <code>xhr.respondFile(iStatusCode, mHeaders, sFileUrl)</code>. By default the mime type of the file is set for response header
		 * </li>
		 * </ul>
		 * @param requests new value for property <code>requests</code>
		 */
		 setRequests(requests:any[]);
		/**
		 * Setter for property <code>rootUri</code>. All request path URI are prefixed with this root URI if set.
		 * 
		 * Default value is empty/<code>undefined</code>
		 * @param rootUri new value for property <code>rootUri</code>
		 */
		 setRootUri(rootUri:string);
		/**
		 * Starts the server.
		 */
		 start();
		/**
		 * Stops the server.
		 */
		 stop();
	/**
	 * Enum for the method.
	 */
	 HTTPMETHOD: any
	
	}
}

declare namespace sap.ui.core.util.serializer.delegate {
	class Delegate extends sap.ui.base.EventProvider{
		/**
		 * Abstract serializer delegate class. All delegates must extend from this class and implement the abstract methods.
		 */
		 constructor();
		/**
		 * Creates a new subclass of class sap.ui.core.util.serializer.delegate.Delegate with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.core.util.serializer.delegate.Delegate.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
	}
	class HTML extends sap.ui.core.util.serializer.delegate.Delegate{
		/**
		 * HTML serializer delegate class. Called by the serializer instance.
		 * @param fnGetControlId delegate function which returns the control id
		 * @param fnGetEventHandlerName delegate function which returns the event handler name
		 */
		 constructor(fnGetControlId?:any, fnGetEventHandlerName?:any);
		/**
		 * Creates a new subclass of class sap.ui.core.util.serializer.delegate.HTML with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.util.serializer.delegate.Delegate.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.core.util.serializer.delegate.HTML.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
	}
	class XML extends sap.ui.core.util.serializer.delegate.Delegate{
		/**
		 * XML serializer delegate class. Called by the serializer instance.
		 * @param sDefaultXmlNamespace defines the default XML namespace
		 * @param fnGetControlId delegate function which returns the control id
		 * @param fnGetEventHandlerName delegate function which returns the event handler name
		 * @param fnMemorizePackage a delegate function to memorize the control packages
		 */
		 constructor(sDefaultXmlNamespace?:string, fnGetControlId?:any, fnGetEventHandlerName?:any, fnMemorizePackage?:any);
		/**
		 * Creates a new subclass of class sap.ui.core.util.serializer.delegate.XML with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.util.serializer.delegate.Delegate.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.core.util.serializer.delegate.XML.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
	}
}

declare namespace sap.ui.core.util.serializer {
	class HTMLViewSerializer extends sap.ui.base.EventProvider{
		/**
		 * HTML view serializer class. Serializes a given view.
		 * @param oView the view to serialize
		 * @param fnGetControlId delegate function which returns the control id
		 * @param fnGetEventHandlerName delegate function which returns the event handler name
		 * @param oWindow the window object. Default is the window object the instance of the serializer is running in
		 */
		 constructor(oView:sap.ui.core.mvc.HTMLView, fnGetControlId:any, fnGetEventHandlerName:any, oWindow?:any);
		/**
		 * Creates a new subclass of class sap.ui.core.util.serializer.HTMLViewSerializer with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.core.util.serializer.HTMLViewSerializer.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
	}
	class Serializer extends sap.ui.base.EventProvider{
		/**
		 * Serializer class. Iterates over all controls and call a given serializer delegate.
		 * @param oRootControl the root control to serialize
		 * @param serializeDelegate the serializer delegate. Has to implement start/middle/end methods.
		 * @param bSkipRoot whether to skip the root node or not
		 * @param fnSkipAggregations whether to skip aggregations
		 * @param fnSkipElement whether to skip an element
		 */
		 constructor(oRootControl:sap.ui.core.Control|sap.ui.core.UIArea, serializeDelegate:any, bSkipRoot:boolean, fnSkipAggregations:any, fnSkipElement:any);
		/**
		 * Creates a new subclass of class sap.ui.core.util.serializer.Serializer with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.core.util.serializer.Serializer.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
	}
	class ViewSerializer extends sap.ui.base.EventProvider{
		/**
		 * View serializer class. Iterates over all controls and serializes all found views by calling the corresponding view type serializer.
		 * @param oRootControl the root control to serialize
		 * @param oWindow the window object. Default is the window object the instance of the serializer is running in.
		 * @param sDefaultXmlNamespace defines the default xml namespace
		 */
		 constructor(oRootControl:sap.ui.core.Control|sap.ui.core.UIArea, oWindow?:any, sDefaultXmlNamespace?:string);
		/**
		 * Creates a new subclass of class sap.ui.core.util.serializer.ViewSerializer with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.core.util.serializer.ViewSerializer.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
	}
	class XMLViewSerializer extends sap.ui.base.EventProvider{
		/**
		 * XML view serializer class. Serializes a given view.
		 * @param oView the view to serialize
		 * @param fnGetControlId delegate function which returns the control id
		 * @param fnGetEventHandlerName delegate function which returns the event handler name
		 * @param oWindow the window object. Default is the window object the instance of the serializer is running in
		 * @param sDefaultXmlNamespace defines the default XML namespace
		 */
		 constructor(oView:sap.ui.core.mvc.XMLView, fnGetControlId:any, fnGetEventHandlerName:any, oWindow?:any, sDefaultXmlNamespace?:string);
		/**
		 * Creates a new subclass of class sap.ui.core.util.serializer.XMLViewSerializer with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.core.util.serializer.XMLViewSerializer.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
	}
}

declare namespace sap.ui.core.ws {
	/**
	 * Defines the different ready states for a WebSocket connection.
	 */
	type ReadyState = any
	class SapPcpWebSocket extends sap.ui.core.ws.WebSocket{
		/**
		 * Creates a new WebSocket connection and uses the pcp-protocol for communication.
		 * @param sUrl relative or absolute URL for WebSocket connection.
		 * @param aProtocols array of protocols as strings, a single protocol as a string.
		 * Protocol(s) should be selected from {@link sap.ui.core.ws.SapPcpWebSocket.SUPPORTED_PROTOCOLS}.
		 */
		 constructor(sUrl:string, aProtocols?:any[]);
		/**
		 * Creates a new subclass of class sap.ui.core.ws.SapPcpWebSocket with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.ws.WebSocket.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Fire event 'message' to attached listeners.
		 * @param mArguments the arguments to pass along with the event.
		 * @return <code>this</code> to allow method chaining
		 */
		protected fireMessage(mArguments?:any): sap.ui.core.ws.SapPcpWebSocket;
		/**
		 * Returns a metadata object for class sap.ui.core.ws.SapPcpWebSocket.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Sends a message and optional pcp-header-fields using the pcp-protocol.<br>
		 * <br>
		 * If the connection is not yet opened, the message will be queued and sent
		 * when the connection is established.
		 * @param message message to send
		 * @param oPcpFields additional pcp-fields as key-value map
		 * @return <code>this</code> to allow method chaining
		 */
		 send(message:string|any|any, oPcpFields?:any): sap.ui.core.ws.SapPcpWebSocket;
	}
	class WebSocket extends sap.ui.base.EventProvider{
		/**
		 * Creates a new WebSocket connection.
		 * @param sUrl relative or absolute URL for WebSocket connection.
		 * @param aProtocols array of protocols as strings, a single protocol as a string
		 */
		 constructor(sUrl:string, aProtocols?:any[]);
		/**
		 * Attach event-handler <code>fnFunction</code> to the 'close' event of this <code>sap.ui.core.ws.WebSocket</code>.<br>
		 * @param fnFunction The function to call, when the event occurs. This function will be called on the
		 *            oListener-instance (if present) or in a 'static way'.
		 * @param oData The object, that should be passed along with the event-object when firing the event.
		 * @param oListener Object on which to call the given function. If empty, this WebSocket is used.
		 * @return <code>this</code> to allow method chaining
		 */
		 attachClose(fnFunction:any, oData?:any, oListener?:any): sap.ui.core.ws.WebSocket;
		/**
		 * Attach event-handler <code>fnFunction</code> to the 'error' event of this <code>sap.ui.core.ws.WebSocket</code>.<br>
		 * @param fnFunction The function to call, when the event occurs. This function will be called on the
		 *            oListener-instance (if present) or in a 'static way'.
		 * @param oData The object, that should be passed along with the event-object when firing the event.
		 * @param oListener Object on which to call the given function. If empty, this WebSocket is used.
		 * @return <code>this</code> to allow method chaining
		 */
		 attachError(fnFunction:any, oData?:any, oListener?:any): sap.ui.core.ws.WebSocket;
		/**
		 * Attach event-handler <code>fnFunction</code> to the 'message' event of this <code>sap.ui.core.ws.WebSocket</code>.<br>
		 * @param fnFunction The function to call, when the event occurs. This function will be called on the
		 *            oListener-instance (if present) or in a 'static way'.
		 * @param oData The object, that should be passed along with the event-object when firing the event.
		 * @param oListener Object on which to call the given function. If empty, this WebSocket is used.
		 * @return <code>this</code> to allow method chaining
		 */
		 attachMessage(fnFunction:any, oData?:any, oListener?:any): sap.ui.core.ws.WebSocket;
		/**
		 * Attach event-handler <code>fnFunction</code> to the 'open' event of this <code>sap.ui.core.ws.WebSocket</code>.<br>
		 * @param fnFunction The function to call, when the event occurs. This function will be called on the
		 *            oListener-instance (if present) or in a 'static way'.
		 * @param oData The object, that should be passed along with the event-object when firing the event.
		 * @param oListener Object on which to call the given function. If empty, this WebSocket is used.
		 * @return <code>this</code> to allow method chaining
		 */
		 attachOpen(fnFunction:any, oData?:any, oListener?:any): sap.ui.core.ws.WebSocket;
		/**
		 * Closes the connection.
		 * @param iCode Status code that explains why the connection is closed. Must be either 1000, or between 3000 and 4999 (default 1000)
		 * @param sReason Closing reason as a string
		 * @return <code>this</code> to allow method chaining
		 */
		 close(iCode?:number, sReason?:string): sap.ui.core.ws.WebSocket;
		/**
		 * Detach event-handler <code>fnFunction</code> from the 'close' event of this <code>sap.ui.core.ws.WebSocket</code>.<br>
		 * 
		 * The passed function and listener object must match the ones previously used for event registration.
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener Object on which the given function had to be called.
		 * @return <code>this</code> to allow method chaining
		 */
		 detachClose(fnFunction:any, oListener:any): sap.ui.core.ws.WebSocket;
		/**
		 * Detach event-handler <code>fnFunction</code> from the 'error' event of this <code>sap.ui.core.ws.WebSocket</code>.<br>
		 * 
		 * The passed function and listener object must match the ones previously used for event registration.
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener Object on which the given function had to be called.
		 * @return <code>this</code> to allow method chaining
		 */
		 detachError(fnFunction:any, oListener:any): sap.ui.core.ws.WebSocket;
		/**
		 * Detach event-handler <code>fnFunction</code> from the 'message' event of this <code>sap.ui.core.ws.WebSocket</code>.<br>
		 * 
		 * The passed function and listener object must match the ones previously used for event registration.
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener Object on which the given function had to be called.
		 * @return <code>this</code> to allow method chaining
		 */
		 detachMessage(fnFunction:any, oListener:any): sap.ui.core.ws.WebSocket;
		/**
		 * Detach event-handler <code>fnFunction</code> from the 'open' event of this <code>sap.ui.core.ws.WebSocket</code>.<br>
		 * 
		 * The passed function and listener object must match the ones previously used for event registration.
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener Object on which the given function had to be called.
		 * @return <code>this</code> to allow method chaining
		 */
		 detachOpen(fnFunction:any, oListener:any): sap.ui.core.ws.WebSocket;
		/**
		 * Creates a new subclass of class sap.ui.core.ws.WebSocket with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Fire event 'close' to attached listeners.
		 * @param mArguments the arguments to pass along with the event.
		 * @return <code>this</code> to allow method chaining
		 */
		protected fireClose(mArguments?:any): sap.ui.core.ws.WebSocket;
		/**
		 * Fire event 'error' to attached listeners.
		 * @param mArguments the arguments to pass along with the event.
		 * @return <code>this</code> to allow method chaining
		 */
		protected fireError(mArguments?:any): sap.ui.core.ws.WebSocket;
		/**
		 * Fire event 'message' to attached listeners.
		 * @param mArguments the arguments to pass along with the event.
		 * @return <code>this</code> to allow method chaining
		 */
		protected fireMessage(mArguments?:any): sap.ui.core.ws.WebSocket;
		/**
		 * Fire event 'open' to attached listeners.
		 * @param mArguments the arguments to pass along with the event.
		 * @return <code>this</code> to allow method chaining
		 */
		protected fireOpen(mArguments?:any): sap.ui.core.ws.WebSocket;
		/**
		 * 
		 */
		 getInterface();
		/**
		 * Returns a metadata object for class sap.ui.core.ws.WebSocket.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Getter for the protocol selected by the server once the connection is open.
		 * @return protocol
		 */
		 getProtocol(): string;
		/**
		 * Getter for WebSocket readyState.
		 * @return readyState
		 */
		 getReadyState(): sap.ui.core.ws.ReadyState;
		/**
		 * Sends a message.<br>
		 * <br>
		 * If the connection is not yet opened, the message will be queued and sent
		 * when the connection is established.
		 * @param sMessage Message to send
		 * @return <code>this</code> to allow method chaining
		 */
		 send(sMessage:string): sap.ui.core.ws.WebSocket;
	}
}

declare namespace sap.ui.core.ws.SapPcpWebSocket {
	/**
	 * Protocol versions.<br>
	 * One (or more) of these have to be selected to create a SapPcpWebSocket connection
	 * (or no protocol at all).
	 */
	type SUPPORTED_PROTOCOLS = any
}

declare namespace sap.ui.demokit {
	class CodeSampleContainer extends sap.ui.core.Control{
		/**
		 * Constructor for a new CodeSampleContainer.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given
		 * @param mSettings initial settings for the new control
		 */
		 constructor(sId?:string, mSettings?:any);
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>apply</code> event of this <code>sap.ui.demokit.CodeSampleContainer</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.ui.demokit.CodeSampleContainer</code> itself.
		 * 
		 * Fired when the user decides to apply his/her changes to the sample code
		 * @param fnFunction The function to be called when the event occurs
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.demokit.CodeSampleContainer</code> itself
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 attachApply(fnFunction:any, oData?:any, oListener?:any): sap.ui.demokit.CodeSampleContainer;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>apply</code> event of this <code>sap.ui.demokit.CodeSampleContainer</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 detachApply(fnFunction:any, oListener:any): sap.ui.demokit.CodeSampleContainer;
		/**
		 * Creates a new subclass of class sap.ui.demokit.CodeSampleContainer with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Fires event <code>apply</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>code</code> of type <code>string</code>the current code that will be applied</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		protected fireApply(mArguments?:any): sap.ui.demokit.CodeSampleContainer;
		/**
		 * Returns a metadata object for class sap.ui.demokit.CodeSampleContainer.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Gets current value of property <code>scriptElementId</code>.
		 * 
		 * Id of the script element that contains the initial sample code for this code sample.
		 * @return Value of property <code>scriptElementId</code>
		 */
		 getScriptElementId(): string;
		/**
		 * Gets current value of property <code>sourceVisible</code>.
		 * 
		 * Whether the source code is visible or not.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>sourceVisible</code>
		 */
		 getSourceVisible(): boolean;
		/**
		 * Gets current value of property <code>title</code>.
		 * 
		 * A title to be displayed above the code.
		 * @return Value of property <code>title</code>
		 */
		 getTitle(): string;
		/**
		 * Gets current value of property <code>uiAreaId</code>.
		 * 
		 * Id of the container for the running code. This Id can be used in calls to sap.ui.setRoot as if it would be a normal UIArea. Internally, a container UIElement is created with that Id.
		 * @return Value of property <code>uiAreaId</code>
		 */
		 getUiAreaId(): string;
		/**
		 * Gets current value of property <code>width</code>.
		 * 
		 * Width of the CodeSample container.
		 * 
		 * Default value is <code>90%</code>.
		 * @return Value of property <code>width</code>
		 */
		 getWidth(): sap.ui.core.CSSSize;
		/**
		 * Sets a new value for property <code>scriptElementId</code>.
		 * 
		 * Id of the script element that contains the initial sample code for this code sample.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sScriptElementId New value for property <code>scriptElementId</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setScriptElementId(sScriptElementId:string): sap.ui.demokit.CodeSampleContainer;
		/**
		 * Sets a new value for property <code>sourceVisible</code>.
		 * 
		 * Whether the source code is visible or not.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bSourceVisible New value for property <code>sourceVisible</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setSourceVisible(bSourceVisible:boolean): sap.ui.demokit.CodeSampleContainer;
		/**
		 * Sets a new value for property <code>title</code>.
		 * 
		 * A title to be displayed above the code.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sTitle New value for property <code>title</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setTitle(sTitle:string): sap.ui.demokit.CodeSampleContainer;
		/**
		 * Sets a new value for property <code>uiAreaId</code>.
		 * 
		 * Id of the container for the running code. This Id can be used in calls to sap.ui.setRoot as if it would be a normal UIArea. Internally, a container UIElement is created with that Id.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sUiAreaId New value for property <code>uiAreaId</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setUiAreaId(sUiAreaId:string): sap.ui.demokit.CodeSampleContainer;
		/**
		 * Sets a new value for property <code>width</code>.
		 * 
		 * Width of the CodeSample container.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>90%</code>.
		 * @param sWidth New value for property <code>width</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setWidth(sWidth:sap.ui.core.CSSSize): sap.ui.demokit.CodeSampleContainer;
	}
	class CodeViewer extends sap.ui.core.Control{
		/**
		 * Constructor for a new CodeViewer.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given
		 * @param mSettings initial settings for the new control
		 */
		 constructor(sId?:string, mSettings?:any);
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>press</code> event of this <code>sap.ui.demokit.CodeViewer</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.ui.demokit.CodeViewer</code> itself.
		 * 
		 * Called when the mouse button is clicked over the non-editable(!) control
		 * @param fnFunction The function to be called when the event occurs
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.demokit.CodeViewer</code> itself
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 attachPress(fnFunction:any, oData?:any, oListener?:any): sap.ui.demokit.CodeViewer;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>save</code> event of this <code>sap.ui.demokit.CodeViewer</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.ui.demokit.CodeViewer</code> itself.
		 * 
		 * Called when the editor is active and should be saved
		 * @param fnFunction The function to be called when the event occurs
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.demokit.CodeViewer</code> itself
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 attachSave(fnFunction:any, oData?:any, oListener?:any): sap.ui.demokit.CodeViewer;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>press</code> event of this <code>sap.ui.demokit.CodeViewer</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 detachPress(fnFunction:any, oListener:any): sap.ui.demokit.CodeViewer;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>save</code> event of this <code>sap.ui.demokit.CodeViewer</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 detachSave(fnFunction:any, oListener:any): sap.ui.demokit.CodeViewer;
		/**
		 * Creates a new subclass of class sap.ui.demokit.CodeViewer with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Fires event <code>press</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		protected firePress(mArguments?:any): sap.ui.demokit.CodeViewer;
		/**
		 * Fires event <code>save</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		protected fireSave(mArguments?:any): sap.ui.demokit.CodeViewer;
		/**
		 * Gets current value of property <code>editable</code>.
		 * 
		 * Whether the code can be edited or not
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>editable</code>
		 */
		 getEditable(): boolean;
		/**
		 * Gets current value of property <code>height</code>.
		 * 
		 * The CSS height property
		 * @return Value of property <code>height</code>
		 */
		 getHeight(): sap.ui.core.CSSSize;
		/**
		 * Gets current value of property <code>lineNumbering</code>.
		 * 
		 * Whether the code to have line numbering or not
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>lineNumbering</code>
		 */
		 getLineNumbering(): boolean;
		/**
		 * Returns a metadata object for class sap.ui.demokit.CodeViewer.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Gets current value of property <code>source</code>.
		 * 
		 * The source code to display.
		 * @return Value of property <code>source</code>
		 */
		 getSource(): string;
		/**
		 * Gets current value of property <code>visible</code>.
		 * 
		 * Whether the code viewer should be visible
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>visible</code>
		 */
		 getVisible(): boolean;
		/**
		 * Gets current value of property <code>width</code>.
		 * 
		 * The CSS width property
		 * @return Value of property <code>width</code>
		 */
		 getWidth(): sap.ui.core.CSSSize;
		/**
		 * Sets a new value for property <code>editable</code>.
		 * 
		 * Whether the code can be edited or not
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bEditable New value for property <code>editable</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setEditable(bEditable:boolean): sap.ui.demokit.CodeViewer;
		/**
		 * Sets a new value for property <code>height</code>.
		 * 
		 * The CSS height property
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sHeight New value for property <code>height</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setHeight(sHeight:sap.ui.core.CSSSize): sap.ui.demokit.CodeViewer;
		/**
		 * Sets a new value for property <code>lineNumbering</code>.
		 * 
		 * Whether the code to have line numbering or not
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bLineNumbering New value for property <code>lineNumbering</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setLineNumbering(bLineNumbering:boolean): sap.ui.demokit.CodeViewer;
		/**
		 * Sets a new value for property <code>source</code>.
		 * 
		 * The source code to display.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sSource New value for property <code>source</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setSource(sSource:string): sap.ui.demokit.CodeViewer;
		/**
		 * Sets a new value for property <code>visible</code>.
		 * 
		 * Whether the code viewer should be visible
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bVisible New value for property <code>visible</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setVisible(bVisible:boolean): sap.ui.demokit.CodeViewer;
		/**
		 * Sets a new value for property <code>width</code>.
		 * 
		 * The CSS width property
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sWidth New value for property <code>width</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setWidth(sWidth:sap.ui.core.CSSSize): sap.ui.demokit.CodeViewer;
	}
	class FileUploadIntrospector extends sap.ui.core.Control{
		/**
		 * Constructor for a new FileUploadIntrospector.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given
		 * @param mSettings initial settings for the new control
		 */
		 constructor(sId?:string, mSettings?:any);
		/**
		 * Creates a new subclass of class sap.ui.demokit.FileUploadIntrospector with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Gets current value of property <code>autoRefreshInterval</code>.
		 * 
		 * Interval in milliseconds after which the content is checked again. values lower or equal to 0 mean 'no automatic refresh'.
		 * 
		 * Default value is <code>0</code>.
		 * @return Value of property <code>autoRefreshInterval</code>
		 */
		 getAutoRefreshInterval(): string;
		/**
		 * Gets current value of property <code>height</code>.
		 * 
		 * (CSS) Height of the control
		 * @return Value of property <code>height</code>
		 */
		 getHeight(): sap.ui.core.CSSSize;
		/**
		 * Returns a metadata object for class sap.ui.demokit.FileUploadIntrospector.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Gets current value of property <code>uploadUrl</code>.
		 * 
		 * The URL to check the upload content with....
		 * @return Value of property <code>uploadUrl</code>
		 */
		 getUploadUrl(): string;
		/**
		 * Gets current value of property <code>width</code>.
		 * 
		 * Width of the file list
		 * @return Value of property <code>width</code>
		 */
		 getWidth(): sap.ui.core.CSSSize;
		/**
		 * Trigger an explicit refresh of the displayed information
		 */
		 refresh();
		/**
		 * Sets a new value for property <code>autoRefreshInterval</code>.
		 * 
		 * Interval in milliseconds after which the content is checked again. values lower or equal to 0 mean 'no automatic refresh'.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>0</code>.
		 * @param sAutoRefreshInterval New value for property <code>autoRefreshInterval</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setAutoRefreshInterval(sAutoRefreshInterval:string): sap.ui.demokit.FileUploadIntrospector;
		/**
		 * Sets a new value for property <code>height</code>.
		 * 
		 * (CSS) Height of the control
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sHeight New value for property <code>height</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setHeight(sHeight:sap.ui.core.CSSSize): sap.ui.demokit.FileUploadIntrospector;
		/**
		 * Sets a new value for property <code>uploadUrl</code>.
		 * 
		 * The URL to check the upload content with....
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sUploadUrl New value for property <code>uploadUrl</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setUploadUrl(sUploadUrl:string): sap.ui.demokit.FileUploadIntrospector;
		/**
		 * Sets a new value for property <code>width</code>.
		 * 
		 * Width of the file list
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sWidth New value for property <code>width</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setWidth(sWidth:sap.ui.core.CSSSize): sap.ui.demokit.FileUploadIntrospector;
	}
	class HexagonButton extends sap.ui.core.Control{
		/**
		 * Constructor for a new HexagonButton.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given
		 * @param mSettings initial settings for the new control
		 */
		 constructor(sId?:string, mSettings?:any);
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>press</code> event of this <code>sap.ui.demokit.HexagonButton</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.ui.demokit.HexagonButton</code> itself.
		 * 
		 * Fired when the user clicks the hex button
		 * @param fnFunction The function to be called when the event occurs
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.demokit.HexagonButton</code> itself
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 attachPress(fnFunction:any, oData?:any, oListener?:any): sap.ui.demokit.HexagonButton;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>press</code> event of this <code>sap.ui.demokit.HexagonButton</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 detachPress(fnFunction:any, oListener:any): sap.ui.demokit.HexagonButton;
		/**
		 * Creates a new subclass of class sap.ui.demokit.HexagonButton with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Fires event <code>press</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		protected firePress(mArguments?:any): sap.ui.demokit.HexagonButton;
		/**
		 * Gets current value of property <code>color</code>.
		 * 
		 * The color of the hexagon
		 * 
		 * Default value is <code>blue</code>.
		 * @return Value of property <code>color</code>
		 */
		 getColor(): string;
		/**
		 * Gets current value of property <code>enabled</code>.
		 * 
		 * Whether the button is enabled or not.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>enabled</code>
		 */
		 getEnabled(): boolean;
		/**
		 * Gets current value of property <code>icon</code>.
		 * 
		 * Icon to display
		 * @return Value of property <code>icon</code>
		 */
		 getIcon(): string;
		/**
		 * Gets current value of property <code>imagePosition</code>.
		 * 
		 * The position of the contained image. If not set the image is rendered with a fixed relative position.
		 * @return Value of property <code>imagePosition</code>
		 */
		 getImagePosition(): string;
		/**
		 * Returns a metadata object for class sap.ui.demokit.HexagonButton.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Gets current value of property <code>position</code>.
		 * 
		 * The position. If set, the button is rendered with an absolute position.
		 * @return Value of property <code>position</code>
		 */
		 getPosition(): string;
		/**
		 * Sets a new value for property <code>color</code>.
		 * 
		 * The color of the hexagon
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>blue</code>.
		 * @param sColor New value for property <code>color</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setColor(sColor:string): sap.ui.demokit.HexagonButton;
		/**
		 * Sets a new value for property <code>enabled</code>.
		 * 
		 * Whether the button is enabled or not.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bEnabled New value for property <code>enabled</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setEnabled(bEnabled:boolean): sap.ui.demokit.HexagonButton;
		/**
		 * Sets a new value for property <code>icon</code>.
		 * 
		 * Icon to display
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sIcon New value for property <code>icon</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setIcon(sIcon:string): sap.ui.demokit.HexagonButton;
		/**
		 * Sets a new value for property <code>imagePosition</code>.
		 * 
		 * The position of the contained image. If not set the image is rendered with a fixed relative position.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sImagePosition New value for property <code>imagePosition</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setImagePosition(sImagePosition:string): sap.ui.demokit.HexagonButton;
		/**
		 * Sets a new value for property <code>position</code>.
		 * 
		 * The position. If set, the button is rendered with an absolute position.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sPosition New value for property <code>position</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setPosition(sPosition:string): sap.ui.demokit.HexagonButton;
	}
	class HexagonButtonGroup extends sap.ui.core.Control{
		/**
		 * Constructor for a new HexagonButtonGroup.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given
		 * @param mSettings initial settings for the new control
		 */
		 constructor(sId?:string, mSettings?:any);
		/**
		 * Adds some button to the aggregation <code>buttons</code>.
		 * @param oButton the button to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 addButton(oButton:sap.ui.demokit.HexagonButton): sap.ui.demokit.HexagonButtonGroup;
		/**
		 * Destroys all the buttons in the aggregation <code>buttons</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 destroyButtons(): sap.ui.demokit.HexagonButtonGroup;
		/**
		 * Creates a new subclass of class sap.ui.demokit.HexagonButtonGroup with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Gets content of aggregation <code>buttons</code>.
		 * 
		 * The buttons to layout in a grid
		 * @return 
		 */
		 getButtons(): sap.ui.demokit.HexagonButton[];
		/**
		 * Gets current value of property <code>colspan</code>.
		 * 
		 * How many buttons might be placed in the same row of the grid
		 * 
		 * Default value is <code>3</code>.
		 * @return Value of property <code>colspan</code>
		 */
		 getColspan(): number;
		/**
		 * Returns a metadata object for class sap.ui.demokit.HexagonButtonGroup.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Checks for the provided <code>sap.ui.demokit.HexagonButton</code> in the aggregation <code>buttons</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oButton The button whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		 indexOfButton(oButton:sap.ui.demokit.HexagonButton): number;
		/**
		 * Inserts a button into the aggregation <code>buttons</code>.
		 * @param oButton the button to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the button should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the button is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the button is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 insertButton(oButton:sap.ui.demokit.HexagonButton, iIndex:number): sap.ui.demokit.HexagonButtonGroup;
		/**
		 * Removes all the controls from the aggregation <code>buttons</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		 removeAllButtons(): sap.ui.demokit.HexagonButton[];
		/**
		 * Removes a button from the aggregation <code>buttons</code>.
		 * @param vButton The button to remove or its index or id
		 * @return The removed button or <code>null</code>
		 */
		 removeButton(vButton:number|string|sap.ui.demokit.HexagonButton): sap.ui.demokit.HexagonButton;
		/**
		 * Sets a new value for property <code>colspan</code>.
		 * 
		 * How many buttons might be placed in the same row of the grid
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>3</code>.
		 * @param iColspan New value for property <code>colspan</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setColspan(iColspan:number): sap.ui.demokit.HexagonButtonGroup;
	}
	class Tag extends sap.ui.core.Element{
		/**
		 * Constructor for a new Tag.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given
		 * @param mSettings initial settings for the new control
		 */
		 constructor(sId?:string, mSettings?:any);
		/**
		 * Creates a new subclass of class sap.ui.demokit.Tag with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.demokit.Tag.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Gets current value of property <code>text</code>.
		 * 
		 * The text to be disaplyed for this tag.
		 * @return Value of property <code>text</code>
		 */
		 getText(): string;
		/**
		 * Gets current value of property <code>weight</code>.
		 * 
		 * The weight for this tag. Can be any integer value.
		 * 
		 * Default value is <code>1</code>.
		 * @return Value of property <code>weight</code>
		 */
		 getWeight(): number;
		/**
		 * Sets a new value for property <code>text</code>.
		 * 
		 * The text to be disaplyed for this tag.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sText New value for property <code>text</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setText(sText:string): sap.ui.demokit.Tag;
		/**
		 * Sets a new value for property <code>weight</code>.
		 * 
		 * The weight for this tag. Can be any integer value.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>1</code>.
		 * @param iWeight New value for property <code>weight</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setWeight(iWeight:number): sap.ui.demokit.Tag;
	}
	class TagCloud extends sap.ui.core.Control{
		/**
		 * Constructor for a new TagCloud.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given
		 * @param mSettings initial settings for the new control
		 */
		 constructor(sId?:string, mSettings?:any);
		/**
		 * Adds some tag to the aggregation <code>tags</code>.
		 * @param oTag the tag to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 addTag(oTag:sap.ui.demokit.Tag): sap.ui.demokit.TagCloud;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>press</code> event of this <code>sap.ui.demokit.TagCloud</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.ui.demokit.TagCloud</code> itself.
		 * 
		 * Fired when a Tag is clicked.
		 * @param fnFunction The function to be called when the event occurs
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.demokit.TagCloud</code> itself
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 attachPress(fnFunction:any, oData?:any, oListener?:any): sap.ui.demokit.TagCloud;
		/**
		 * Destroys all the tags in the aggregation <code>tags</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 destroyTags(): sap.ui.demokit.TagCloud;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>press</code> event of this <code>sap.ui.demokit.TagCloud</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 detachPress(fnFunction:any, oListener:any): sap.ui.demokit.TagCloud;
		/**
		 * Creates a new subclass of class sap.ui.demokit.TagCloud with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Fires event <code>press</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>tagId</code> of type <code>string</code>Id of the selected Tag.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		protected firePress(mArguments?:any): sap.ui.demokit.TagCloud;
		/**
		 * Gets current value of property <code>maxFontSize</code>.
		 * 
		 * Maximum font size that may be chosen for a tag in this cloud
		 * 
		 * Default value is <code>30</code>.
		 * @return Value of property <code>maxFontSize</code>
		 */
		 getMaxFontSize(): number;
		/**
		 * Returns a metadata object for class sap.ui.demokit.TagCloud.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Gets current value of property <code>minFontSize</code>.
		 * 
		 * Minimum font size that must be used for a tag in this cloud
		 * 
		 * Default value is <code>10</code>.
		 * @return Value of property <code>minFontSize</code>
		 */
		 getMinFontSize(): number;
		/**
		 * Gets content of aggregation <code>tags</code>.
		 * 
		 * The tags displayed in this tag cloud
		 * @return 
		 */
		 getTags(): sap.ui.demokit.Tag[];
		/**
		 * Checks for the provided <code>sap.ui.demokit.Tag</code> in the aggregation <code>tags</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oTag The tag whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		 indexOfTag(oTag:sap.ui.demokit.Tag): number;
		/**
		 * Inserts a tag into the aggregation <code>tags</code>.
		 * @param oTag the tag to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the tag should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the tag is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the tag is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 insertTag(oTag:sap.ui.demokit.Tag, iIndex:number): sap.ui.demokit.TagCloud;
		/**
		 * Removes all the controls from the aggregation <code>tags</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		 removeAllTags(): sap.ui.demokit.Tag[];
		/**
		 * Removes a tag from the aggregation <code>tags</code>.
		 * @param vTag The tag to remove or its index or id
		 * @return The removed tag or <code>null</code>
		 */
		 removeTag(vTag:number|string|sap.ui.demokit.Tag): sap.ui.demokit.Tag;
		/**
		 * Sets a new value for property <code>maxFontSize</code>.
		 * 
		 * Maximum font size that may be chosen for a tag in this cloud
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>30</code>.
		 * @param iMaxFontSize New value for property <code>maxFontSize</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setMaxFontSize(iMaxFontSize:number): sap.ui.demokit.TagCloud;
		/**
		 * Sets a new value for property <code>minFontSize</code>.
		 * 
		 * Minimum font size that must be used for a tag in this cloud
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>10</code>.
		 * @param iMinFontSize New value for property <code>minFontSize</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setMinFontSize(iMinFontSize:number): sap.ui.demokit.TagCloud;
	}
	class UI5EntityCueCard extends sap.ui.core.Control{
		/**
		 * Constructor for a new UI5EntityCueCard.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given
		 * @param mSettings initial settings for the new control
		 */
		 constructor(sId?:string, mSettings?:any);
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>navigate</code> event of this <code>sap.ui.demokit.UI5EntityCueCard</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.ui.demokit.UI5EntityCueCard</code> itself.
		 * 
		 * Fired when a link for a type is activated (clicked) by the user.
		 * 
		 * When property "navigable" is set to true, type links are created for the types of properties, aggregations and associations, for the types of event or method parameters and for the return types of methods (if not void).
		 * 
		 * The default behavior for this event is to set the entityName property to the clicked entityName. Applications can prevent the default by calling the corresponding method on the event object.
		 * @param fnFunction The function to be called when the event occurs
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.demokit.UI5EntityCueCard</code> itself
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 attachNavigate(fnFunction:any, oData?:any, oListener?:any): sap.ui.demokit.UI5EntityCueCard;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>navigate</code> event of this <code>sap.ui.demokit.UI5EntityCueCard</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 detachNavigate(fnFunction:any, oListener:any): sap.ui.demokit.UI5EntityCueCard;
		/**
		 * Creates a new subclass of class sap.ui.demokit.UI5EntityCueCard with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Fires event <code>navigate</code> to attached listeners.
		 * 
		 * Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>entityName</code> of type <code>string</code>Name of the entity (control or type) that has been clicked.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event
		 * @return Whether or not to prevent the default action
		 */
		protected fireNavigate(mArguments?:any): boolean;
		/**
		 * Gets current value of property <code>collapsible</code>.
		 * 
		 * Whether the cue card can be collapsed at all. When set to true, the value of property expanded determines the current collapsed/expanded state. When false, the control is always expanded.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>collapsible</code>
		 */
		 getCollapsible(): boolean;
		/**
		 * Gets current value of property <code>entityName</code>.
		 * 
		 * Qualified name of the control or type to show the documentation for. The name can be specified in the metamodel notation ('sap.ui.core/Control' or in the UI5 resource notation (sap.ui.core.Control).
		 * @return Value of property <code>entityName</code>
		 */
		 getEntityName(): string;
		/**
		 * Gets current value of property <code>expanded</code>.
		 * 
		 * Whether the cue card is currently expanded.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>expanded</code>
		 */
		 getExpanded(): boolean;
		/**
		 * Returns a metadata object for class sap.ui.demokit.UI5EntityCueCard.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Gets current value of property <code>navigable</code>.
		 * 
		 * Whether type information is navigable. Also see event 'navigate'.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>navigable</code>
		 */
		 getNavigable(): boolean;
		/**
		 * Gets current value of property <code>style</code>.
		 * 
		 * Style of the cue card.
		 * @return Value of property <code>style</code>
		 */
		 getStyle(): sap.ui.demokit.UI5EntityCueCardStyle;
		/**
		 * Sets a new value for property <code>collapsible</code>.
		 * 
		 * Whether the cue card can be collapsed at all. When set to true, the value of property expanded determines the current collapsed/expanded state. When false, the control is always expanded.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bCollapsible New value for property <code>collapsible</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setCollapsible(bCollapsible:boolean): sap.ui.demokit.UI5EntityCueCard;
		/**
		 * Sets a new value for property <code>entityName</code>.
		 * 
		 * Qualified name of the control or type to show the documentation for. The name can be specified in the metamodel notation ('sap.ui.core/Control' or in the UI5 resource notation (sap.ui.core.Control).
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sEntityName New value for property <code>entityName</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setEntityName(sEntityName:string): sap.ui.demokit.UI5EntityCueCard;
		/**
		 * Sets a new value for property <code>expanded</code>.
		 * 
		 * Whether the cue card is currently expanded.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bExpanded New value for property <code>expanded</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setExpanded(bExpanded:boolean): sap.ui.demokit.UI5EntityCueCard;
		/**
		 * Sets a new value for property <code>navigable</code>.
		 * 
		 * Whether type information is navigable. Also see event 'navigate'.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bNavigable New value for property <code>navigable</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setNavigable(bNavigable:boolean): sap.ui.demokit.UI5EntityCueCard;
		/**
		 * Sets a new value for property <code>style</code>.
		 * 
		 * Style of the cue card.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sStyle New value for property <code>style</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setStyle(sStyle:sap.ui.demokit.UI5EntityCueCardStyle): sap.ui.demokit.UI5EntityCueCard;
	}
	class UIAreaSubstitute extends sap.ui.core.Element{
		/**
		 * Constructor for a new UIAreaSubstitute.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given
		 * @param mSettings initial settings for the new control
		 */
		 constructor(sId?:string, mSettings?:any);
		/**
		 * Adds some content to the aggregation <code>content</code>.
		 * @param oContent the content to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 addContent(oContent:sap.ui.core.Control): sap.ui.demokit.UIAreaSubstitute;
		/**
		 * Destroys all the content in the aggregation <code>content</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 destroyContent(): sap.ui.demokit.UIAreaSubstitute;
		/**
		 * Creates a new subclass of class sap.ui.demokit.UIAreaSubstitute with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Gets content of aggregation <code>content</code>.
		 * 
		 * Content Area used for the running sample code
		 * @return 
		 */
		 getContent(): sap.ui.core.Control[];
		/**
		 * Returns a metadata object for class sap.ui.demokit.UIAreaSubstitute.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oContent The content whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		 indexOfContent(oContent:sap.ui.core.Control): number;
		/**
		 * Inserts a content into the aggregation <code>content</code>.
		 * @param oContent the content to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the content should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the content is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 insertContent(oContent:sap.ui.core.Control, iIndex:number): sap.ui.demokit.UIAreaSubstitute;
		/**
		 * Removes all the controls from the aggregation <code>content</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		 removeAllContent(): sap.ui.core.Control[];
		/**
		 * Removes a content from the aggregation <code>content</code>.
		 * @param vContent The content to remove or its index or id
		 * @return The removed content or <code>null</code>
		 */
		 removeContent(vContent:number|string|sap.ui.core.Control): sap.ui.core.Control;
	}
}

declare namespace sap.ui.Device {
	/**
	 * Contains information about the used browser.
	 */
	type browser = any
	/**
	 * Event API for screen width changes.
	 * 
	 * This API is based on media queries but can also be used if media queries are not natively supported by the used browser.
	 * In this case, the behavior of media queries is simulated by this API.
	 * 
	 * There are several predefined {@link sap.ui.Device.media.RANGESETS range sets} available. Each of them defines a
	 * set of intervals for the screen width (from small to large). Whenever the screen width changes and the current screen width is in
	 * a different interval to the one before the change, the registered event handlers for the range set are called.
	 * 
	 * If needed, it is also possible to define a custom set of intervals.
	 * 
	 * The following example shows a typical use case:
	 * <pre>
	 * function sizeChanged(mParams) {
	 *     switch(mParams.name) {
	 *         case "Phone":
	 *             // Do what is needed for a little screen
	 *             break;
	 *         case "Tablet":
	 *             // Do what is needed for a medium sized screen
	 *             break;
	 *         case "Desktop":
	 *             // Do what is needed for a large screen
	 *     }
	 * }
	 * 
	 * // Register an event handler to changes of the screen size
	 * sap.ui.Device.media.attachHandler(sizeChanged, null, sap.ui.Device.media.RANGESETS.SAP_STANDARD);
	 * // Do some initialization work based on the current size
	 * sizeChanged(sap.ui.Device.media.getCurrentRange(sap.ui.Device.media.RANGESETS.SAP_STANDARD));
	 * </pre>
	 */
	namespace media {
		/**
		 * Registers the given event handler to change events of the screen width based on the range set with the specified name.
		 * 
		 * The event is fired whenever the screen width changes and the current screen width is in
		 * a different interval of the given range set than before the width change.
		 * 
		 * The event handler is called with a single argument: a map <code>mParams</code> which provides the following information
		 * about the entered interval:
		 * <ul>
		 * <li><code>mParams.from</code>: The start value (inclusive) of the entered interval as a number</li>
		 * <li><code>mParams.to</code>: The end value (exclusive) range of the entered interval as a number or undefined for the last interval (infinity)</li>
		 * <li><code>mParams.unit</code>: The unit used for the values above, e.g. <code>"px"</code></li>
		 * <li><code>mParams.name</code>: The name of the entered interval, if available</li>
		 * </ul>
		 * @param fnFunction The handler function to call when the event occurs. This function will be called in the context of the
		 *                       <code>oListener</code> instance (if present) or on the <code>window</code> instance. A map with information
		 *                       about the entered range set is provided as a single argument to the handler (see details above).
		 * @param sName The name of the range set to listen to. The range set must be initialized beforehand
		 *                  ({@link sap.ui.Device.media.html#initRangeSet}). If no name is provided, the
		 *                  {@link sap.ui.Device.media.RANGESETS.SAP_STANDARD default range set} is used.
		 * @param oListener The object that wants to be notified when the event occurs (<code>this</code> context within the
		 *                        handler function). If it is not specified, the handler function is called in the context of the <code>window</code>.
		 */
		function attachHandler(fnFunction:any, sName:string, oListener?:any);
		/**
		 * Removes a previously attached event handler from the change events of the screen width.
		 * 
		 * The passed parameters must match those used for registration with {@link #attachHandler} beforehand.
		 * @param fnFunction The handler function to detach from the event
		 * @param sName The name of the range set to listen to. If no name is provided, the
		 *                   {@link sap.ui.Device.media.RANGESETS.SAP_STANDARD default range set} is used.
		 * @param oListener The object that wanted to be notified when the event occurred
		 */
		function detachHandler(fnFunction:any, sName:string, oListener?:any);
		/**
		 * Returns information about the current active range of the range set with the given name.
		 * @param sName The name of the range set. The range set must be initialized beforehand ({@link sap.ui.Device.media.html#initRangeSet})
		 * @return Information about the current active interval of the range set. The returned map has the same structure as the argument of the event handlers ({link sap.ui.Device.media#attachHandler})
		 */
		function getCurrentRange(sName:string): any;
		/**
		 * Returns <code>true</code> if a range set with the given name is already initialized.
		 * @param sName The name of the range set.
		 * @return Returns <code>true</code> if a range set with the given name is already initialized
		 */
		function hasRangeSet(sName:string): boolean;
		/**
		 * Initializes a screen width media query range set.
		 * 
		 * This initialization step makes the range set ready to be used for one of the other functions in namespace <code>sap.ui.Device.media</code>.
		 * The most important {@link sap.ui.Device.media.RANGESETS predefined range sets} are initialized automatically.
		 * 
		 * To make a not yet initialized {@link sap.ui.Device.media.RANGESETS predefined range set} ready to be used, call this function with the
		 * name of the range set to be initialized:
		 * <pre>
		 * sap.ui.Device.media.initRangeSet(sap.ui.Device.media.RANGESETS.SAP_3STEPS);
		 * </pre>
		 * 
		 * Alternatively it is possible to define custom range sets as shown in the following example:
		 * <pre>
		 * sap.ui.Device.media.initRangeSet("MyRangeSet", [200, 400], "px", ["Small", "Medium", "Large"]);
		 * </pre>
		 * This example defines the following named ranges:
		 * <ul>
		 * <li><code>"Small"</code>: For screens smaller than 200 pixels.</li>
		 * <li><code>"Medium"</code>: For screens greater than or equal to 200 pixels and smaller than 400 pixels.</li>
		 * <li><code>"Large"</code>: For screens greater than or equal to 400 pixels.</li>
		 * </ul>
		 * The range names are optional. If they are specified a CSS class (e.g. <code>sapUiMedia-MyRangeSet-Small</code>) is also
		 * added to the document root depending on the current active range. This can be suppressed via parameter <code>bSuppressClasses</code>.
		 * @param sName The name of the range set to be initialized - either a {@link sap.ui.Device.media.RANGESETS predefined} or custom one.
		 *                   The name must be a valid id and consist only of letters and numeric digits.
		 * @param aRangeBorders The range borders
		 * @param sUnit The unit which should be used for the values given in <code>aRangeBorders</code>.
		 *                     The allowed values are <code>"px"</code> (default), <code>"em"</code> or <code>"rem"</code>
		 * @param aRangeNames The names of the ranges. The names must be a valid id and consist only of letters and digits. If names
		 *             are specified, CSS classes are also added to the document root as described above. This behavior can be
		 *             switched off explicitly by using <code>bSuppressClasses</code>. <b>Note:</b> <code>aRangeBorders</code> with <code>n</code> entries
		 *             define <code>n+1</code> ranges. Therefore <code>n+1</code> names must be provided.
		 * @param bSuppressClasses Whether or not writing of CSS classes to the document root should be suppressed when
		 *             <code>aRangeNames</code> are provided
		 */
		function initRangeSet(sName:string, aRangeBorders?:number[], sUnit?:string, aRangeNames?:string[], bSuppressClasses?:boolean);
		/**
		 * Removes a previously initialized range set and detaches all registered handlers.
		 * 
		 * Only custom range sets can be removed via this function. Initialized predefined range sets
		 * ({@link sap.ui.Device.media#RANGESETS}) cannot be removed.
		 * @param sName The name of the range set which should be removed.
		 */
		function removeRangeSet(sName:string);
	}
	/**
	 * Common API for orientation change notifications across all platforms.
	 * 
	 * For browsers or devices that do not provide native support for orientation change events
	 * the API simulates them based on the ratio of the document's width and height.
	 */
	namespace orientation {
		/**
		 * Registers the given event handler to orientation change events of the document's window.
		 * 
		 * The event is fired whenever the screen orientation changes and the width of the document's window
		 * becomes greater than its height or the other way round.
		 * 
		 * The event handler is called with a single argument: a map <code>mParams</code> which provides the following information:
		 * <ul>
		 * <li><code>mParams.landscape</code>: If this flag is set to <code>true</code>, the screen is currently in landscape mode, otherwise in portrait mode.</li>
		 * </ul>
		 * @param fnFunction The handler function to call when the event occurs. This function will be called in the context of the
		 *                       <code>oListener</code> instance (if present) or on the <code>window</code> instance. A map with information
		 *                       about the orientation is provided as a single argument to the handler (see details above).
		 * @param oListener The object that wants to be notified when the event occurs (<code>this</code> context within the
		 *                        handler function). If it is not specified, the handler function is called in the context of the <code>window</code>.
		 */
		function attachHandler(fnFunction:any, oListener?:any);
		/**
		 * Removes a previously attached event handler from the orientation change events.
		 * 
		 * The passed parameters must match those used for registration with {@link #attachHandler} beforehand.
		 * @param fnFunction The handler function to detach from the event
		 * @param oListener The object that wanted to be notified when the event occurred
		 */
		function detachHandler(fnFunction:any, oListener?:any);
	}
	/**
	 * Contains information about the operating system of the device.
	 */
	type os = any
	/**
	 * Common API for document window size change notifications across all platforms.
	 */
	namespace resize {
		/**
		 * Registers the given event handler to resize change events of the document's window.
		 * 
		 * The event is fired whenever the document's window size changes.
		 * 
		 * The event handler is called with a single argument: a map <code>mParams</code> which provides the following information:
		 * <ul>
		 * <li><code>mParams.height</code>: The height of the document's window in pixels.</li>
		 * <li><code>mParams.width</code>: The width of the document's window in pixels.</li>
		 * </ul>
		 * @param fnFunction The handler function to call when the event occurs. This function will be called in the context of the
		 *                       <code>oListener</code> instance (if present) or on the <code>window</code> instance. A map with information
		 *                       about the size is provided as a single argument to the handler (see details above).
		 * @param oListener The object that wants to be notified when the event occurs (<code>this</code> context within the
		 *                        handler function). If it is not specified, the handler function is called in the context of the <code>window</code>.
		 */
		function attachHandler(fnFunction:any, oListener?:any);
		/**
		 * Removes a previously attached event handler from the resize events.
		 * 
		 * The passed parameters must match those used for registration with {@link #attachHandler} beforehand.
		 * @param fnFunction The handler function to detach from the event
		 * @param oListener The object that wanted to be notified when the event occurred
		 */
		function detachHandler(fnFunction:any, oListener?:any);
	}
	/**
	 * Contains information about detected capabilities of the used browser or device.
	 */
	type support = any
	/**
	 * Provides a basic categorization of the used device based on various indicators.
	 * 
	 * These indicators are for example the support of touch events, the screen size, the used operation system or
	 * the user agent of the browser.
	 * 
	 * <b>Note:</b> Depending on the capabilities of the device it is also possible that multiple flags are set to <code>true</code>.
	 */
	type system = any
}

declare namespace sap.ui.Device.browser {
	/**
	 * Enumeration containing the names of known browsers.
	 */
	type BROWSER = any
}

declare namespace sap.ui.Device.media {
	/**
	 * Enumeration containing the names and settings of predefined screen width media query range sets.
	 */
	type RANGESETS = any
}

declare namespace sap.ui.Device.os {
	/**
	 * Enumeration containing the names of known operating systems.
	 */
	type OS = any
}

declare namespace sap.ui.layout {
	/**
	 * A string type that is used inside the BlockLayout to set predefined background color to the cells inside
	 * the control.
	 */
	type BlockBackgroundType = any
	/**
	 * A string type that represents Grid's indent values for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 11 that the container has to take, for example: "L2 M4 S6", "M11", "s10" or "l4 m4". Note that the parameters have to be provided in the order large  medium  small.
	 */
	type GridIndent = any
	/**
	 * The position of the Grid. Can be "Left", "Center" or "Right". "Left" is default.
	 */
	type GridPosition = 
	/**
	 * The position of the Grid. Can be "Left", "Center" or "Right". "Left" is default.
	 */
	"Center" |
	/**
	 * The position of the Grid. Can be "Left", "Center" or "Right". "Left" is default.
	 */
	"Left" |
	/**
	 * The position of the Grid. Can be "Left", "Center" or "Right". "Left" is default.
	 */
	"Right";
	/**
	 * A string type that represents Grid's span values for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: "L2 M4 S6", "M12", "s10" or "l4 m4". Note that the parameters have to be provided in the order large  medium  small.
	 */
	type GridSpan = any
	/**
	 * The position of the side content - End (default) and Begin.
	 */
	type SideContentPosition = 
	/**
	 * The position of the side content - End (default) and Begin.
	 */
	"Begin" |
	/**
	 * The position of the side content - End (default) and Begin.
	 */
	"End";
}

declare namespace sap.ui.layout.form {
	/**
	 * A string that defines the number of used cells in a <code>GridLayout</code>. This can be a number from 1 to 16, "auto" or "full".
	 * If set to "auto" the size is determined by the number of fields and the available cells. For labels the auto size is 3 cells.
	 * If set to "full" only one field is allowed within the <code>FormElement</code>. It gets the full width of the row and the label is displayed above. <b>Note:</b> For labels full size has no effect.
	 */
	type GridElementCells = any
}

declare namespace sap.ui.model {
	/**
	 * Analytical Adapter for ODataModels
	 */
	namespace analytics {
		/**
		 * If called on an instance of an (v1/v2) ODataModel it will enrich it with analytics capabilities.
		 */
		function ODataModelAdapter();
	}
	class Binding extends sap.ui.base.EventProvider{
		/**
		 * Constructor for Binding class.
		 * @param oModel the model
		 * @param sPath the path
		 * @param oContext the context object
		 * @param mParameters 
		 */
		 constructor(oModel:sap.ui.model.Model, sPath:string, oContext:sap.ui.model.Context, mParameters?:any);
		/**
		 * Attach event-handler <code>fnFunction</code> to the 'AggregatedDataStateChange' event of this <code>sap.ui.model.Binding</code>.<br/>
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener object on which to call the given function.
		 */
		protected attachAggregatedDataStateChange(fnFunction:any, oListener?:any);
		/**
		 * Attach event-handler <code>fnFunction</code> to the 'change' event of this <code>sap.ui.model.Model</code>.<br/>
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener object on which to call the given function.
		 */
		 attachChange(fnFunction:any, oListener?:any);
		/**
		 * Attach event-handler <code>fnFunction</code> to the 'dataReceived' event of this <code>sap.ui.model.Binding</code>.<br/>
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener object on which to call the given function.
		 */
		 attachDataReceived(fnFunction:any, oListener?:any);
		/**
		 * Attach event-handler <code>fnFunction</code> to the 'dataRequested' event of this <code>sap.ui.model.Binding</code>.<br/>
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener object on which to call the given function.
		 */
		 attachDataRequested(fnFunction:any, oListener?:any);
		/**
		 * Attach event-handler <code>fnFunction</code> to the 'DataStateChange' event of this <code>sap.ui.model.Binding</code>.<br/>
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener object on which to call the given function.
		 */
		protected attachDataStateChange(fnFunction:any, oListener?:any);
		/**
		 * Attach multiple events.
		 * @param oEvents 
		 */
		protected attachEvents(oEvents:any);
		/**
		 * Attach event-handler <code>fnFunction</code> to the 'refresh' event of this <code>sap.ui.model.Binding</code>.<br/>
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener object on which to call the given function.
		 */
		protected attachRefresh(fnFunction:any, oListener?:any);
		/**
		 * Removes all control messages for this binding from the MessageManager in addition to the standard clean-up tasks.
		 */
		 destroy();
		/**
		 * Detach event-handler <code>fnFunction</code> from the 'AggregatedDataStateChange' event of this <code>sap.ui.model.Binding</code>.<br/>
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener object on which to call the given function.
		 */
		protected detachAggregatedDataStateChange(fnFunction:any, oListener?:any);
		/**
		 * Detach event-handler <code>fnFunction</code> from the 'change' event of this <code>sap.ui.model.Model</code>.<br/>
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener object on which to call the given function.
		 */
		 detachChange(fnFunction:any, oListener?:any);
		/**
		 * Detach event-handler <code>fnFunction</code> from the 'dataReceived' event of this <code>sap.ui.model.Binding</code>.<br/>
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener object on which to call the given function.
		 */
		 detachDataReceived(fnFunction:any, oListener?:any);
		/**
		 * Detach event-handler <code>fnFunction</code> from the 'dataRequested' event of this <code>sap.ui.model.Binding</code>.<br/>
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener object on which to call the given function.
		 */
		 detachDataRequested(fnFunction:any, oListener?:any);
		/**
		 * Detach event-handler <code>fnFunction</code> from the 'DataStateChange' event of this <code>sap.ui.model.Binding</code>.<br/>
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener object on which to call the given function.
		 */
		protected detachDataStateChange(fnFunction:any, oListener?:any);
		/**
		 * Detach multiple events-
		 * @param oEvents 
		 */
		protected detachEvents(oEvents:any);
		/**
		 * Detach event-handler <code>fnFunction</code> from the 'refresh' event of this <code>sap.ui.model.Binding</code>.<br/>
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener object on which to call the given function.
		 */
		protected detachRefresh(fnFunction:any, oListener?:any);
		/**
		 * Creates a new subclass of class sap.ui.model.Binding with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Fire event dataReceived to attached listeners. This event may also be fired when an error occured.
		 * @param mArguments the arguments to pass along with the event.
		 */
		protected fireDataReceived(mArguments:any);
		/**
		 * Fire event dataRequested to attached listeners.
		 * @param mArguments the arguments to pass along with the event.
		 */
		protected fireDataRequested(mArguments:any);
		/**
		 * Returns a metadata object for class sap.ui.model.Binding.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Initialize the binding. The message should be called when creating a binding.
		 * The default implementation calls checkUpdate(true).
		 */
		protected initialize();
		/**
		 * Returns whether the binding is initial, which means it did not get an initial value yet
		 * @return whether binding is initial
		 */
		 isInitial(): boolean;
		/**
		 * Returns whether the binding is relative, which means it did not start with a /
		 * @return whether binding is relative
		 */
		 isRelative(): boolean;
		/**
		 * Returns true if the binding is suspended or false if not.
		 * @return whether binding is suspended
		 */
		 isSuspended(): boolean;
		/**
		 * Refreshes the binding, check whether the model data has been changed and fire change event
		 * if this is the case. For server side models this should refetch the data from the server.
		 * To update a control, even if no data has been changed, e.g. to reset a control after failed
		 * validation, please use the parameter bForceUpdate.
		 * @param bForceUpdate Update the bound control even if no data has been changed
		 */
		 refresh(bForceUpdate:boolean);
		/**
		 * Resumes the binding update. Change events will be fired again.
		 * 
		 * When the binding is resumed, a change event will be fired immediately, if the data has changed while the binding
		 * was suspended. For serverside models, a request to the server will be triggered, if a refresh was requested
		 * while the binding was suspended.
		 */
		 resume();
		/**
		 * Suspends the binding update. No change events will be fired.
		 * 
		 * A refresh call with bForceUpdate set to true will also update the binding and fire a change in suspended mode.
		 * Special operations on bindings, which require updates to work properly (as paging or filtering in list bindings)
		 * will also update and cause a change event although the binding is suspended.
		 */
		 suspend();
		/**
		 * Determines if the binding should be updated by comparing the current model against a specified model.
		 * @param oModel The model instance to compare against
		 * @return true if this binding should be updated
		 */
		protected updateRequired(oModel:any): boolean;
	}
	/**
	 * Binding type definitions.
	 */
	type BindingMode = any
	/**
	 * Change Reason for Model/ListBinding/TreeBinding.
	 */
	type ChangeReason = any
	class ClientContextBinding extends sap.ui.model.ContextBinding{
		/**
		 * Constructor for ClientContextBinding
		 * @param oModel 
		 * @param sPath 
		 * @param oContext 
		 * @param mParameters 
		 */
		 constructor(oModel:sap.ui.model.Model, sPath:string, oContext:any, mParameters?:any);
		/**
		 * Creates a new subclass of class sap.ui.model.ClientContextBinding with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.ContextBinding.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.model.ClientContextBinding.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
	}
	class ClientModel extends sap.ui.model.Model{
		/**
		 * Constructor for a new ClientModel.
		 * @param oData URL where to load the data from
		 */
		 constructor(oData:any);
		/**
		 * 
		 */
		 destroy();
		/**
		 * Creates a new subclass of class sap.ui.model.ClientModel with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.Model.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Force no caching.
		 * @param bForceNoCache whether to force not to cache
		 */
		 forceNoCache(bForceNoCache?:boolean);
		/**
		 * Returns the current data of the model.
		 * Be aware that the returned object is a reference to the model data so all changes to that data will also change the model data.
		 * @return the data object
		 */
		 getData();
		/**
		 * Returns a metadata object for class sap.ui.model.ClientModel.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * update all bindings
		 * @param bForceUpdate true/false: Default = false. If set to false an update
		 * 					will only be done when the value of a binding changed.
		 */
		 updateBindings(bForceUpdate:boolean);
	}
	class ClientTreeBindingAdapter {
	}
	class CompositeBinding extends sap.ui.model.PropertyBinding{
		/**
		 * Constructor for CompositeBinding
		 */
		 constructor();
		/**
		 * Attach event-handler <code>fnFunction</code> to the 'AggregatedDataStateChange' event of this
		 * <code>sap.ui.model.CompositeBinding</code>. The CombinedDataStateChange event is fired asynchronously, meaning
		 * that the datastate object given as parameter of the event contains all changes that were applied to the datastate
		 * in the running thread.
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener object on which to call the given function.
		 */
		protected attachAggregatedDataStateChange(fnFunction:any, oListener?:any);
		/**
		 * Attach event-handler <code>fnFunction</code> to the '_change' event of this <code>sap.ui.model.CompositeBinding</code>.<br/>
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener object on which to call the given function.
		 */
		protected attachChange(fnFunction:any, oListener?:any);
		/**
		 * Attach event-handler <code>fnFunction</code> to the 'DataStateChange' event of this <code>sap.ui.model.CompositeBinding</code>.<br/>
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener object on which to call the given function.
		 */
		protected attachDataStateChange(fnFunction:any, oListener?:any);
		/**
		 * Detach event-handler <code>fnFunction</code> from the 'AggregatedDataStateChange' event of this <code>sap.ui.model.CompositeBinding</code>.<br/>
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener object on which to call the given function.
		 */
		protected detachAggregatedDataStateChange(fnFunction:any, oListener?:any);
		/**
		 * Detach event-handler <code>fnFunction</code> from the '_change' event of this <code>sap.ui.model.CompositeBinding</code>.<br/>
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener object on which to call the given function.
		 */
		protected detachChange(fnFunction:any, oListener?:any);
		/**
		 * Detach event-handler <code>fnFunction</code> from the 'DataStateChange' event of this <code>sap.ui.model.CompositeBinding</code>.<br/>
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener object on which to call the given function.
		 */
		protected detachDataStateChange(fnFunction:any, oListener?:any);
		/**
		 * Creates a new subclass of class sap.ui.model.CompositeBinding with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.PropertyBinding.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns the property bindings contained in this composite binding.
		 * @return the property bindings in this composite binding
		 */
		 getBindings(): any[];
		/**
		 * Returns the current external value of the bound target which is formatted via a type or formatter function.
		 * @return the current value of the bound target
		 */
		 getExternalValue(): any;
		/**
		 * Returns a metadata object for class sap.ui.model.CompositeBinding.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Returns the raw values of the property bindings in an array.
		 * @return the values of the internal property bindings in an array
		 */
		 getValue(): any;
		/**
		 * Initialize the binding. The message should be called when creating a binding.
		 * The default implementation calls checkUpdate(true).
		 * Prevent checkUpdate to be triggered while initializing nestend bindings, it is
		 * sufficient to call checkUpdate when all nested bindings are initialized.
		 */
		protected initialize();
		/**
		 * Suspends the binding update. No change events will be fired.
		 * 
		 * A refresh call with bForceUpdate set to true will also update the binding and fire a change in suspended mode.
		 * Special operations on bindings, which require updates to work properly (as paging or filtering in list bindings)
		 * will also update and cause a change event although the binding is suspended.
		 */
		 resume();
		/**
		 * Sets the external value of a composite binding. If no CompositeType is assigned to the binding, the default
		 * implementation assumes a space separated list of values. This will cause the setValue to be called for each
		 * nested binding, except for undefined values in the array.
		 * @param oValue the value to set for this binding
		 */
		 setExternalValue(oValue:any);
		/**
		 * Sets the optional type and internal type for the binding. The type and internal type are used to do the parsing/formatting correctly.
		 * The internal type is the property type of the element which the value is formatted to.
		 * @param oType the type for the binding
		 * @param sInternalType the internal type of the element property which this binding is bound against.
		 */
		 setType(oType:sap.ui.model.CompositeType, sInternalType:string);
		/**
		 * Sets the values. This will cause the setValue to be called for each nested binding, except
		 * for undefined values in the array.
		 * @param aValues the values to set for this binding
		 */
		 setValue(aValues:any[]);
		/**
		 * Suspends the binding update. No change events will be fired.
		 * 
		 * A refresh call with bForceUpdate set to true will also update the binding and fire a change in suspended mode.
		 * Special operations on bindings, which require updates to work properly (as paging or filtering in list bindings)
		 * will also update and cause a change event although the binding is suspended.
		 */
		 suspend();
		/**
		 * Determines if the property bindings in the composite binding should be updated by calling updateRequired on all property bindings with the specified model.
		 * @param oModel The model instance to compare against
		 * @return true if this binding should be updated
		 */
		protected updateRequired(oModel:any): boolean;
	}
	class CompositeDataState extends sap.ui.model.DataState{
		/**
		 * 
		 */
		 constructor();
		/**
		 * Returns or sets whether the data state is changed.
		 * As long as changed was not set to false the data state is dirty
		 * and the corresponding binding will fire data state change events.
		 * @param bNewState the optional new state
		 * @return whether the data state was changed.
		 */
		protected changed(bNewState?:boolean): boolean;
		/**
		 * Creates a new subclass of class sap.ui.model.CompositeDataState with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.DataState.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns the changes of the data state in a map that the control can use in the
		 * <code>refreshDataState</code> method.
		 * The changed property's name is the key in the map. Each element in the map contains an object of below structure.
		 * <pre>
		 *    {
		 *        oldValue : The old value of the property,
		 *        value    : The new value of the property
		 *    }
		 * </pre>
		 * The map only contains the changed properties.
		 * @return the changed of the data state
		 */
		 getChanges(): any;
		/**
		 * Sets an array of control state messages.
		 * @param the control messages
		 * @return <code>this</code> to allow method chaining
		 */
		protected getControlMessages(the:sap.ui.core.Message[]): sap.ui.model.DataState;
		/**
		 * Returns an array of the properties set on the inner datastates
		 */
		protected getInternalProperty();
		/**
		 * Returns the dirty value of a binding that was rejected by a type validation.
		 * This value was of an incorrect type and could not be applied to the model. If the
		 * value was not rejected it will return null. In this case the current
		 * model value can be accessed using the <code>getValue</code> method.
		 * @return the value that was rejected or null
		 */
		 getInvalidValue(): any;
		/**
		 * Returns the array of all state messages or null.
		 * This combines the model and control messages.
		 * @return the array of all messages or null if no {link:sap.ui.core.messages.ModelManager ModelManager} is used.
		 */
		 getMessages(): sap.ui.core.Message[];
		/**
		 * Returns a metadata object for class sap.ui.model.CompositeDataState.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Returns the array of state messages of the model or undefined
		 * @return the array of messages of the model or null if no {link:sap.ui.core.messages.ModelManager ModelManager} is used.
		 */
		 getModelMessages(): sap.ui.core.Message[];
		/**
		 * Returns whether the data state is dirty in the UI control.
		 * A data state is dirty in the UI control if the entered value did not yet pass the type validation.
		 * @return true if the data state is dirty
		 */
		 isControlDirty(): boolean;
		/**
		 * Returns whether the data state is dirty.
		 * A data state is dirty if the value was changed
		 * but is not yet confirmed by a server or the entered value did not yet pass the type validation.
		 * @return true if the data state is dirty
		 */
		 isDirty(): boolean;
		/**
		 * Returns whether the data state is in laundering.
		 * If data is send to the server the data state becomes laundering until the
		 * data was accepted or rejected.
		 * @return true if the data is laundering
		 */
		 isLaundering(): boolean;
	}
	class CompositeType extends sap.ui.model.SimpleType{
		/**
		 * Constructor for a new CompositeType.
		 * @param oFormatOptions options as provided by concrete subclasses
		 * @param oConstraints constraints as supported by concrete subclasses
		 */
		 constructor(oFormatOptions?:any, oConstraints?:any);
		/**
		 * Creates a new subclass of class sap.ui.model.CompositeType with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Format the given set of values in model representation to an output value in the given
		 * internal type. This happens according to the format options, if target type is 'string'.
		 * If aValues is not defined or null, null will be returned.
		 * @param aValues the values to be formatted
		 * @param sInternalType the target type
		 * @return the formatted output value
		 */
		 formatValue(aValues:any[], sInternalType:string): any;
		/**
		 * Returns a metadata object for class sap.ui.model.CompositeType.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Parse a value of an internal type to the expected set of values of the model type.
		 * @param oValue the value to be parsed
		 * @param sInternalType the source type
		 * @param aCurrentValues the current values of all binding parts
		 * @return the parse result array
		 */
		 parseValue(oValue:any, sInternalType:string, aCurrentValues:any[]): any[];
		/**
		 * Validate whether a given value in model representation is valid and meets the
		 * defined constraints (if any).
		 * @param aValues the set of values to be validated
		 */
		 validateValue(aValues:any[]);
	}
	class Context extends sap.ui.base.Object{
		/**
		 * Constructor for Context class.
		 * @param oModel the model
		 * @param sPath the path
		 * @param oContext the context object
		 */
		 constructor(oModel:sap.ui.model.Model, sPath:string, oContext:any);
		/**
		 * Creates a new subclass of class sap.ui.model.Context with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.model.Context.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Getter for model
		 * @return the model
		 */
		 getModel(): sap.ui.core.Model;
		/**
		 * Gets the (model dependent) object the context points to or the object with the given relative binding path
		 * @param sPath the binding path
		 * @return the context object
		 */
		 getObject(sPath:string): any;
		/**
		 * Getter for path of the context itself or a subpath
		 * @param sPath the binding path
		 * @return the binding path
		 */
		 getPath(sPath:string): string;
		/**
		 * Gets the property with the given relative binding path
		 * @param sPath the binding path
		 * @return the property value
		 */
		 getProperty(sPath:string): any;
	}
	class ContextBinding extends sap.ui.model.Binding{
		/**
		 * Constructor for ContextBinding
		 * @param oModel 
		 * @param sPath 
		 * @param oContext 
		 * @param mParameters 
		 * @param oEvents object defining event handlers
		 */
		 constructor(oModel:sap.ui.model.Model, sPath:string, oContext:any, mParameters?:any, oEvents?:any);
		/**
		 * Creates a new subclass of class sap.ui.model.ContextBinding with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.Binding.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.model.ContextBinding.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
	}
	/**
	 * Control-based DataBinding
	 */
	type control = any
	class DataState extends sap.ui.base.Object{
		/**
		 * 
		 */
		 constructor();
		/**
		 * Returns or sets whether the data state is changed.
		 * As long as changed was not set to false the data state is dirty
		 * and the corresponding binding will fire data state change events.
		 * @param bNewState the optional new state
		 * @return whether the data state was changed.
		 */
		protected changed(bNewState?:boolean): boolean;
		/**
		 * Creates a new subclass of class sap.ui.model.DataState with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns the changes of the data state in a map that the control can use in the
		 * <code>refreshDataState</code> method.
		 * The changed property's name is the key in the map. Each element in the map contains an object of below structure.
		 * <pre>
		 *    {
		 *        oldValue : The old value of the property,
		 *        value    : The new value of the property
		 *    }
		 * </pre>
		 * The map only contains the changed properties.
		 * @return the changed of the data state
		 */
		 getChanges(): any;
		/**
		 * Returns the array of state messages of the control or undefined.
		 * @return the array of messages of the control or null if no {link:sap.ui.core.messages.ModelManager ModelManager} is used.
		 */
		 getControlMessages(): sap.ui.core.Message[];
		/**
		 * Returns the dirty value of a binding that was rejected by a type validation.
		 * This value was of an incorrect type and could not be applied to the model. If the
		 * value was not rejected it will return null. In this case the current
		 * model value can be accessed using the <code>getValue</code> method.
		 * @return the value that was rejected or null
		 */
		 getInvalidValue(): any;
		/**
		 * Returns the array of all state messages or null.
		 * This combines the model and control messages.
		 * @return the array of all messages or null if no {link:sap.ui.core.messages.ModelManager ModelManager} is used.
		 */
		 getMessages(): sap.ui.core.Message[];
		/**
		 * Returns a metadata object for class sap.ui.model.DataState.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Returns the array of state messages of the model or undefined
		 * @return the array of messages of the model or null if no {link:sap.ui.core.messages.ModelManager ModelManager} is used.
		 */
		 getModelMessages(): sap.ui.core.Message[];
		/**
		 * Returns the formatted original value of the data.
		 * The original value is the last confirmed value.
		 * @return the original confirmed value of the server
		 */
		 getOriginalValue(): any;
		/**
		 * Returns the formatted value of the data state.
		 * @return The value of the data.
		 */
		 getValue(): any;
		/**
		 * Returns whether the data state is dirty in the UI control.
		 * A data state is dirty in the UI control if the entered value did not yet pass the type validation.
		 * @return true if the data state is dirty
		 */
		 isControlDirty(): boolean;
		/**
		 * Returns whether the data state is dirty.
		 * A data state is dirty if the value was changed
		 * but is not yet confirmed by a server or the entered value did not yet pass the type validation.
		 * @return true if the data state is dirty
		 */
		 isDirty(): boolean;
		/**
		 * Returns whether the data state is in laundering.
		 * If data is send to the server the data state becomes laundering until the
		 * data was accepted or rejected.
		 * @return true if the data is laundering
		 */
		 isLaundering(): boolean;
		/**
		 * Sets an array of control state messages.
		 * @param the control messages
		 * @return <code>this</code> to allow method chaining
		 */
		protected setControlMessages(the:sap.ui.core.Message[]): sap.ui.model.DataState;
		/**
		 * Sets the dirty value that was rejected by the type validation.
		 * @param vInvalidValue the value that was rejected by the type validation or null if the value was valid
		 * @return <code>this</code> to allow method chaining
		 */
		protected setInvalidValue(vInvalidValue:any): sap.ui.model.DataState;
		/**
		 * Sets the laundering state of the data state.
		 * @param bLaundering true if the state is laundering
		 * @return <code>this</code> to allow method chaining
		 */
		protected setLaundering(bLaundering:boolean): sap.ui.model.DataState;
		/**
		 * Sets an array of model state messages.
		 * @param the model messages for this data state.
		 * @return <code>this</code> to allow method chaining
		 */
		 setModelMessages(the:any[]): sap.ui.model.DataState;
		/**
		 * Sets the formatted original value of the data.
		 * @param vOriginalValue the original value
		 * @return <code>this</code> to allow method chaining
		 */
		protected setOriginalValue(vOriginalValue:boolean): sap.ui.model.DataState;
		/**
		 * Sets the formatted value of the data state,
		 * @param vValue the value
		 * @return <code>this</code> to allow method chaining
		 */
		protected setValue(vValue:any): sap.ui.model.DataState;
	}
	class Filter extends sap.ui.base.Object{
		/**
		 * Constructor for Filter.
		 * 
		 * You either pass a single object literal with the filter parameters or use the individual constructor arguments.
		 * No matter which variant is used, only certain combinations of parameters are supported
		 * (the following list uses the names from the object literal):
		 * <ul>
		 * <li>A <code>path</code>, <code>operator</code> and one or two values (<code>value1</code>, <code>value2</code>), depending on the operator</li>
		 * <li>A <code>path</code> and a custom filter function <code>test</code></li>
		 * <li>An array of other filters named <code>filters</code> and a Boolean flag <code>and</code> that specifies whether to combine
		 *     the filters with an AND (<code>true</code>) or an OR (<code>false</code>) operator.</li>
		 * </ul>
		 * An error will be logged to the console if an invalid combination of parameters is provided.
		 * Please note that a model implementation may not support a custom filter function, e.g. if the model does not perform client side filtering.
		 * It also depends on the model implementation if the filtering is case sensitive or not.
		 * See particular model documentation for details.
		 * @param vFilterInfo Filter info object or a path or an array of filters
		 * @param vOperator Either a filter operator or a custom filter function or a Boolean flag that defines how to combine multiple filters
		 * @param oValue1 First value to use with the given filter operator
		 * @param oValue2 Second value to use with the given filter operator (only for some operators)
		 */
		 constructor(vFilterInfo:any|string|sap.ui.model.Filter[], vOperator?:sap.ui.model.FilterOperator|any|boolean, oValue1?:any, oValue2?:any);
		/**
		 * Creates a new subclass of class sap.ui.model.Filter with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.model.Filter.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
	}
	/**
	 * Operators for the Filter.
	 */
	type FilterOperator = any
	/**
	 * Operators for the Filter.
	 */
	type FilterType = any
	/**
	 * JSON-based DataBinding
	 */
	type json = any
	class ListBinding extends sap.ui.model.Binding{
		/**
		 * Constructor for ListBinding
		 * @param oModel 
		 * @param sPath 
		 * @param oContext 
		 * @param aSorters initial sort order (can be either a sorter or an array of sorters)
		 * @param aFilters predefined filter/s (can be either a filter or an array of filters)
		 * @param mParameters 
		 */
		 constructor(oModel:sap.ui.model.Model, sPath:string, oContext:sap.ui.model.Context, aSorters?:any[], aFilters?:any[], mParameters?:any);
		/**
		 * Attach event-handler <code>fnFunction</code> to the 'filter' event of this <code>sap.ui.model.ListBinding</code>.<br/>
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener object on which to call the given function.
		 * @deprecated use the change event. It now contains a parameter (reason : "filter") when a filter event is fired.
		 */
		protected attachFilter(fnFunction:any, oListener?:any);
		/**
		 * Attach event-handler <code>fnFunction</code> to the 'sort' event of this <code>sap.ui.model.ListBinding</code>.<br/>
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener object on which to call the given function.
		 * @deprecated use the change event. It now contains a parameter (reason : "sort") when a sorter event is fired.
		 */
		protected attachSort(fnFunction:any, oListener?:any);
		/**
		 * Detach event-handler <code>fnFunction</code> from the 'filter' event of this <code>sap.ui.model.ListBinding</code>.<br/>
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener object on which to call the given function.
		 * @deprecated use the change event.
		 */
		protected detachFilter(fnFunction:any, oListener?:any);
		/**
		 * Detach event-handler <code>fnFunction</code> from the 'sort' event of this <code>sap.ui.model.ListBinding</code>.<br/>
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener object on which to call the given function.
		 * @deprecated use the change event.
		 */
		protected detachSort(fnFunction:any, oListener?:any);
		/**
		 * Creates a new subclass of class sap.ui.model.ListBinding with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.Binding.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Filters the list according to the filter definitions
		 * @param aFilters Array of filter objects
		 * @param sFilterType Type of the filter which should be adjusted, if it is not given, the standard behaviour applies
		 * @return returns <code>this</code> to facilitate method chaining
		 */
		 filter(aFilters:any[], sFilterType:sap.ui.model.FilterType): sap.ui.model.ListBinding;
		/**
		 * Returns an array of binding contexts for the bound target list.
		 * 
		 * <strong>Note:</strong>The public usage of this method is deprecated, as calls from outside of controls will lead
		 * to unexpected side effects. For avoidance use {@link sap.ui.model.ListBinding.prototype.getCurrentContexts}
		 * instead.
		 * @param iStartIndex the startIndex where to start the retrieval of contexts
		 * @param iLength determines how many contexts to retrieve beginning from the start index.
		 * @return the array of contexts for each row of the bound list
		 */
		protected getContexts(iStartIndex?:number, iLength?:number): sap.ui.model.Context[];
		/**
		 * Returns list of distinct values for the given relative binding path
		 * @param sPath the relative binding path
		 * @return the array of distinct values.
		 */
		 getDistinctValues(sPath:string): any[];
		/**
		 * Gets the group for the given context.
		 * Must only be called if isGrouped() returns that grouping is enabled for this binding. The grouping will be
		 * performed using the first sorter (in case multiple sorters are defined).
		 * @param oContext the binding context
		 * @return the group object containing a key property and optional custom properties
		 */
		 getGroup(oContext:sap.ui.model.Context): any;
		/**
		 * Returns a metadata object for class sap.ui.model.ListBinding.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Indicates whether grouping is enabled for the binding.
		 * Grouping is enabled for a list binding, if at least one sorter exists on the binding and the first sorter
		 * is a grouping sorter.
		 * @return whether grouping is enabled
		 */
		 isGrouped(): boolean;
		/**
		 * Sorts the list according to the sorter object
		 * @param aSorters the Sorter object or an array of sorters which defines the sort order
		 * @return returns <code>this</code> to facilitate method chaining
		 */
		 sort(aSorters:sap.ui.model.Sorter|any[]): sap.ui.model.ListBinding;
	}
	/**
	 * Message DataBinding
	 */
	type message = any
	class MetaModel extends sap.ui.model.Model{
		/**
		 * Constructor for a new MetaModel.
		 */
		 constructor();
		/**
		 * Creates a new subclass of class sap.ui.model.MetaModel with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.Model.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.model.MetaModel.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
	}
	class Model extends sap.ui.core.message.MessageProcessor{
		/**
		 * Constructor for a new Model.
		 * 
		 * Every Model is a MessageProcessor that is able to handle Messages with the normal binding path syntax in the target.
		 */
		 constructor();
		/**
		 * Attach event-handler <code>fnFunction</code> to the 'parseError' event of this <code>sap.ui.model.Model</code>.<br/>
		 * @param fnFunction The function to call, when the event occurs. This function will be called on the
		 *            oListener-instance (if present) or in a 'static way'.
		 * @param oData The object, that should be passed along with the event-object when firing the event.
		 * @param oListener Object on which to call the given function. If empty, the global context (window) is used.
		 * @return <code>this</code> to allow method chaining
		 */
		 attachParseError(fnFunction:any, oData?:any, oListener?:any): sap.ui.model.Model;
		/**
		 * Attach event-handler <code>fnFunction</code> to the 'propertyChange' event of this <code>sap.ui.model.Model</code>.
		 * @param fnFunction The function to call, when the event occurs. This function will be called on the
		 *            oListener-instance (if present) or in a 'static way'.
		 * @param oData The object, that should be passed along with the event-object when firing the event.
		 * @param oListener Object on which to call the given function. If empty, the global context (window) is used.
		 * @return <code>this</code> to allow method chaining
		 */
		 attachPropertyChange(fnFunction:any, oData?:any, oListener?:any): sap.ui.model.Model;
		/**
		 * Attach event-handler <code>fnFunction</code> to the 'requestCompleted' event of this <code>sap.ui.model.Model</code>.
		 * @param fnFunction The function to call, when the event occurs. This function will be called on the
		 *            oListener-instance (if present) or in a 'static way'.
		 * @param oData The object, that should be passed along with the event-object when firing the event.
		 * @param oListener Object on which to call the given function. If empty, the global context (window) is used.
		 * @return <code>this</code> to allow method chaining
		 */
		 attachRequestCompleted(fnFunction:any, oData?:any, oListener?:any): sap.ui.model.Model;
		/**
		 * Attach event-handler <code>fnFunction</code> to the 'requestFailed' event of this <code>sap.ui.model.Model</code>.<br/>
		 * @param fnFunction The function to call, when the event occurs. This function will be called on the
		 *            oListener-instance (if present) or in a 'static way'.
		 * @param oData The object, that should be passed along with the event-object when firing the event.
		 * @param oListener Object on which to call the given function. If empty, this Model is used.
		 * @return <code>this</code> to allow method chaining
		 */
		 attachRequestFailed(fnFunction:any, oData?:any, oListener?:any): sap.ui.model.Model;
		/**
		 * Attach event-handler <code>fnFunction</code> to the 'requestSent' event of this <code>sap.ui.model.Model</code>.
		 * @param fnFunction The function to call, when the event occurs. This function will be called on the
		 *            oListener-instance (if present) or in a 'static way'.
		 * @param oData The object, that should be passed along with the event-object when firing the event.
		 * @param oListener Object on which to call the given function. If empty, the global context (window) is used.
		 * @return <code>this</code> to allow method chaining
		 */
		 attachRequestSent(fnFunction:any, oData?:any, oListener?:any): sap.ui.model.Model;
		/**
		 * Create ContextBinding
		 * @param sPath the path pointing to the property that should be bound or an object
		 *         which contains the following parameter properties: path, context, parameters
		 * @param oContext the context object for this databinding (optional)
		 * @param mParameters additional model specific parameters (optional)
		 * @param oEvents event handlers can be passed to the binding ({change:myHandler})
		 * @return 
		 */
		 bindContext(sPath:string|any, oContext?:any, mParameters?:any, oEvents?:any): sap.ui.model.ContextBinding;
		/**
		 * Implement in inheriting classes
		 * @param sPath the path pointing to the list / array that should be bound
		 * @param oContext the context object for this databinding (optional)
		 * @param aSorters initial sort order (can be either a sorter or an array of sorters) (optional)
		 * @param aFilters predefined filter/s (can be either a filter or an array of filters) (optional)
		 * @param mParameters additional model specific parameters (optional)
		 * @return 
		 */
		 bindList(sPath:string, oContext?:any, aSorters?:sap.ui.model.Sorter, aFilters?:any[], mParameters?:any): sap.ui.model.ListBinding;
		/**
		 * Implement in inheriting classes
		 * @param sPath the path pointing to the property that should be bound
		 * @param oContext the context object for this databinding (optional)
		 * @param mParameters additional model specific parameters (optional)
		 * @return 
		 */
		 bindProperty(sPath:string, oContext?:any, mParameters?:any): sap.ui.model.PropertyBinding;
		/**
		 * Implement in inheriting classes
		 * @param sPath the path pointing to the tree / array that should be bound
		 * @param oContext the context object for this databinding (optional)
		 * @param aFilters predefined filter/s contained in an array (optional)
		 * @param mParameters additional model specific parameters (optional)
		 * @param aSorters predefined sap.ui.model.sorter/s contained in an array (optional)
		 * @return 
		 */
		 bindTree(sPath:string, oContext?:any, aFilters?:any[], mParameters?:any, aSorters?:any[]): sap.ui.model.TreeBinding;
		/**
		 * Implement in inheriting classes
		 * @param sPath the path to create the new context from
		 * @param oContext the context which should be used to create the new binding context
		 * @param mParameters the parameters used to create the new binding context
		 * @param fnCallBack the function which should be called after the binding context has been created
		 * @param bReload force reload even if data is already available. For server side models this should
		 *                   refetch the data from the server
		 * @return the binding context, if it could be created synchronously
		 */
		 createBindingContext(sPath:string, oContext?:any, mParameters?:any, fnCallBack?:any, bReload?:boolean): sap.ui.model.Context;
		/**
		 * Destroys the model and clears the model data.
		 * A model implementation may override this function and perform model specific cleanup tasks e.g.
		 * abort requests, prevent new requests, etc.
		 */
		 destroy();
		/**
		 * Implement in inheriting classes
		 * @param oContext to destroy
		 */
		 destroyBindingContext(oContext:any);
		/**
		 * Detach event-handler <code>fnFunction</code> from the 'parseError' event of this <code>sap.ui.model.Model</code>.<br/>
		 * 
		 * The passed function and listener object must match the ones previously used for event registration.
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener Object on which the given function had to be called.
		 * @return <code>this</code> to allow method chaining
		 */
		 detachParseError(fnFunction:any, oListener:any): sap.ui.model.Model;
		/**
		 * Detach event-handler <code>fnFunction</code> from the 'propertyChange' event of this <code>sap.ui.model.Model</code>.
		 * 
		 * The passed function and listener object must match the ones previously used for event registration.
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener Object on which the given function had to be called.
		 * @return <code>this</code> to allow method chaining
		 */
		 detachPropertyChange(fnFunction:any, oListener:any): sap.ui.model.Model;
		/**
		 * Detach event-handler <code>fnFunction</code> from the 'requestCompleted' event of this <code>sap.ui.model.Model</code>.
		 * 
		 * The passed function and listener object must match the ones previously used for event registration.
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener Object on which the given function had to be called.
		 * @return <code>this</code> to allow method chaining
		 */
		 detachRequestCompleted(fnFunction:any, oListener:any): sap.ui.model.Model;
		/**
		 * Detach event-handler <code>fnFunction</code> from the 'requestFailed' event of this <code>sap.ui.model.Model</code>.<br/>
		 * 
		 * The passed function and listener object must match the ones previously used for event registration.
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener Object on which the given function had to be called.
		 * @return <code>this</code> to allow method chaining
		 */
		 detachRequestFailed(fnFunction:any, oListener:any): sap.ui.model.Model;
		/**
		 * Detach event-handler <code>fnFunction</code> from the 'requestSent' event of this <code>sap.ui.model.Model</code>.
		 * 
		 * The passed function and listener object must match the ones previously used for event registration.
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener Object on which the given function had to be called.
		 * @return <code>this</code> to allow method chaining
		 */
		 detachRequestSent(fnFunction:any, oListener:any): sap.ui.model.Model;
		/**
		 * Creates a new subclass of class sap.ui.model.Model with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.message.MessageProcessor.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Fire event parseError to attached listeners.
		 * @param mArguments the arguments to pass along with the event.
		 * @return <code>this</code> to allow method chaining
		 */
		protected fireParseError(mArguments?:any): sap.ui.model.Model;
		/**
		 * Fire event propertyChange to attached listeners.
		 * @param mArguments the arguments to pass along with the event.
		 * @return <code>this</code> to allow method chaining
		 */
		protected firePropertyChange(mArguments?:any): sap.ui.model.Model;
		/**
		 * Fire event requestCompleted to attached listeners.
		 * @param mArguments the arguments to pass along with the event.
		 * @return <code>this</code> to allow method chaining
		 */
		protected fireRequestCompleted(mArguments?:any): sap.ui.model.Model;
		/**
		 * Fire event requestFailed to attached listeners.
		 * @param mArguments the arguments to pass along with the event.
		 * @return <code>this</code> to allow method chaining
		 */
		protected fireRequestFailed(mArguments?:any): sap.ui.model.Model;
		/**
		 * Fire event requestSent to attached listeners.
		 * @param mArguments the arguments to pass along with the event.
		 * @return <code>this</code> to allow method chaining
		 */
		protected fireRequestSent(mArguments?:any): sap.ui.model.Model;
		/**
		 * Get the default binding mode for the model
		 * @return default binding mode of the model
		 */
		 getDefaultBindingMode(): sap.ui.model.BindingMode;
		/**
		 * Get messages for path
		 * @param sPath The binding path
		 */
		protected getMessagesByPath(sPath:string);
		/**
		 * Returns a metadata object for class sap.ui.model.Model.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Returns the meta model associated with this model if it is available for the concrete
		 * model type.
		 * @return The meta model or undefined if no meta model exists.
		 */
		 getMetaModel(): sap.ui.model.MetaModel;
		/**
		 * Implement in inheriting classes
		 * @param sPath the path to where to read the object
		 * @param oContext the context with which the path should be resolved
		 */
		 getObject(sPath:string, oContext?:any);
		/**
		 * Returns the original value for the property with the given path and context.
		 * The original value is the value that was last responded by a server if using a server model implementation.
		 * @param sPath the path/name of the property
		 * @param oContext the context if available to access the property value
		 * @return vValue the value of the property
		 */
		 getOriginalProperty(sPath:string, oContext?:any): any;
		/**
		 * Implement in inheriting classes
		 * @param sPath the path to where to read the attribute value
		 * @param oContext the context with which the path should be resolved
		 */
		 getProperty(sPath:string, oContext?:any);
		/**
		 * Check if the specified binding mode is supported by the model.
		 * @param sMode the binding mode to check
		 */
		 isBindingModeSupported(sMode:sap.ui.model.BindingMode);
		/**
		 * Returns whether legacy path syntax is used
		 * @return 
		 */
		 isLegacySyntax(): boolean;
		/**
		 * Refresh the model.
		 * This will check all bindings for updated data and update the controls if data has been changed.
		 * @param bForceUpdate Update controls even if data has not been changed
		 */
		 refresh(bForceUpdate:boolean);
		/**
		 * Set the default binding mode for the model. If the default binding mode should be changed,
		 * this method should be called directly after model instance creation and before any binding creation.
		 * Otherwise it is not guaranteed that the existing bindings will be updated with the new binding mode.
		 * @param sMode the default binding mode to set for the model
		 * @return this pointer for chaining
		 */
		 setDefaultBindingMode(sMode:sap.ui.model.BindingMode): sap.ui.model.Model;
		/**
		 * Enables legacy path syntax handling
		 * 
		 * This defines, whether relative bindings, which do not have a defined
		 * binding context, should be compatible to earlier releases which means
		 * they are resolved relative to the root element or handled strict and
		 * stay unresolved until a binding context is set
		 * @param bLegacySyntax the path syntax to use
		 */
		 setLegacySyntax(bLegacySyntax:boolean);
		/**
		 * Sets messages
		 * @param mMessages Messages for this model
		 */
		 setMessages(mMessages:any);
		/**
		 * Set the maximum number of entries which are used for list bindings.
		 * @param iSizeLimit collection size limit
		 */
		 setSizeLimit(iSizeLimit:number);
	}
	/**
	 * OData-based DataBinding Utility Class
	 */
	namespace odata {
		/**
		 * Adapter for TreeBindings to add the ListBinding functionality and use the
		 * tree structure in list based controls.
		 */
		function ODataTreeBindingAdapter();
		/**
		 * Adapter for TreeBindings to add the ListBinding functionality and use the
		 * tree structure in list based controls.
		 */
		function ODataTreeBindingFlat();
	}
	class PropertyBinding extends sap.ui.model.Binding{
		/**
		 * Constructor for PropertyBinding
		 * @param oModel 
		 * @param sPath 
		 * @param oContext 
		 * @param mParameters 
		 */
		 constructor(oModel:sap.ui.model.Model, sPath:string, oContext:sap.ui.model.Context, mParameters?:any);
		/**
		 * Creates a new subclass of class sap.ui.model.PropertyBinding with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.Binding.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns the binding mode
		 * @return the binding mode
		 */
		 getBindingMode(): sap.ui.model.BindingMode;
		/**
		 * Returns the current external value of the bound target which is formatted via a type or formatter function.
		 * @return the current value of the bound target
		 */
		 getExternalValue(): any;
		/**
		 * Returns the formatter function
		 * @return the formatter function
		 */
		 getFormatter(): any;
		/**
		 * Returns a metadata object for class sap.ui.model.PropertyBinding.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Returns the type if any for the binding.
		 * @return the binding type
		 */
		 getType(): sap.ui.model.Type;
		/**
		 * Returns the current value of the bound target
		 * @return the current value of the bound target
		 */
		 getValue(): any;
		/**
		 * Resumes the binding update. Change events will be fired again.
		 * 
		 * When the binding is resumed and the control value was changed in the meantime, the control value will be set to the
		 * current value from the model and a change event will be fired.
		 */
		 resume();
		/**
		 * Sets the binding mode
		 * @param sBindingMode the binding mode
		 */
		protected setBindingMode(sBindingMode:sap.ui.model.BindingMode);
		/**
		 * Sets the value for this binding. The value is parsed and validated against its type and then set to the binding.
		 * A model implementation should check if the current default binding mode permits
		 * setting the binding value and if so set the new value also in the model.
		 * @param oValue the value to set for this binding
		 */
		 setExternalValue(oValue:any);
		/**
		 * Sets the optional formatter function for the binding.
		 * @param fnFormatter the formatter function for the binding
		 */
		 setFormatter(fnFormatter:any);
		/**
		 * Sets the optional type and internal type for the binding. The type and internal type are used to do the parsing/formatting correctly.
		 * The internal type is the property type of the element which the value is formatted to.
		 * @param oType the type for the binding
		 * @param sInternalType the internal type of the element property which this binding is bound against.
		 */
		 setType(oType:sap.ui.model.Type, sInternalType:string);
		/**
		 * Sets the value for this binding. A model implementation should check if the current default binding mode permits
		 * setting the binding value and if so set the new value also in the model.
		 * @param oValue the value to set for this binding
		 */
		 setValue(oValue:any);
	}
	/**
	 * ResourceBundle-based DataBinding
	 */
	type resource = any
	class SelectionModel extends sap.ui.base.EventProvider{
		/**
		 * Constructs an instance of a sap.ui.model.SelectionModel.
		 * @param iSelectionMode <code>sap.ui.model.SelectionModel.SINGLE_SELECTION</code> or <code>sap.ui.model.SelectionModel.MULTI_SELECTION</code>
		 */
		 constructor(iSelectionMode:number);
		/**
		 * Changes the selection to be the union of the current selection
		 * and the range between <code>iFromIndex</code> and <code>iToIndex</code> inclusive.
		 * If <code>iFromIndex</code> is smaller than <code>iToIndex</code>, both parameters are swapped.
		 * 
		 * In <code>SINGLE_SELECTION</code> selection mode, this is equivalent
		 * to calling <code>setSelectionInterval</code>, and only the second index
		 * is used.
		 * 
		 * If this call results in a change to the current selection or lead selection, then a
		 * <code>SelectionChanged</code> event is fired.
		 * @param iFromIndex one end of the interval.
		 * @param iToIndex other end of the interval
		 * @return <code>this</code> to allow method chaining
		 */
		 addSelectionInterval(iFromIndex:number, iToIndex:number): sap.ui.model.SelectionModel;
		/**
		 * Attach event-handler <code>fnFunction</code> to the 'selectionChanged' event of this <code>sap.ui.model.SelectionModel</code>.<br/>
		 * @param fnFunction The function to call, when the event occurs. This function will be called on the
		 *            oListener-instance (if present) or in a 'static way'.
		 * @param oData The object, that should be passed along with the event-object when firing the event.
		 * @param oListener Object on which to call the given function. If empty, this Model is used.
		 * @return <code>this</code> to allow method chaining
		 */
		 attachSelectionChanged(fnFunction:any, oData?:any, oListener?:any): sap.ui.model.SelectionModel;
		/**
		 * Change the selection to the empty set and clears the lead selection.
		 * 
		 * If this call results in a change to the current selection or lead selection, then a
		 * <code>SelectionChanged</code> event is fired.
		 * @return <code>this</code> to allow method chaining
		 */
		 clearSelection(): sap.ui.model.SelectionModel;
		/**
		 * Detach event-handler <code>fnFunction</code> from the 'selectionChanged' event of this <code>sap.ui.model.SelectionModel</code>.<br/>
		 * 
		 * The passed function and listener object must match the ones previously used for event registration.
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener Object on which the given function had to be called.
		 * @return <code>this</code> to allow method chaining
		 */
		 detachSelectionChanged(fnFunction:any, oListener:any): sap.ui.model.SelectionModel;
		/**
		 * Creates a new subclass of class sap.ui.model.SelectionModel with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Fire event 'selectionChanged' to attached listeners.
		 * 
		 * Expects following event parameters:
		 * <ul>
		 * <li>'leadIndex' of type <code>int</code> Lead selection index.</li>
		 * <li>'rowIndices' of type <code>int[]</code> Other selected indices (if available)</li>
		 * </ul>
		 * @param mArguments the arguments to pass along with the event.
		 * @return <code>this</code> to allow method chaining
		 */
		protected fireSelectionChanged(mArguments:any): sap.ui.model.SelectionModel;
		/**
		 * Return the second index argument from the most recent call to
		 * setSelectionInterval(), addSelectionInterval() or removeSelectionInterval().
		 * @return lead selected index
		 */
		 getLeadSelectedIndex(): number;
		/**
		 * Returns a metadata object for class sap.ui.model.SelectionModel.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Returns the selected indices as array.
		 * @return array of selected indices
		 */
		 getSelectedIndices(): number[];
		/**
		 * Returns the current selection mode.
		 * @return the current selection mode
		 */
		 getSelectionMode(): number;
		/**
		 * Returns true if the specified index is selected.
		 * @param iIndex 
		 * @return true if the specified index is selected.
		 */
		 isSelectedIndex(iIndex:number): boolean;
		/**
		 * Moves all selected indices starting at the position <code>iStartIndex</code> <code>iMove</code>
		 * items.
		 * 
		 * This can be used if new items are inserted to the item set and you want to keep the selection.
		 * To handle a deletion of items use <code>sliceSelectionInterval</code>.
		 * 
		 * If this call results in a change to the current selection or lead selection, then a
		 * <code>SelectionChanged</code> event is fired.
		 * @param iStartIndex start at this position
		 * @param iMove 
		 * @return <code>this</code> to allow method chaining
		 */
		 moveSelectionInterval(iStartIndex:number, iMove:number): sap.ui.model.SelectionModel;
		/**
		 * Changes the selection to be the set difference of the current selection
		 * and the indices between <code>iFromIndex</code> and <code>iToIndex</code> inclusive.
		 * If <code>iFromIndex</code> is smaller than <code>iToIndex</code>, both parameters are swapped.
		 * 
		 * If the range of removed selection indices includes the current lead selection,
		 * then the lead selection will be unset (set to -1).
		 * 
		 * If this call results in a change to the current selection or lead selection, then a
		 * <code>SelectionChanged</code> event is fired.
		 * @param iFromIndex one end of the interval.
		 * @param iToIndex other end of the interval
		 * @return <code>this</code> to allow method chaining
		 */
		 removeSelectionInterval(iFromIndex:number, iToIndex:number): sap.ui.model.SelectionModel;
		/**
		 * Selects all rows up to the <code>iToIndex</iToIndex>.
		 * 
		 * If this call results in a change to the current selection, then a
		 * <code>SelectionChanged</code> event is fired.
		 * @param iToIndex end of the interval
		 * @return <code>this</code> to allow method chaining
		 */
		 selectAll(iToIndex:number): sap.ui.model.SelectionModel;
		/**
		 * Changes the selection to be equal to the range <code>iFromIndex</code> and <code>iToIndex</code>
		 * inclusive. If <code>iFromIndex</code> is smaller than <code>iToIndex</code>, both parameters are swapped.
		 * 
		 * In <code>SINGLE_SELECTION</code> selection mode, only <code>iToIndex</iToIndex> is used.
		 * 
		 * If this call results in a change to the current selection, then a
		 * <code>SelectionChanged</code> event is fired.
		 * @param iFromIndex one end of the interval.
		 * @param iToIndex other end of the interval
		 * @return <code>this</code> to allow method chaining
		 */
		 setSelectionInterval(iFromIndex:number, iToIndex:number): sap.ui.model.SelectionModel;
		/**
		 * Sets the selection mode. The following list describes the accepted
		 * selection modes:
		 * <ul>
		 * <li><code>sap.ui.model.SelectionModel.SINGLE_SELECTION</code> -
		 *   Only one list index can be selected at a time. In this mode,
		 *   <code>setSelectionInterval</code> and <code>addSelectionInterval</code> are
		 *   equivalent, both replacing the current selection with the index
		 *   represented by the second argument (the "lead").
		 * <li><code>sap.ui.model.SelectionModel.MULTI_SELECTION</code> -
		 *   In this mode, there's no restriction on what can be selected.
		 * </ul>
		 * @param iSelectionMode selection mode
		 */
		 setSelectionMode(iSelectionMode:number);
		/**
		 * Slices a the indices between the two indices from the selection.
		 * If <code>iFromIndex</code> is smaller than <code>iToIndex</code>, both parameters are swapped.
		 * 
		 * If the range of removed selection indices includes the current lead selection,
		 * then the lead selection will be unset (set to -1).
		 * 
		 * If this call results in a change to the current selection or lead selection, then a
		 * <code>SelectionChanged</code> event is fired.
		 * @param iFromIndex one end of the interval.
		 * @param iToIndex other end of the interval
		 * @return <code>this</code> to allow method chaining
		 */
		 sliceSelectionInterval(iFromIndex:number, iToIndex:number): sap.ui.model.SelectionModel;
	/**
	 * SelectionMode: Multi Selection
	 */
	 MULTI_SELECTION: any
	
	/**
	 * SelectionMode: Single Selection
	 */
	 SINGLE_SELECTION: any
	
	}
	class SimpleType extends sap.ui.model.Type{
		/**
		 * Constructor for a new SimpleType.
		 * @param oFormatOptions options as provided by concrete subclasses
		 * @param oConstraints constraints as supported by concrete subclasses
		 */
		 constructor(oFormatOptions?:any, oConstraints?:any);
		/**
		 * Creates a new subclass of class sap.ui.model.SimpleType with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.Type.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Format the given value in model representation to an output value in the given
		 * internal type. This happens according to the format options, if target type is 'string'.
		 * If oValue is not defined or null, null will be returned.
		 * @param oValue the value to be formatted
		 * @param sInternalType the target type
		 * @return the formatted output value
		 */
		 formatValue(oValue:any, sInternalType:string): any;
		/**
		 * Returns a metadata object for class sap.ui.model.SimpleType.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Parse a value of an internal type to the expected value of the model type.
		 * @param oValue the value to be parsed
		 * @param sInternalType the source type
		 * @return the parse result
		 */
		 parseValue(oValue:any, sInternalType:string): any;
		/**
		 * Validate whether a given value in model representation is valid and meets the
		 * defined constraints (if any).
		 * @param oValue the value to be validated
		 */
		 validateValue(oValue:any);
	}
	class Sorter extends sap.ui.base.Object{
		/**
		 * 
		 * Constructor for Sorter
		 * @param sPath the binding path used for sorting
		 * @param bDescending whether the sort order should be descending
		 * @param vGroup configure grouping of the content, can either be true to enable grouping
		 *        based on the raw model property value, or a function which calculates the group value out of the
		 *        context (e.g. oContext.getProperty("date").getYear() for year grouping). The control needs to
		 *        implement the grouping behaviour for the aggregation which you want to group. In case a function
		 *        is provided it must either return a primitive type value as the group key or an object containing
		 *        a "key" property an may contain additional properties needed for group visualization.
		 * @param fnComparator a custom comparator function, which is used for clientside sorting instead
		 *        of the default comparator method.
		 */
		 constructor(sPath:string, bDescending?:boolean, vGroup?:boolean|any, fnComparator?:any);
		/**
		 * Compares two values
		 * 
		 * This is the default comparator function used for clientside sorting, if no custom comparator is given in the
		 * constructor. It does compare just by using equal/less than/greater than with automatic type casting, except
		 * for null values, which are always last, and string values where localeCompare is used.
		 * 
		 * The comparator method returns -1, 0 or 1, depending on the order of the two items and is
		 * suitable to be used as a comparator method for Array.sort.
		 * @param a the first value to compare
		 * @param b the second value to compare
		 * @return -1, 0 or 1 depending on the compare result
		 */
		 defaultComparator(a:any, b:any): number;
		/**
		 * Creates a new subclass of class sap.ui.model.Sorter with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a group object, at least containing a key property for group detection.
		 * May contain additional properties as provided by a custom group function.
		 * @param oContext the binding context
		 * @return An object containing a key property and optional custom properties
		 */
		 getGroup(oContext:sap.ui.model.Context): any;
		/**
		 * Returns a metadata object for class sap.ui.model.Sorter.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
	}
	class TreeBinding extends sap.ui.model.Binding{
		/**
		 * Constructor for TreeBinding
		 * @param oModel 
		 * @param sPath the path pointing to the tree / array that should be bound
		 * @param oContext the context object for this databinding (optional)
		 * @param aFilters predefined filter/s contained in an array (optional)
		 * @param mParameters additional model specific parameters (optional)
		 * @param aSorters predefined sap.ui.model.sorter/s contained in an array (optional)
		 */
		 constructor(oModel:sap.ui.model.Model, sPath:string, oContext?:any, aFilters?:any[], mParameters?:any, aSorters?:any[]);
		/**
		 * Attach event-handler <code>fnFunction</code> to the '_filter' event of this <code>sap.ui.model.TreeBinding</code>.<br/>
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener object on which to call the given function.
		 * @deprecated use the change event. It now contains a parameter (reason : "filter") when a filter event is fired.
		 */
		protected attachFilter(fnFunction:any, oListener?:any);
		/**
		 * Detach event-handler <code>fnFunction</code> from the '_filter' event of this <code>sap.ui.model.TreeBinding</code>.<br/>
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener object on which to call the given function.
		 * @deprecated use the change event.
		 */
		protected detachFilter(fnFunction:any, oListener?:any);
		/**
		 * Creates a new subclass of class sap.ui.model.TreeBinding with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.Binding.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Filters the tree according to the filter definitions.
		 * @param aFilters Array of sap.ui.model.Filter objects
		 * @param sFilterType Type of the filter which should be adjusted, if it is not given, the standard behaviour applies
		 */
		 filter(aFilters:sap.ui.model.Filter[], sFilterType:sap.ui.model.FilterType);
		/**
		 * Returns the number of child nodes of a specific context
		 * @param oContext the context element of the node
		 * @return the number of children
		 */
		 getChildCount(oContext:any): number;
		/**
		 * Returns a metadata object for class sap.ui.model.TreeBinding.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Returns the current value of the bound target
		 * @param oContext the context element of the node
		 * @param iStartIndex the startIndex where to start the retrieval of contexts
		 * @param iLength determines how many contexts to retrieve beginning from the start index.
		 * @return the array of child contexts for the given node
		 */
		 getNodeContexts(oContext:any, iStartIndex:number, iLength:number): any[];
		/**
		 * Returns the current value of the bound target
		 * @param iStartIndex the startIndex where to start the retrieval of contexts
		 * @param iLength determines how many contexts to retrieve beginning from the start index.
		 * @return the array of child contexts for the root node
		 */
		 getRootContexts(iStartIndex:number, iLength:number): any[];
		/**
		 * Returns if the node has child nodes
		 * @param oContext the context element of the node
		 * @return true if node has children
		 */
		 hasChildren(oContext:any): boolean;
		/**
		 * Sorts the tree according to the sorter definitions.
		 * @param aSorters Array of sap.ui.model.Sorter objects
		 */
		 sort(aSorters:sap.ui.model.Sorter[]);
	}
	class TreeBindingAdapter {
		/**
		 * Calculate the request length based on the given information
		 * @param iMaxGroupSize the maximum group size
		 * @param oSection the information of the current section
		 */
		protected _calculateRequestLength(iMaxGroupSize:number, oSection:any);
		/**
		 * Attach event-handler <code>fnFunction</code> to the 'selectionChanged' event of this <code>sap.ui.model.SelectionModel</code>.<br/>
		 * Event is fired if the selection of tree nodes is changed in any way.
		 * @param fnFunction The function to call, when the event occurs. This function will be called on the
		 *            oListener-instance (if present) or in a 'static way'.
		 * @param oData The object, that should be passed along with the event-object when firing the event.
		 * @param oListener Object on which to call the given function. If empty, this Model is used.
		 * @return <code>this</code> to allow method chaining
		 */
		 attachSelectionChanged(fnFunction:any, oData?:any, oListener?:any): sap.ui.model.SelectionModel;
		/**
		 * Detach event-handler <code>fnFunction</code> from the 'selectionChanged' event of this <code>sap.ui.model.SelectionModel</code>.<br/>
		 * 
		 * The passed function and listener object must match the ones previously used for event registration.
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener Object on which the given function had to be called.
		 * @return <code>this</code> to allow method chaining
		 */
		 detachSelectionChanged(fnFunction:any, oListener:any): sap.ui.model.SelectionModel;
		/**
		 * Fire event 'selectionChanged' to attached listeners.
		 * 
		 * Expects following event parameters:
		 * <ul>
		 * <li>'leadIndex' of type <code>int</code> Lead selection index.</li>
		 * <li>'rowIndices' of type <code>int[]</code> Other selected indices (if available)</li>
		 * </ul>
		 * @param mArguments the arguments to pass along with the event.
		 * @return <code>this</code> to allow method chaining
		 */
		protected fireSelectionChanged(mArguments:any): sap.ui.model.SelectionModel;
		/**
		 * Retrieves the requested part from the tree and returns node objects.
		 * @param iStartIndex 
		 * @param iLength 
		 * @param iThreshold 
		 * @return Tree Node
		 */
		protected getNodes(iStartIndex:any, iLength:any, iThreshold:any): any;
	}
	class TreeBindingCompatibilityAdapter {
	}
	namespace TreeBindingUtils {
		/**
		 * Merges together oNewSection into a set of other sections (aSections)
		 * The array/objects are not modified, the function returns a new section array.
		 * @param aSections the sections into which oNewSection will be merged
		 * @param oNewSection the section which should be merged into aNewSections
		 * @return a new array containing all sections from aSections merged with oNewSection
		 */
		function mergeSections(aSections:any[], oNewSection:any): any[];
	}
	class Type extends sap.ui.base.Object{
		/**
		 * Constructor for a new Type.
		 */
		 constructor();
		/**
		 * Creates a new subclass of class sap.ui.model.Type with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.model.Type.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Returns the name of this type.
		 * @return the name of this type
		 */
		 getName(): string;
	}
	/**
	 * XML-based DataBinding
	 */
	type xml = any
}

declare namespace sap.ui.model.analytics {
	class AnalyticalBinding extends sap.ui.model.TreeBinding{
		/**
		 * Creates a new subclass of class sap.ui.model.analytics.AnalyticalBinding with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.TreeBinding.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Sets filters for matching only a subset of the entities in the bound OData entity set.
		 * 
		 * Invoking this function resets the state of the binding. Subsequent data requests such as calls to getNodeContexts() will
		 * need to trigger OData requests in order to fetch the data that are in line with these filters.
		 * @param aFilter an Array of sap.ui.model.Filter objects or a single Filter instance.
		 * @param sFilterType Type of the filter which should be adjusted.
		 * @return returns <code>this</code> to facilitate method chaining
		 */
		 filter(aFilter:sap.ui.model.Filter[]|sap.ui.model.Filter, sFilterType?:sap.ui.model.FilterType): sap.ui.model.analytics.AnalyticalBinding;
		/**
		 * Gets the analytical information for a column with a given name.
		 * @param sColumnName the column name.
		 * @return analytical information for the column; see {@link #updateAnalyticalInfo}
		 *            for an explanation of the object structure
		 */
		 getAnalyticalInfoForColumn(sColumnName:any): any;
		/**
		 * Gets analytical metadata for the bound OData entity set.
		 * @return analytical metadata for the bound OData entity set
		 */
		 getAnalyticalQueryResult(): sap.ui.model.analytics.odata4analytics.QueryResult;
		/**
		 * Gets details about the dimension properties included in the bound OData entity set.
		 * @return details for every dimension property addressed by its name. The details object provides these properties: name of the dimension,
		 * keyPropertyName for the name of the property holding the dimension key, textPropertyName for the name of the property holding the
		 * text for the dimension, aAttributeName listing all properties holding dimension attributes, grouped as indicator whether or not this
		 * dimension is currently grouped, and analyticalInfo, which contains the binding information for this dimension passed from the
		 * AnalyticalBinding's consumer via call to function updateAnalyticalInfo.
		 */
		 getDimensionDetails(): any;
		/**
		 * Gets the names of the filterable properties in the bound OData entity set.
		 * @return names of properties that can be filtered.
		 */
		 getFilterablePropertyNames(): any[];
		/**
		 * Gets a printable name for a group.
		 * 
		 * The printable name follows the pattern is <code>&lt;label&gt;:&lt;key-value&gt;[-&lt;text-value&gt;]</code>,
		 * where <code>label</code> is the label of the dimension property used at the aggregation level for the group,
		 * <code>key-value</code> is the key value of that dimension for the group, and <code>text-value</code> is the
		 * value of the associated text property, if it is also used in the binding.
		 * 
		 * Whenever a formatter function has been defined for a column displaying the key or text of this dimension, the return value
		 * of this function is applied for the group name instead of the respective key or text value.
		 * @param oContext the parent context identifying the requested group.
		 * @param iLevel the level number of oContext (because the context might occur at multiple levels)
		 * @return a printable name for the group.
		 */
		 getGroupName(oContext:sap.ui.model.Context, iLevel:number): string;
		/**
		 * Gets the total number of contexts contained in a group, if known.
		 * 
		 * For a given group, be aware that the group size might vary over time. In principle, this can happen if the
		 * bound set of OData entities includes measure properties with amount or quantity values. The AnalyticalBinding
		 * recognizes situations where the OData service returns multiple entries for a single group entry due to the fact that a
		 * measure property cannot be aggregated properly, because an amount exists in multiple currencies or a quantity exists
		 * in multiple units. In such situations, the AnalyticalBinding substitutes these entries by a single representative, and
		 * the group size gets reduced by the count of duplicate entries. Finally, since the Binding does not always fetch all children of
		 * a group at once, but only a page with a certain range, such size changes might happen after every page access.
		 * @param oContext the parent context identifying the requested group of child contexts.
		 * @param iLevel the level number of oContext (because the context might occur at multiple levels)
		 * @return The currently known group size, or -1, if not yet determined
		 */
		 getGroupSize(oContext:sap.ui.model.Context, iLevel:number): number;
		/**
		 * Gets details about the measure properties included in the bound OData entity set.
		 * @return details for every measure property addressed by its name. The details object provides these properties: name of the measure,
		 * rawValuePropertyName for the name of the property holding the raw value, unitPropertyName for the name of the property holding the related
		 * value unit or currency, if any, and analyticalInfo, which contains the binding information for this measure passed from the
		 * AnalyticalBinding's consumer via call to function updateAnalyticalInfo.
		 */
		 getMeasureDetails(): any;
		/**
		 * Returns a metadata object for class sap.ui.model.analytics.AnalyticalBinding.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Gets child contexts for a specified parent context.
		 * 
		 * Contexts are returned in a stable order imposed by the
		 * dimension property that defines this aggregation level beneath the parent context: Either a sort order has been specified for this property,
		 * or the entries are returned in ascending order of the values of this dimension property by default.
		 * 
		 * If any of the requested data is missing, an OData request will be triggered to load it.
		 * @param mParameters specifying the aggregation level for which contexts shall be fetched. Supported parameters are:
		 * <ul>
		 * <li>oContext: parent context identifying the requested group of child contexts</li>
		 * <li>level: level number for oContext, because it might occur at multiple levels; context with group ID <code>"/"</code> has level 0</li>
		 * <li>numberOfExpandedLevels: number of child levels that shall be fetched automatically</li>
		 * <li>startIndex: index of first child entry to return from the parent context (zero-based)</li>
		 * <li>length: number of entries to return; counting begins at the given start index</li>
		 * <li>threshold: number of additional entries that shall be locally available in the binding for subsequent
		 * accesses to child entries of the given parent context. </li>
		 * </ul>
		 * @return Array containing the requested contexts of class sap.ui.model.Context, limited by the number of entries contained
		 *            in the entity set at that aggregation level.
		 *            The array will contain less than the requested number of contexts, if some are not locally available and an OData request is
		 *            pending to fetch them. In this case, if the parameter numberOfExpandedLevels > 0, the array will be completely empty.
		 */
		 getNodeContexts(mParameters:any): any[];
		/**
		 * Gets the metadata of a property with a given name.
		 * @param sPropertyName The property name.
		 * @return OData metadata of this property or null if it does not exist.
		 */
		 getProperty(sPropertyName:string): any;
		/**
		 * Gets the label of a property with a given name.
		 * @param sPropertyName The property name.
		 * @return The heading maintained for this property or null if it does not exist.
		 */
		 getPropertyHeading(sPropertyName:string): string;
		/**
		 * Gets the label of a property with a given name.
		 * @param sPropertyName The property name.
		 * @return The label maintained for this property or null if it does not exist.
		 */
		 getPropertyLabel(sPropertyName:string): string;
		/**
		 * Gets the quick info of a property with a given name.
		 * @param sPropertyName The property name.
		 * @return The quick info maintained for this property or null if it does not exist.
		 */
		 getPropertyQuickInfo(sPropertyName:string): string;
		/**
		 * Gets the context for the root aggregation level representing the grand total for all bound measure properties.
		 * 
		 * The context is assigned to parent group ID <code>null</code>. If the binding is configured not to provide a grand total,
		 * this context is empty. If data for this context is not locally available yet, an OData request will be triggered to load it.
		 * 
		 * This function must be called whenever the bound set of OData entities changes, e.g., by changing selected dimensions,
		 * modifying filter conditions, etc.
		 * @param mParameters specifying how the top-most aggregation level shall be fetched. Supported parameters are:
		 * <ul>
		 * <li>numberOfExpandedLevels: number of child levels that shall be fetched automatically</li>
		 * <li>startIndex: index of first entry to return from parent group ID <code>"/"</code> (zero-based)</li>
		 * <li>length: number of entries to return at and after the given start index</li>
		 * <li>threshold: number of additional entries that shall be locally available in the binding for subsequent
		 * accesses to contexts of parent group ID <code>"/"</code> or below, if auto-expanding is selected</li>
		 * </ul>
		 * @return Array with a single object of class sap.ui.model.Context for the root context,
		 *            or an empty array if an OData request is pending to fetch requested contexts that are not yet locally available.
		 */
		 getRootContexts(mParameters:any): any[];
		/**
		 * Gets the names of the sortable properties in the bound OData entity set.
		 * @return names of properties that can be used for sorting the result entities.
		 */
		 getSortablePropertyNames(): any[];
		/**
		 * Gets the total number of entities in the bound OData entity set.
		 * 
		 * Counting takes place at the lowest aggregation level defined by the possible value combinations for the complete set of
		 * dimension properties included in the bound entity set. This means that intermediate aggregate entities with
		 * sub-totals at higher aggregation levels are not counted.
		 * @return the total number of addressed entities in the OData entity set
		 */
		 getTotalSize(): number;
		/**
		 * Determines if the binding has the entries of a given aggregation level locally available.
		 * 
		 * If so, no further OData request is required to fetch any of them.
		 * @param oContext the parent context identifying the aggregation level.
		 * @param iLevel the level number of oContext (because the context might occur at multiple levels).
		 * @return property of sap.ui.model.analytics.AnalyticalBinding.ContextsAvailabilityStatus,
		 * indicating whether all, some, or none of the entries are locally available.
		 */
		 hasAvailableNodeContexts(oContext:sap.ui.model.Context, iLevel:number): boolean;
		/**
		 * Determines if the contexts in a specified group have further children. If so,
		 * any of these group contexts can be a parent context of a nested sub-group in
		 * a subsequent aggregation level.
		 * @param oContext the parent context identifying the requested group of child contexts.
		 * @param mParameters The only supported parameter is level as the level number of oContext (because the context might occur at multiple levels)
		 * @return true if and only if the contexts in the specified group have further children.
		 */
		 hasChildren(oContext:sap.ui.model.Context, mParameters:any): boolean;
		/**
		 * Determines if any of the properties included in the bound OData entity set is a measure property.
		 * @return true if and only one or more properties are measure properties.
		 */
		 hasMeasures(): boolean;
		/**
		 * Determines if a given name refers to a measure property
		 * @param sPropertyName The property name.
		 * @return true if and only if the bound OData entity set includes a measure property with this name.
		 */
		 isMeasure(sPropertyName:string): boolean;
		/**
		 * Loads child contexts of multiple groups.
		 * @param mGroupIdRanges specifies index ranges of child contexts to be loaded for multiple groups identified by their ID. A group index range is
		 *            given by an object consisting of startIndex, length, threshold. For every group ID, the map holds an array of such range objects.
		 */
		 loadGroups(mGroupIdRanges:any);
		/**
		 * Determines if the binding has been configured to provide a grand total for the selected measure properties.
		 * @return true if and only if the binding provides a context for the grand totals of all selected measure properties.
		 */
		 providesGrandTotal(): boolean;
		/**
		 * Refreshes the binding, check whether the model data has been changed and fire change event if this is the case. For service side models this should refetch
		 * the data from the service. To update a control, even if no data has been changed, e.g. to reset a control after failed validation, please use the parameter
		 * bForceUpdate.
		 * @param bForceUpdate Update the bound control even if no data has been changed
		 */
		 refresh(bForceUpdate?:boolean);
		/**
		 * Sets sorters for retrieving the entities in the bound OData entity set in a specific order.
		 * 
		 * Invoking this function resets the state of the binding. Subsequent data requests such as calls to getNodeContexts() will
		 * need to trigger OData requests in order to fetch the data that are in line with these sorters.
		 * @param aSorter an sorter object or an array of sorter objects which define the sort order.
		 * @return returns <code>this</code> to facilitate method chaining.
		 */
		 sort(aSorter:sap.ui.model.Sorter|any[]): sap.ui.model.analytics.AnalyticalBinding;
		/**
		 * Updates the binding's structure with new analytical information.
		 * 
		 * Analytical information is the mapping of UI columns to properties in the bound OData entity set. Every column object contains
		 * the name of the bound property and in addition:
		 * <ol>
		 *   <li>A column bound to a dimension property has further boolean properties:
		 *     <ul>
		 *       <li>grouped: dimension will be used for building groups</li>
		 *       <li>visible: if the column is visible, values for the related property will be fetched from the OData service</li>
		 *       <li>inResult: if the column is not visible, but declared to be part of the result, values for the related property
		 *       will also be fetched from the OData service</li>
		 *     </ul>
		 *   </li>
		 *   <li>A column bound to a measure property has further boolean properties:
		 *     <ul>
		 *       <li>total: totals and sub-totals will be provided for the measure at all aggregation levels</li>
		 *     </ul>
		 *   </li>
		 * </ol>
		 * 
		 * Invoking this function resets the state of the binding and subsequent data requests such as calls to getNodeContexts() will
		 * need to trigger OData requests in order to fetch the data that are in line with this analytical information.
		 * 
		 * Please be aware that a call of this function might lead to additional back-end requests, as well as a control re-rendering later on.
		 * Whenever possible use the API of the analytical control, instead of relying on the binding.
		 * @param aColumns an array with objects holding the analytical information for every column, from left to right.
		 */
		protected updateAnalyticalInfo(aColumns:any[]);
	}
	class AnalyticalTreeBindingAdapter {
		/**
		 * Retrieves the currently set number of expanded levels from the Binding (commonly an AnalyticalBinding).
		 * @return the number of expanded levels
		 */
		protected getNumberOfExpandedLevels(): number;
		/**
		 * Checks if the AnalyticalBinding has totaled measures available.
		 * Used for rendering sum rows.
		 * @return wether the binding has totaled measures or not
		 */
		 hasTotaledMeasures(): boolean;
		/**
		 * Sets the number of expanded levels on the TreeBinding (commonly an AnalyticalBinding).
		 * This is NOT the same as AnalyticalTreeBindingAdapter#collapse or AnalyticalTreeBindingAdapter#expand.
		 * Setting the number of expanded levels leads to different requests.
		 * This function is used by the AnalyticalTable for the ungroup/ungroup-all feature.
		 * @param iLevels the number of levels which should be expanded, minimum is 0
		 */
		protected setNumberOfExpandedLevels(iLevels:number);
	}
	class BatchResponseCollector {
		/**
		 * Constructor for a batch response collecting component.
		 * @param mParams optional Setup-Parameter, @see BatchResponseCollector#setup
		 */
		 constructor(mParams?:any);
		/**
		 * Collects responses of type BatchResponseCollector.TYPE_SUCCESS and BatchResponseCollector.TYPE_ERROR.
		 * 
		 * Keeps track of all collected responses and fires the necessary events after all responses for the
		 * requests, given in the constructor, have returned.
		 * @param oResponse the response which should be collected
		 * @param sResponseType the type of the response, either BatchResponseCollector.TYPE_SUCCESS
		 * 									or BatchResponseCollector.TYPE_ERROR
		 */
		 collect(oResponse:any, sResponseType?:string);
		/**
		 * Convenience function to collect an error response.
		 * 
		 * Internally BatchResponseCollector#collect is called, the second parameter is set to BatchResponseCollector.TYPE_ERROR
		 * @param oResponse the erroneous response object
		 */
		 error(oResponse:any);
		/**
		 * Setup-Function to initialize/reset the BatchResponseCollector.
		 * @param mParams optional Setup-Parameter
		 */
		 setup(mParams?:any);
		/**
		 * Convenience function to collect a success response.
		 * 
		 * Internally BatchResponseCollector#collect is called with second parameter BatchResponseCollector.TYPE_SUCCESS
		 * @param oResponse the successful response, which should be collected
		 */
		 success(oResponse:any);
	}
	/**
	 * The OData4Analytics API is purely experimental, not yet functionally complete
	 * and not meant for productive usage. At present, its only purpose is to
	 * demonstrate how easy analytical extensions of OData4SAP can be consumed.
	 * 
	 * <em>USE OBJECTS VIA METHODS ONLY - DO NOT ACCESS JAVASCRIPT OBJECT PROPERTIES DIRECTLY !</em>
	 * 
	 * Lazy initialization of attributes will cause unexpected values when you
	 * access object attributes directly.
	 */
	namespace odata4analytics {
		/**
		 * Specify which components of the dimension shall be included in the value
		 * set.
		 * @param bIncludeText Indicator whether or not to include the dimension text (if
		 *            available) in the value set.
		 * @param bIncludeAttributes Indicator whether or not to include all dimension attributes
		 *            (if available) in the value set.
		 */
		function includeDimensionTextAttributes(bIncludeText:any, bIncludeAttributes:any);
	}
}

declare namespace sap.ui.model.analytics.odata4analytics {
	class Dimension {
		/**
		 * Create a representation of a dimension provided by an analytic query. Do not create your own instances.
		 * @param oQueryResult The query result containing this dimension
		 * @param oProperty The DataJS object object representing the dimension
		 */
		 constructor(oQueryResult:sap.ui.model.analytics.odata4analytics.QueryResult, oProperty:any);
		/**
		 * Find attribute by name
		 * @param sName Attribute name
		 * @return The dimension attribute
		 *          object with this name or null if it does not exist
		 */
		 findAttributeByName(sName:string): sap.ui.model.analytics.odata4analytics.Dimension;
		/**
		 * Get the names of all attributes included in this dimension
		 * @return List of all attribute names
		 */
		 getAllAttributeNames(): string;
		/**
		 * Get all attributes of this dimension
		 * @return An object with individual JS properties for each
		 *          attribute of this dimension. The JS object properties all are
		 *          objects of type odata4analytics.DimensionAttribute. The
		 *          names of the JS object properties are given by the OData entity
		 *          type property names representing the dimension attribute keys.
		 */
		 getAllAttributes(): any;
		/**
		 * Get query result containing this dimension
		 * @return The query result object
		 */
		 getContainingQueryResult(): sap.ui.model.analytics.odata4analytics.QueryResult;
		/**
		 * Get associated hierarchy
		 * @return The hierarchy object or null if there is none. It can
		 *          be an instance of class
		 *          odata4analytics.RecursiveHierarchy (TODO later: or a
		 *          leveled hierarchy). Use methods isLeveledHierarchy and
		 *          isRecursiveHierarchy to determine object type.
		 */
		 getHierarchy(): any;
		/**
		 * Get the key property
		 * @return The DataJS object representing the property for the
		 *          dimension key
		 */
		 getKeyProperty(): any;
		/**
		 * Get label
		 * @return The (possibly language-dependent) label text for this
		 *          dimension
		 */
		 getLabelText(): string;
		/**
		 * Get master data entity set for this dimension
		 * @return The master data entity set
		 *         for this dimension, or null, if it does not exist
		 */
		 getMasterDataEntitySet(): sap.ui.model.analytics.odata4analytics.EntitySet;
		/**
		 * Get the name of the dimension
		 * @return The name of this dimension, which is identical to the
		 *          name of the dimension key property in the entity type
		 */
		 getName(): string;
		/**
		 * Get super-ordinate dimension
		 * @return The super-ordinate dimension or null if there is none
		 */
		 getSuperOrdinateDimension(): any;
		/**
		 * Get text property related to this dimension
		 * @return The DataJS object representing the text property or
		 *          null if it does not exist
		 */
		 getTextProperty(): any;
		/**
		 * Get indicator whether or not master data is available for this dimension
		 * @return True iff master data is available
		 */
		 hasMasterData(): boolean;
	}
	class DimensionAttribute {
		/**
		 * Create a representation of a dimension attribute provided by an analytic
		 * query. Do not create your own instances.
		 * @param oQueryResult The query result containing this dimension attribute
		 * @param oProperty The DataJS object object representing the dimension
		 *            attribute
		 */
		 constructor(oQueryResult:sap.ui.model.analytics.odata4analytics.QueryResult, oProperty:any);
		/**
		 * Get dimension
		 * @return The dimension object
		 *          containing this attribute
		 */
		 getDimension(): sap.ui.model.analytics.odata4analytics.Dimension;
		/**
		 * Get the key property
		 * @return The DataJS object representing the property for the key
		 *          of this dimension attribute
		 */
		 getKeyProperty(): any;
		/**
		 * Get label
		 * @return The (possibly language-dependent) label text for this
		 *          dimension attribute
		 */
		 getLabelText(): string;
		/**
		 * Get the name of the dimension attribute
		 * @return The name of the dimension attribute, which is identical
		 *          to the name of the property in the entity type holding the
		 *          attribute value
		 */
		 getName(): string;
		/**
		 * Get text property related to this dimension attribute
		 * @return The DataJS object representing the text property or
		 *          null if it does not exist
		 */
		 getTextProperty(): any;
	}
	class DimensionMemberSetRequest {
		/**
		 * Create a request object for interaction with a dimension value help. Such a
		 * value help is served by either the query result entity set, in which case the
		 * returned dimension members are limited to those also used in the query result
		 * data. Or, the value help is populated by a master data entity set, if made
		 * available by the service. In this case, the result will include all valid
		 * members for that dimension.
		 * @param oDimension Description of a dimension
		 * @param oParameterizationRequest (optional) Request object for
		 *            interactions with the parameterization of the query result or (not
		 *            yet supported) master data entity set Such an object is required
		 *            if the entity set holding the dimension members includes
		 *            parameters.
		 * @param bUseMasterData (optional) Indicates use of master data for
		 *            determining the dimension members.
		 */
		 constructor(oDimension:sap.ui.model.analytics.odata4analytics.Dimension, oParameterizationRequest:sap.ui.model.analytics.odata4analytics.ParameterizationRequest, bUseMasterData:boolean);
		/**
		 * Get the filter expression for this request.
		 * 
		 * Expressions are represented by separate objects. If none exists so far, a
		 * new expression object gets created.
		 * @return The filter object
		 *          associated to this request.
		 */
		 getFilterExpression(): sap.ui.model.analytics.odata4analytics.FilterExpression;
		/**
		 * Returns the current page boundaries as object with properties
		 * <code>start</code> and <code>end</code>. If the end of the page is
		 * unbounded, <code>end</code> is null.
		 * @return the current page boundaries as object
		 */
		 getResultPageBoundaries(): any;
		/**
		 * Get the sort expression for this request.
		 * 
		 * Expressions are represented by separate objects. If none exists so far, a
		 * new expression object gets created.
		 * @return The sort object
		 *          associated to this request.
		 */
		 getSortExpression(): sap.ui.model.analytics.odata4analytics.SortExpression;
		/**
		 * Get the value of an query option for the OData request URI corresponding
		 * to this request.
		 * @param sQueryOptionName Identifies the query option: $select,
		 *            $filter,... or any custom query option
		 * @return The value of the requested query option or null, if
		 *          this option is not used for the OData request.
		 */
		 getURIQueryOptionValue(sQueryOptionName:string): string;
		/**
		 * Get the URI to locate the entity set for the dimension memebers.
		 * @param sServiceRootURI (optional) Identifies the root of the OData
		 *            service
		 * @return The resource path of the URI pointing to the entity
		 *          set. It is a relative URI unless a service root is given, which
		 *          would then prefixed in order to return a complete URL.
		 */
		 getURIToDimensionMemberEntitySet(sServiceRootURI:string): string;
		/**
		 * Get the unescaped URI to fetch the dimension members, optionally
		 * augmented by text and attributes.
		 * @param sServiceRootURI (optional) Identifies the root of the OData
		 *            service
		 * @return The unescaped URI that contains the OData resource path
		 *          and OData system query options to express the request for the
		 *          parameter value set..
		 */
		 getURIToDimensionMemberEntries(sServiceRootURI:string): string;
		/**
		 * Set the filter expression for this request.
		 * 
		 * Expressions are represented by separate objects. Calling this method
		 * replaces the filter object maintained by this request.
		 * @param oFilter The filter object to be associated with this request.
		 */
		 setFilterExpression(oFilter:sap.ui.model.analytics.odata4analytics.FilterExpression);
		/**
		 * Set the parameterization request required for retrieving dimension
		 * members directly from the query result, if it is parameterized.
		 * @param oParameterizationRequest Request object for interactions with the parameterization of
		 *            this query result
		 */
		 setParameterizationRequest(oParameterizationRequest:any);
		/**
		 * Set further options to be applied for the OData request
		 * @param bIncludeCount Indicates whether or not the result shall
		 *            include a count for the returned entities. Default is not to
		 *            include it. Pass null to keep current setting.
		 */
		 setRequestOptions(bIncludeCount:boolean);
		/**
		 * Specify that only a page of the query result shall be returned. A page is
		 * described by its boundaries, that are row numbers for the first and last
		 * rows in the query result to be returned.
		 * @param start The first row of the query result to be returned.
		 *            Numbering starts at 1. Passing null is equivalent to start
		 *            with the first row.
		 * @param end The last row of the query result to be returned. Passing
		 *            null is equivalent to get all rows up to the end of the query
		 *            result.
		 */
		 setResultPageBoundaries(start:number, end:number);
		/**
		 * Set the sort expression for this request.
		 * 
		 * Expressions are represented by separate objects. Calling this method
		 * replaces the sort object maintained by this request.
		 * @param oSorter The sort object to be associated with this request.
		 */
		 setSortExpression(oSorter:sap.ui.model.analytics.odata4analytics.SortExpression);
	}
	class EntitySet {
		/**
		 * Create a representation of an OData entity set in the context of an analytic
		 * query. Do not create your own instances.
		 * @param oModel DataJS object for the OData model containing this entity
		 *            set
		 * @param oSchema DataJS object for the schema surrounding the container of
		 *            this entity set
		 * @param oContainer DataJS object for the container holding this entity set
		 * @param oEntitySet DataJS object for the entity set
		 * @param oEntityType DataJS object for the entity type
		 */
		 constructor(oModel:any, oSchema:any, oContainer:any, oEntitySet:any, oEntityType:any);
		/**
		 * Get entity type used for this entity set
		 * @return The DataJS object representing the entity type
		 */
		 getEntityType(): any;
		/**
		 * Get the fully qualified name for this entity type
		 * @return The fully qualified name
		 */
		 getQName(): string;
		/**
		 * Get full description for this entity set
		 * @return The DataJS object representing the entity set
		 */
		 getSetDescription(): any;
		/**
		 * Get names of properties in this entity set that can be updated
		 * @return An object with individual JS properties for each
		 *          updatable property. For testing whether propertyName is the name
		 *          of an updatable property, use
		 *          <code>getUpdatablePropertyNameSet()[propertyName]</code>. The
		 *          included JS object properties are all set to true.
		 */
		 getUpdatablePropertyNameSet(): any;
	}
	class EntityType {
		/**
		 * Create a representation of an OData entity type in the context of an analytic
		 * query. Do not create your own instances.
		 * @param oModel DataJS object for the OData model containing this entity
		 *            type
		 * @param oSchema DataJS object for the schema containing this entity type
		 * @param oEntityType DataJS object for the entity type
		 */
		 constructor(oModel:any, oSchema:any, oEntityType:any);
		/**
		 * Find property by name
		 * @param sPropertyName Property name
		 * @return The DataJS object representing the property or null if
		 *          it does not exist
		 */
		 findPropertyByName(sPropertyName:string): any;
		/**
		 * Get the names of all properties with an associated hierarchy
		 * @return List of all property names
		 */
		 getAllHierarchyPropertyNames(): string;
		/**
		 * Get names of properties that can be filtered, that is they can be used in
		 * $filter expressions
		 * @return Array with names of properties that can be
		 *          filtered.
		 */
		 getFilterablePropertyNames(): string;
		/**
		 * Get heading of the property with specified name (identified by property
		 * metadata annotation sap:heading)
		 * @param sPropertyName Property name
		 * @return The heading string
		 */
		 getHeadingOfProperty(sPropertyName:string): string;
		/**
		 * Get the hierarchy associated to a given property Based on the current
		 * specification, hierarchies are always recursive. TODO: Extend behavior
		 * when leveled hierarchies get in scope
		 * @param sName Parameter name
		 * @return The hierarchy
		 *          object or null if it does not exist
		 */
		 getHierarchy(sName:string): sap.ui.model.analytics.odata4analytics.RecursiveHierarchy;
		/**
		 * Get key properties of this type
		 * @return The list of key property names
		 */
		 getKeyProperties(): string;
		/**
		 * Get label of the property with specified name (identified by property
		 * metadata annotation sap:label)
		 * @param sPropertyName Property name
		 * @return The label string
		 */
		 getLabelOfProperty(sPropertyName:string): string;
		/**
		 * Get all properties
		 * @return Object with (JavaScript) properties, one for each (OData
		 *         entity type) property. These (JavaScript) properties hold the
		 *         DataJS object representing the property
		 */
		 getProperties(): any;
		/**
		 * Get properties for which filter restrictions have been specified
		 * @return Object with (JavaScript) properties, one for each
		 *          (OData entity type) property. The property value is from
		 *          odata4analytics.EntityType.propertyFilterRestriction and
		 *          indicates the filter restriction for this property.
		 */
		 getPropertiesWithFilterRestrictions(): any;
		/**
		 * Get the fully qualified name for this entity type
		 * @return The fully qualified name
		 */
		 getQName(): string;
		/**
		 * Get quick info of the property with specified name (identified by property
		 * metadata annotation sap:quickinfo)
		 * @param sPropertyName Property name
		 * @return The quick info string
		 */
		 getQuickInfoOfProperty(sPropertyName:string): string;
		/**
		 * Get names of properties that must be filtered, that is they must appear
		 * in every $filter expression
		 * @return Array with names of properties that must be
		 *          filtered.
		 */
		 getRequiredFilterPropertyNames(): string;
		/**
		 * Get names of properties that can be sorted, that is they can be used in
		 * $orderby expressions
		 * @return Array with names of properties that can be
		 *          sorted.
		 */
		 getSortablePropertyNames(): string;
		/**
		 * Get the super-ordinate property related to the property with specified
		 * name (identified by property metadata annotation sap:super-ordinate)
		 * @param sPropertyName Property name
		 * @return The DataJS object representing the super-ordinate
		 *          property or null if it does not exist
		 */
		 getSuperOrdinatePropertyOfProperty(sPropertyName:string): any;
		/**
		 * Get the text property related to the property with specified name
		 * (identified by property metadata annotation sap:text)
		 * @param sPropertyName Property name
		 * @return The DataJS object representing the text property or
		 *          null if it does not exist
		 */
		 getTextPropertyOfProperty(sPropertyName:string): any;
		/**
		 * Get full description for this entity type
		 * @return The DataJS object representing the entity type
		 */
		 getTypeDescription(): any;
	}
	class FilterExpression {
		/**
		 * Create a representation of a filter expression for a given entity type. It can be rendered as value for the $filter system
		 * query option.
		 * @param oModel DataJS object for the OData model containing this entity type
		 * @param oSchema DataJS object for the schema containing this entity type
		 * @param oEntityType object for the entity type
		 */
		 constructor(oModel:any, oSchema:any, oEntityType:sap.ui.model.analytics.odata4analytics.EntityType);
		/**
		 * Add a condition to the filter expression.
		 * 
		 * Multiple conditions on the same property are combined with a logical OR first, and in a second step conditions for
		 * different properties are combined with a logical AND.
		 * @param sPropertyName The name of the property bound in the condition
		 * @param sOperator operator used for the condition
		 * @param oValue value to be used for this condition
		 * @param oValue2 (optional) as second value to be used for this condition
		 * @return This object for method chaining
		 */
		 addCondition(sPropertyName:string, sOperator:sap.ui.model.FilterOperator, oValue:any, oValue2:any): sap.ui.model.analytics.odata4analytics.FilterExpression;
		/**
		 * Add a set condition to the filter expression.
		 * 
		 * A set condition tests if the value of a property is included in a set of given values. It is a convenience method for
		 * this particular use case eliminating the need for multiple API calls.
		 * @param sPropertyName The name of the property bound in the condition
		 * @param aValues values defining the set
		 * @return This object for method chaining
		 */
		 addSetCondition(sPropertyName:string, aValues:any[]): sap.ui.model.analytics.odata4analytics.FilterExpression;
		/**
		 * Add an array of UI5 filter conditions to the filter expression.
		 * 
		 * The UI5 filter condition is combined with the other given conditions using a logical AND. This method
		 * is particularly useful for passing forward already created UI5 filter arrays.
		 * @param aUI5Filter Array of UI5 filter objects
		 * @return This object for method chaining
		 */
		 addUI5FilterConditions(aUI5Filter:sap.ui.model.Filter): sap.ui.model.analytics.odata4analytics.FilterExpression;
		/**
		 * Check if request is compliant with basic filter constraints expressed in metadata:
		 * 
		 * (a) all properties required in the filter expression have been referenced (b) the single-value filter restrictions have been obeyed
		 * @return The value true. In case the expression violates some of the rules, an exception with some explanatory
		 *          message is thrown
		 */
		 checkValidity(): boolean;
		/**
		 * Clear expression from any conditions that may have been set previously
		 */
		 clear();
		/**
		 * Get description for this entity type
		 * @return The object representing the entity type
		 */
		 getEntityType(): sap.ui.model.analytics.odata4analytics.EntityType;
		/**
		 * Get an array of SAPUI5 Filter objects corresponding to this expression.
		 * @return List of filter objects representing this expression
		 */
		 getExpressionAsUI5FilterArray(): sap.ui.model.Filter;
		/**
		 * Get the value for the OData system query option $filter corresponding to this expression.
		 * @return The $filter value for the filter expression
		 */
		 getURIFilterOptionValue(): string;
		/**
		 * Remove all conditions for some property from the filter expression.
		 * 
		 * All previously set conditions for some property are removed from the filter expression.
		 * @param sPropertyName The name of the property bound in the condition
		 * @return This object for method chaining
		 */
		 removeConditions(sPropertyName:string): sap.ui.model.analytics.odata4analytics.FilterExpression;
	}
	class Measure {
		/**
		 * Create a representation of a measure provided by an analytic query. Do not create your own instances.
		 * @param oQueryResult The query result containing this measure
		 * @param oProperty The DataJS object object representing the measure
		 */
		 constructor(oQueryResult:sap.ui.model.analytics.odata4analytics.QueryResult, oProperty:any);
		/**
		 * Get the text property associated to the raw value property holding the
		 * formatted value related to this measure
		 * @return The DataJS object representing the property holding the
		 *          formatted value text of this measure or null if this measure
		 *          does not have a unit
		 */
		 getFormattedValueProperty(): any;
		/**
		 * Get label
		 * @return The (possibly language-dependent) label text for this
		 *          measure
		 */
		 getLabelText(): string;
		/**
		 * Get the name of the measure
		 * @return The name of the measure, which is identical to the name
		 *          of the measure raw value property in the entity type
		 */
		 getName(): string;
		/**
		 * Get the raw value property
		 * @return The DataJS object representing the property holding the
		 *          raw value of this measure
		 */
		 getRawValueProperty(): any;
		/**
		 * Get the unit property related to this measure
		 * @return The DataJS object representing the unit property or
		 *          null if this measure does not have a unit
		 */
		 getUnitProperty(): any;
		/**
		 * Get indicator whether or not the measure is updatable
		 * @return True iff the measure is updatable
		 */
		 isUpdatable(): boolean;
	}
	class Model {
		/**
		 * Create a representation of the analytical semantics of OData service metadata
		 * @param oModelReference An instance of ReferenceByURI, ReferenceByModel or
		 *            ReferenceWithWorkaround for locating the OData service.
		 * @param mParameter Additional parameters for controlling the model construction. Currently supported are:
		 *            <li> sAnnotationJSONDoc - A JSON document providing extra annotations to the elements of the
		 *                 structure of the given service
		 *            </li>
		 *            <li> modelVersion - Parameter to define which ODataModel version should be used, in you use
		 *                 'odata4analytics.Model.ReferenceByURI': 1 (default), 2
		 *                 see also: AnalyticalVersionInfo constants
		 *            </li>
		 */
		 constructor(oModelReference:any, mParameter?:any);
		/**
		 * Find analytic query result by name
		 * @param sName Fully qualified name of query result entity set
		 * @return The query result object
		 *          with this name or null if it does not exist
		 */
		 findQueryResultByName(sName:string): sap.ui.model.analytics.odata4analytics.QueryResult;
		/**
		 * Get the names of all query results (entity sets) offered by the model
		 * @return List of all query result names
		 */
		 getAllQueryResultNames(): string;
		/**
		 * Get all query results offered by the model
		 * @return An object with individual JS properties for each query
		 *          result included in the model. The JS object properties all are
		 *          objects of type odata4analytics.QueryResult. The names
		 *          of the JS object properties are given by the entity set names
		 *          representing the query results.
		 */
		 getAllQueryResults(): any;
		/**
		 * Get underlying OData model provided by SAP UI5
		 * @return The SAP UI5 representation of the model.
		 */
		 getODataModel(): any;
	}
	class Parameter {
		/**
		 * Create a representation of a single parameter contained in a parameterization. Do not create your own instances.
		 * @param oParameterization The parameterization containing this parameter
		 * @param oProperty The DataJS object object representing the text property
		 */
		 constructor(oParameterization:sap.ui.model.analytics.odata4analytics.Parameterization, oProperty:any);
		/**
		 * Get parameterization containing this parameter
		 * @return The parameterization
		 *         object
		 */
		 getContainingParameterization(): sap.ui.model.analytics.odata4analytics.Parameterization;
		/**
		 * Get label
		 * @return The (possibly language-dependent) label text for this
		 *          parameter
		 */
		 getLabelText(): string;
		/**
		 * Get the name of the parameter
		 * @return The name of the parameter, which is identical with the
		 *          name of the property representing the parameter in the
		 *          parameterization entity type
		 */
		 getName(): string;
		/**
		 * Get property for the parameter representing the peer boundary of the same
		 * interval
		 * @return The parameter representing
		 *          the peer boundary of the same interval. This means that if
		 *          *this* parameter is a lower boundary, the returned object
		 */
		 getPeerIntervalBoundaryParameter(): sap.ui.model.analytics.odata4analytics.Parameter;
		/**
		 * Get property
		 * @return The DataJS object representing the property of this
		 *          parameter
		 */
		 getProperty(): any;
		/**
		 * Get text property related to this parameter
		 * @return The DataJS object representing the text property or
		 *          null if it does not exist
		 */
		 getTextProperty(): any;
		/**
		 * Get the URI to locate the entity set holding the value set, if it is
		 * available.
		 * @param sServiceRootURI (optional) Identifies the root of the OData
		 *            service
		 * @return The resource path of the URI pointing to the entity set. It is a
		 *          relative URI unless a service root is given, which would then
		 *          prefixed in order to return a complete URL.
		 */
		 getURIToValueEntitySet(sServiceRootURI:string);
		/**
		 * Get indicator if the parameter represents an interval boundary
		 * @return True iff it represents an interval boundary, otherwise
		 *          false
		 */
		 isIntervalBoundary(): boolean;
		/**
		 * Get indicator if the parameter represents the lower boundary of an
		 * interval
		 * @return True iff it represents the lower boundary of an
		 *          interval, otherwise false
		 */
		 isLowerIntervalBoundary(): boolean;
		/**
		 * Get indicator whether or not the parameter is optional
		 * @return True iff the parameter is optional
		 */
		 isOptional(): boolean;
		/**
		 * Get indicator if a set of values is available for this parameter.
		 * Typically, this is true for parameters with a finite set of known values
		 * such as products, business partners in different roles, organization
		 * units, and false for integer or date parameters
		 * @return True iff a value set is available, otherwise false
		 */
		 isValueSetAvailable(): boolean;
	}
	class Parameterization {
		/**
		 * Create a representation of a parameterization for an analytic query. Do not create your own instances.
		 * @param oEntityType The OData entity type for this parameterization
		 * @param oEntitySet The OData entity set for this parameterization offered
		 *            by the OData service
		 */
		 constructor(oEntityType:sap.ui.model.analytics.odata4analytics.EntityType, oEntitySet:sap.ui.model.analytics.odata4analytics.EntitySet);
		/**
		 * Find parameter by name
		 * @param sName Parameter name
		 * @return The parameter object with
		 *          this name or null if it does not exist
		 */
		 findParameterByName(sName:string): sap.ui.model.analytics.odata4analytics.Parameter;
		/**
		 * Get the names of all parameters part of the parameterization
		 * @return List of all parameter names
		 */
		 getAllParameterNames(): string;
		/**
		 * Get all parameters included in this parameterization
		 * @return An object with individual JS properties for each
		 *          parameter included in the query result. The JS object properties
		 *          all are objects of type odata4analytics.Parameter. The
		 *          names of the JS object properties are given by the OData entity
		 *          type property names representing the parameter keys.
		 */
		 getAllParameters(): any;
		/**
		 * Get the entity set representing this query result in the OData model
		 * @return The OData entity set
		 *          representing this query result
		 */
		 getEntitySet(): sap.ui.model.analytics.odata4analytics.EntitySet;
		/**
		 * Get the entity type defining the type of this query result in the OData
		 * model
		 * @return The OData entity type for
		 *          this query result
		 */
		 getEntityType(): sap.ui.model.analytics.odata4analytics.EntityType;
		/**
		 * Get the name of the parameter
		 * @return The name of the parameterization, which is identical
		 *          with the name of the entity set representing the
		 *          parameterization in the OData service
		 */
		 getName(): string;
		/**
		 * Get navigation property to query result
		 * @return The parameter object with
		 *          this name or null if it does not exist
		 */
		 getNavigationPropertyToQueryResult(): sap.ui.model.analytics.odata4analytics.QueryResult;
	}
	class ParameterizationRequest {
		/**
		 * Create a request object for interaction with a query parameterization.
		 * @param oParameterization Description of a query parameterization
		 */
		 constructor(oParameterization:sap.ui.model.analytics.odata4analytics.Parameterization);
		/**
		 * Get the description of the parameterization on which this request
		 * operates on
		 * @return Description of a
		 *          query parameterization
		 */
		 getParameterization(): sap.ui.model.analytics.odata4analytics.Parameterization;
		/**
		 * Get the URI to locate the entity set for the query parameterization.
		 * @param sServiceRootURI (optional) Identifies the root of the OData
		 *            service
		 * @return The resource path of the URI pointing to the entity set. It is a
		 *          relative URI unless a service root is given, which would then
		 *          prefixed in order to return a complete URL.
		 */
		 getURIToParameterizationEntitySet(sServiceRootURI:string);
		/**
		 * Get the URI to locate the parameterization entity for the values assigned
		 * to all parameters beforehand. Notice that a value must be supplied for
		 * every parameter including those marked as optional. For optional
		 * parameters, assign the special value that the service provider uses as an
		 * "omitted" value. For example, for services based on BW Easy Queries, this
		 * would be an empty string.
		 * @param sServiceRootURI (optional) Identifies the root of the OData
		 *            service
		 * @return The resource path of the URI pointing to the entity set. It is a
		 *          relative URI unless a service root is given, which would then
		 *          prefixed in order to return a complete URL.
		 */
		 getURIToParameterizationEntry(sServiceRootURI:string);
		/**
		 * Assign a value to a parameter
		 * @param sParameterName Name of the parameter. In case of a range
		 *            value, provide the name of the lower boundary parameter.
		 * @param sValue Assigned value. Pass null to remove a value assignment.
		 * @param sToValue Omit it or set it to null for single values. If set,
		 *            it will be assigned to the upper boundary parameter
		 */
		 setParameterValue(sParameterName:string, sValue:string, sToValue:string);
	}
	class ParameterValueSetRequest {
		/**
		 * Create a request object for interaction with a query parameter value help.
		 * @param oParameter Description of a query parameter
		 */
		 constructor(oParameter:sap.ui.model.analytics.odata4analytics.Parameter);
		/**
		 * Get the filter expression for this request.
		 * 
		 * Expressions are represented by separate objects. If none exists so far, a
		 * new expression object gets created.
		 * @return The filter object
		 *          associated to this request.
		 */
		 getFilterExpression(): sap.ui.model.analytics.odata4analytics.FilterExpression;
		/**
		 * Get the sort expression for this request.
		 * 
		 * Expressions are represented by separate objects. If none exists so far, a
		 * new expression object gets created.
		 * @return The sort object
		 *          associated to this request.
		 */
		 getSortExpression(): sap.ui.model.analytics.odata4analytics.SortExpression;
		/**
		 * Get the value of an query option for the OData request URI corresponding
		 * to this request.
		 * @param sQueryOptionName Identifies the query option: $select,
		 *            $filter,... or any custom query option
		 * @return The value of the requested query option or null, if
		 *          this option is not used for the OData request.
		 */
		 getURIQueryOptionValue(sQueryOptionName:string): string;
		/**
		 * Get the unescaped URI to fetch the parameter value set.
		 * @param sServiceRootURI (optional) Identifies the root of the OData
		 *            service
		 * @return The unescaped URI that contains the OData resource path
		 *          and OData system query options to express the request for the
		 *          parameter value set..
		 */
		 getURIToParameterValueSetEntries(sServiceRootURI:string): string;
		/**
		 * Specify which components of the parameter shall be included in the value
		 * set.
		 * @param bIncludeText Indicator whether or not to include the parameter text (if
		 *            available) in the value set. Pass null to keep current
		 *            setting.
		 */
		 includeParameterText(bIncludeText:any);
		/**
		 * Set the filter expression for this request.
		 * 
		 * Expressions are represented by separate objects. Calling this method
		 * replaces the filter object maintained by this request.
		 * @param oFilter The filter object to be associated with this request.
		 */
		 setFilterExpression(oFilter:sap.ui.model.analytics.odata4analytics.FilterExpression);
		/**
		 * Set the sort expression for this request.
		 * 
		 * Expressions are represented by separate objects. Calling this method
		 * replaces the sort object maintained by this request.
		 * @param oSorter The sort object to be associated with this request.
		 */
		 setSortExpression(oSorter:sap.ui.model.analytics.odata4analytics.SortExpression);
	}
	class QueryResult {
		/**
		 * Create a representation of an analytic query. Do not create your own instances.
		 * @param oModel The analytical model containing this query result entity
		 *            set
		 * @param oEntityType The OData entity type for this query
		 * @param oEntitySet The OData entity set for this query offered by the
		 *            OData service
		 * @param oParameterization The parameterization of this query, if any
		 */
		 constructor(oModel:sap.ui.model.analytics.odata4analytics.Model, oEntityType:sap.ui.model.analytics.odata4analytics.EntityType, oEntitySet:sap.ui.model.analytics.odata4analytics.EntitySet, oParameterization:sap.ui.model.analytics.odata4analytics.Parameterization);
		/**
		 * Find dimension by name
		 * @param sName Dimension name
		 * @return The dimension object with
		 *          this name or null if it does not exist
		 */
		 findDimensionByName(sName:string): sap.ui.model.analytics.odata4analytics.Dimension;
		/**
		 * Find dimension by property name
		 * @param sName Property name
		 * @return The dimension object to
		 *          which the given property name is related, because the property
		 *          holds the dimension key, its text, or is an attribute of this
		 *          dimension. If no such dimension exists, null is returned.
		 */
		 findDimensionByPropertyName(sName:string): sap.ui.model.analytics.odata4analytics.Dimension;
		/**
		 * Find measure by name
		 * @param sName Measure name
		 * @return The measure object with this
		 *          name or null if it does not exist
		 */
		 findMeasureByName(sName:string): sap.ui.model.analytics.odata4analytics.Measure;
		/**
		 * Find measure by property name
		 * @param sName Property name
		 * @return The measure object to which
		 *          the given property name is related, because the property holds
		 *          the raw measure value or its formatted value. If no such measure
		 *          exists, null is returned.
		 */
		 findMeasureByPropertyName(sName:string): sap.ui.model.analytics.odata4analytics.Measure;
		/**
		 * Get the names of all dimensions included in the query result
		 * @return List of all dimension names
		 */
		 getAllDimensionNames(): string;
		/**
		 * Get all dimensions included in this query result
		 * @return An object with individual JS properties for each
		 *          dimension included in the query result. The JS object properties
		 *          all are objects of type odata4analytics.Dimension. The
		 *          names of the JS object properties are given by the OData entity
		 *          type property names representing the dimension keys.
		 */
		 getAllDimensions(): any;
		/**
		 * Get the names of all measures included in the query result
		 * @return List of all measure names
		 */
		 getAllMeasureNames(): string;
		/**
		 * Get all measures included in this query result
		 * @return An object with individual JS properties for each
		 *          measure included in the query result. The JS object properties
		 *          all are objects of type odata4analytics.Measure. The
		 *          names of the JS object properties are given by the OData entity
		 *          type property names representing the measure raw values.
		 */
		 getAllMeasures(): any;
		/**
		 * Get the entity set representing this query result in the OData model
		 * @return The OData entity set
		 *          representing this query result
		 */
		 getEntitySet(): sap.ui.model.analytics.odata4analytics.EntitySet;
		/**
		 * Get the entity type defining the type of this query result in the OData
		 * model
		 * @return The OData entity type for
		 *          this query result
		 */
		 getEntityType(): sap.ui.model.analytics.odata4analytics.EntityType;
		/**
		 * Get the analytical model containing the entity set for this query result
		 * @return The analytical representation of the OData model
		 */
		 getModel(): any;
		/**
		 * Get the name of the query result
		 * @return The fully qualified name of the query result, which is
		 *          identical with the name of the entity set representing the query
		 *          result in the OData service
		 */
		 getName(): string;
		/**
		 * Get the parameterization of this query result
		 * @return The object for the
		 *          parameterization or null if the query result is not
		 *          parameterized
		 */
		 getParameterization(): sap.ui.model.analytics.odata4analytics.Parameterization;
		/**
		 * Get property holding the totaled property list
		 * @return The DataJS object representing this property
		 */
		 getTotaledPropertiesListProperty(): any;
	}
	class QueryResultRequest {
		/**
		 * Create a request object for interaction with a query result.
		 * @param oQueryResult Description of a query parameterization
		 * @param oParameterizationRequest Request object for
		 *            interactions with the parameterization of this query. Only
		 *            required if the query service includes parameters.
		 */
		 constructor(oQueryResult:sap.ui.model.analytics.odata4analytics.QueryResult, oParameterizationRequest?:sap.ui.model.analytics.odata4analytics.ParameterizationRequest);
		/**
		 * Add one or more dimensions to the aggregation level
		 * @param aDimensionName Array of dimension names to be added to the already defined
		 *            aggregation level.
		 */
		 addToAggregationLevel(aDimensionName:any);
		/**
		 * Get the names of the dimensions included in the aggregation level
		 * @return The dimension names included in the aggregation level
		 */
		 getAggregationLevel(): any[];
		/**
		 * Get details about a dimensions included in the aggregation level
		 * @param sDImensionName Name of a dimension included in the aggregation level of this
		 *            request, for which details shall be returned
		 * @return An object with three properties named key and text,
		 *          both with Boolean values indicating whether the key and text of
		 *          this dimension are included in this request. The third property
		 *          named attributes is an array of attribute names of this
		 *          dimension included in this request, or null, if there are none.
		 */
		 getAggregationLevelDetails(sDImensionName:any): any;
		/**
		 * Get the filter expression for this request.
		 * 
		 * Expressions are represented by separate objects. If none exists so far, a
		 * new expression object gets created.
		 * @return The filter object
		 *          associated to this request.
		 */
		 getFilterExpression(): sap.ui.model.analytics.odata4analytics.FilterExpression;
		/**
		 * Get the names of the measures included in the query result request
		 * @return The measure names included in the query result request
		 */
		 getMeasureNames(): any[];
		/**
		 * Retrieves the current parametrization request
		 * @return 
		 */
		 getParameterizationRequest(): sap.ui.model.analytics.odata4analytics.ParametrizationRequest;
		/**
		 * Get the description of the query result on which this request operates on
		 * @return Description of a query
		 *          result
		 */
		 getQueryResult(): sap.ui.model.analytics.odata4analytics.QueryResult;
		/**
		 * Returns the current page boundaries as object with properties
		 * <code>start</code> and <code>end</code>. If the end of the page is
		 * unbounded, <code>end</code> is null.
		 * @return the current page boundaries as object
		 */
		 getResultPageBoundaries(): any;
		/**
		 * Get the sort expression for this request.
		 * 
		 * Expressions are represented by separate objects. If none exists so far, a
		 * new expression object gets created.
		 * @return The sort object
		 *          associated to this request.
		 */
		 getSortExpression(): sap.ui.model.analytics.odata4analytics.SortExpression;
		/**
		 * Get the value of an query option for the OData request URI corresponding
		 * to this request.
		 * @param sQueryOptionName Identifies the query option: $select,
		 *            $filter,$orderby ... or any custom query option
		 * @return The value of the requested query option or null, if
		 *          this option is not used for the OData request.
		 */
		 getURIQueryOptionValue(sQueryOptionName:string): string;
		/**
		 * Get the URI to locate the entity set for the query result.
		 * @param sServiceRootURI (optional) Identifies the root of the OData
		 *            service
		 * @return The resource path of the URI pointing to the entity
		 *          set. It is a relative URI unless a service root is given, which
		 *          would then prefixed in order to return a complete URL.
		 */
		 getURIToQueryResultEntitySet(sServiceRootURI:string): string;
		/**
		 * Get the unescaped URI to fetch the query result.
		 * @param sServiceRootURI (optional) Identifies the root of the OData
		 *            service
		 * @param sResourcePath (optional) OData resource path to be considered.
		 *            If provided, it overwrites any parameterization object that
		 *            might have been specified separately.
		 * @return The unescaped URI that contains the OData resource path
		 *          and OData system query options to express the aggregation level,
		 *          filter expression and further options.
		 */
		 getURIToQueryResultEntries(sServiceRootURI:string, sResourcePath:string): string;
		/**
		 * Specify which dimension components shall be included in the query result.
		 * The settings get applied to the currently defined aggregation level.
		 * @param sDimensionName Name of the dimension for which the settings get applied.
		 *            Specify null to apply the settings to all dimensions in the
		 *            aggregation level.
		 * @param bIncludeKey Indicator whether or not to include the dimension key in the
		 *            query result. Pass null to keep current setting.
		 * @param bIncludeText Indicator whether or not to include the dimension text (if
		 *            available) in the query result. Pass null to keep current
		 *            setting.
		 * @param aAttributeName Array of dimension attribute names to be included in the
		 *            result. Pass null to keep current setting. This argument is
		 *            ignored if sDimensionName is null.
		 */
		 includeDimensionKeyTextAttributes(sDimensionName:any, bIncludeKey:any, bIncludeText:any, aAttributeName:any);
		/**
		 * Specify which measure components shall be included in the query result.
		 * The settings get applied to the currently set measures.
		 * @param sMeasureName Name of the measure for which the settings get applied.
		 *            Specify null to apply the settings to all currently set
		 *            measures.
		 * @param bIncludeRawValue Indicator whether or not to include the raw value in the query
		 *            result. Pass null to keep current setting.
		 * @param bIncludeFormattedValue Indicator whether or not to include the formatted value (if
		 *            available) in the query result. Pass null to keep current
		 *            setting.
		 * @param bIncludeUnit Indicator whether or not to include the unit (if available) in
		 *            the query result. Pass null to keep current setting.
		 */
		 includeMeasureRawFormattedValueUnit(sMeasureName:any, bIncludeRawValue:any, bIncludeFormattedValue:any, bIncludeUnit:any);
		/**
		 * Remove one or more dimensions from the aggregation level. The method also
		 * removed a potential sort expression on the dimension.
		 * @param aDimensionName Array of dimension names to be removed from the already
		 *            defined aggregation level.
		 */
		 removeFromAggregationLevel(aDimensionName:any);
		/**
		 * Set the aggregation level for the query result request. By default, the
		 * query result will include the properties holding the keys of the given
		 * dimensions. This setting can be changed using
		 * includeDimensionKeyTextAttributes.
		 * @param aDimensionName Array of dimension names to be part of the aggregation level.
		 *            If null, the aggregation level includes all dimensions, if
		 *            empty, no dimension is included.
		 */
		 setAggregationLevel(aDimensionName:any);
		/**
		 * Set the filter expression for this request.
		 * 
		 * Expressions are represented by separate objects. Calling this method
		 * replaces the filter object maintained by this request.
		 * @param oFilter The filter object to be associated with this request.
		 */
		 setFilterExpression(oFilter:sap.ui.model.analytics.odata4analytics.FilterExpression);
		/**
		 * Set the measures to be included in the query result request. By default,
		 * the query result will include the properties holding the raw values of
		 * the given measures. This setting can be changed using
		 * includeMeasureRawFormattedValueUnit.
		 * @param aMeasureName Array of measure names to be part of the query result request.
		 *            If null, the request includes all measures, if empty, no
		 *            measure is included.
		 */
		 setMeasures(aMeasureName:any);
		/**
		 * Set the parameterization request required for interactions with the query
		 * result of parameterized queries. This method provides an alternative way
		 * to assign a parameterization request to a query result request.
		 * @param oParameterizationRequest Request object for interactions with the parameterization of
		 *            this query
		 */
		 setParameterizationRequest(oParameterizationRequest:any);
		/**
		 * Set further options to be applied for the OData request to fetch the
		 * query result
		 * @param bIncludeEntityKey Indicates whether or not the entity key
		 *            should be returned for every entry in the query result.
		 *            Default is not to include it. Pass null to keep current
		 *            setting.
		 * @param bIncludeCount Indicates whether or not the result shall
		 *            include a count for the returned entities. Default is not to
		 *            include it. Pass null to keep current setting.
		 * @param bReturnNoEntities Indicates whether or not the result shall
		 *            be empty. This will translate to $top=0 in the OData request and override
		 *            any setting done with setResultPageBoundaries. The default is not to
		 *            suppress entities in the result. Pass null to keep current setting.
		 *            The main use case for this option is to create a request
		 *            with $inlinecount returning an entity count.
		 */
		 setRequestOptions(bIncludeEntityKey:boolean, bIncludeCount:boolean, bReturnNoEntities:boolean);
		/**
		 * Set the resource path to be considered for the OData request URI of this
		 * query request object. This method provides an alternative way to assign a
		 * path comprising a parameterization. If a path is provided, it overwrites
		 * any parameterization object that might have been specified separately.
		 * @param sResourcePath Resource path pointing to the entity set of the query result.
		 *            Must include a valid parameterization if query contains
		 *            parameters.
		 */
		 setResourcePath(sResourcePath:any);
		/**
		 * Specify that only a page of the query result shall be returned. A page is
		 * described by its boundaries, that are row numbers for the first and last
		 * rows in the query result to be returned.
		 * @param start The first row of the query result to be returned.
		 *            Numbering starts at 1. Passing null is equivalent to start
		 *            with the first row.
		 * @param end The last row of the query result to be returned. Passing
		 *            null is equivalent to get all rows up to the end of the query
		 *            result.
		 */
		 setResultPageBoundaries(start:number, end:number);
		/**
		 * Set the sort expression for this request.
		 * 
		 * Expressions are represented by separate objects. Calling this method
		 * replaces the sort object maintained by this request.
		 * @param oSorter The sort object to be associated with this request.
		 */
		 setSortExpression(oSorter:sap.ui.model.analytics.odata4analytics.SortExpression);
	}
	class RecursiveHierarchy {
		/**
		 * Create a representation of a recursive hierarchy defined on one multiple
		 * properties in an OData entity type query. Do not create your own instances.
		 * @param oEntityType object for the entity type
		 * @param oNodeIDProperty DataJS object for the property holding the
		 *            hierarchy node ID identifying the hierarchy node to which the
		 *            OData entry belongs
		 * @param oParentNodeIDProperty DataJS object for the property holding the
		 *            node ID of the parent of the hierarchy node pointed to by the
		 *            value of oNodeIDProperty
		 * @param oNodeLevelProperty DataJS object for the property holding the
		 *            level number for the of the hierarchy node pointed to by the value
		 *            of oNodeIDProperty
		 * @param oNodeValueProperty DataJS object for the property holding the data
		 *            value for the of the hierarchy node pointed to by the value of
		 *            oNodeIDProperty
		 */
		 constructor(oEntityType:any, oNodeIDProperty:any, oParentNodeIDProperty:any, oNodeLevelProperty:any, oNodeValueProperty:any);
		/**
		 * Get the property holding the node ID of the hierarchy node
		 * @return The DataJS object representing this property
		 */
		 getNodeIDProperty(): any;
		/**
		 * Get the property holding the level of the hierarchy node
		 * @return The DataJS object representing this property
		 */
		 getNodeLevelProperty(): any;
		/**
		 * Get the property holding the value that is structurally organized by the
		 * hierarchy
		 * @return The DataJS object representing this property
		 */
		 getNodeValueProperty(): any;
		/**
		 * Get the property holding the parent node ID of the hierarchy node
		 * @return The DataJS object representing this property
		 */
		 getParentNodeIDProperty(): any;
		/**
		 * Get indicator if this is a leveled hierarchy
		 * @return False
		 */
		 isLeveledHierarchy(): boolean;
		/**
		 * Get indicator if this is a recursive hierarchy
		 * @return True
		 */
		 isRecursiveHierarchy(): boolean;
	}
	class SortExpression {
		/**
		 * Create a representation of an order by expression for a given entity type. It
		 * can be rendered as value for the $orderby system query option.
		 * @param oModel DataJS object for the OData model containing this entity
		 *            type
		 * @param oSchema DataJS object for the schema containing this entity type
		 * @param oEntityType object for the entity type
		 */
		 constructor(oModel:any, oSchema:any, oEntityType:sap.ui.model.analytics.odata4analytics.EntityType);
		/**
		 * Add a condition to the order by expression. It replaces any previously specified
		 * sort order for the property.
		 * @param sPropertyName The name of the property bound in the condition
		 * @param sSortOrder sorting order used for the condition
		 * @return This object for method
		 *          chaining
		 */
		 addSorter(sPropertyName:string, sSortOrder:sap.ui.model.analytics.odata4analytics.SortOrder): sap.ui.model.analytics.odata4analytics.SortExpression;
		/**
		 * Clear expression from any sort conditions that may have been set
		 * previously
		 */
		 clear();
		/**
		 * Get description for this entity type
		 * @return The object representing the
		 *          entity type
		 */
		 getEntityType(): sap.ui.model.analytics.odata4analytics.EntityType;
		/**
		 * Get the first SAPUI5 Sorter object.
		 * @return first sorter object or null if empty
		 */
		 getExpressionAsUI5Sorter(): sap.ui.model.Sorter;
		/**
		 * Get an array of SAPUI5 Sorter objects corresponding to this expression.
		 * @return List of sorter objects representing
		 *          this expression
		 */
		 getExpressionsAsUI5SorterArray(): sap.ui.model.Sorter;
		/**
		 * Get the value for the OData system query option $orderby corresponding to
		 * this expression.
		 * @param oSelectedPropertyNames Object with properties requested for $select
		 * @return The $orderby value for the sort expressions
		 */
		 getURIOrderByOptionValue(oSelectedPropertyNames:any): string;
		/**
		 * Removes the order by expression for the given property name from the list
		 * of order by expression. If no order by expression with this property name
		 * exists the method does nothing.
		 * @param sPropertyName The name of the property to be removed from the
		 *            condition
		 */
		 removeSorter(sPropertyName:string);
	}
	/**
	 * Sort order of a property
	 */
	type SortOrder = any
}

declare namespace sap.ui.model.analytics.odata4analytics.Model {
	class ReferenceByModel {
		/**
		 * Create a reference to an OData model already loaded elsewhere with the help
		 * of SAP UI5.
		 * @param oModel holding the OData model.
		 */
		 constructor(oModel:any);
	}
	class ReferenceByURI {
		/**
		 * Create a reference to an OData model by the URI of the related OData service.
		 * @param sURI holding the URI.
		 */
		 constructor(sURI:string);
	}
	class ReferenceWithWorkaround {
		/**
		 * Create a reference to an OData model having certain workarounds activated. A
		 * workaround is an implementation that changes the standard behavior of the API
		 * to overcome some gap or limitation in the OData provider. The workaround
		 * implementation can be conditionally activated by passing the identifier in
		 * the contructor.
		 * 
		 * Known workaround identifiers are:
		 * 
		 * <li>"CreateLabelsFromTechnicalNames" - If a property has no label text, it
		 * gets generated from the property name.</li>
		 * 
		 * <li>"IdentifyTextPropertiesByName" -If a dimension property has no text and
		 * another property with the same name and an appended "Name", "Text" etc.
		 * exists, they are linked via annotation.</li>
		 * @param oModel holding a reference to the OData model, obtained
		 *            by odata4analytics.Model.ReferenceByModel or by
		 *            sap.odata4analytics.Model.ReferenceByURI.
		 * @param aWorkaroundID listing all workarounds to be applied.
		 */
		 constructor(oModel:any, aWorkaroundID:string[]);
	}
}

declare namespace sap.ui.model.json {
	class JSONModel extends sap.ui.model.ClientModel{
		/**
		 * Constructor for a new JSONModel.
		 * @param oData either the URL where to load the JSON from or a JS object
		 * @param bObserve whether to observe the JSON data for property changes (experimental)
		 */
		 constructor(oData:any, bObserve:boolean);
		/**
		 * Creates a new subclass of class sap.ui.model.json.JSONModel with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.ClientModel.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Serializes the current JSON data of the model into a string.
		 * Note: May not work in Internet Explorer 8 because of lacking JSON support (works only if IE 8 mode is enabled)
		 * @return sJSON the JSON data serialized as string
		 */
		 getJSON(): string;
		/**
		 * Returns a metadata object for class sap.ui.model.json.JSONModel.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Returns the value for the property with the given <code>sPropertyName</code>
		 * @param sPath the path to the property
		 * @param oContext the context which will be used to retrieve the property
		 * @return the value of the property
		 */
		 getProperty(sPath:string, oContext?:any): any;
		/**
		 * Load JSON-encoded data from the server using a GET HTTP request and store the resulting JSON data in the model.
		 * Note: Due to browser security restrictions, most "Ajax" requests are subject to the same origin policy,
		 * the request can not successfully retrieve data from a different domain, subdomain, or protocol.
		 * @param sURL A string containing the URL to which the request is sent.
		 * @param oParameters A map or string that is sent to the server with the request.
		 * Data that is sent to the server is appended to the URL as a query string.
		 * If the value of the data parameter is an object (map), it is converted to a string and
		 * url-encoded before it is appended to the URL.
		 * @param bAsync By default, all requests are sent asynchronous
		 * (i.e. this is set to true by default). If you need synchronous requests, set this option to false.
		 * Cross-domain requests do not support synchronous operation. Note that synchronous requests may
		 * temporarily lock the browser, disabling any actions while the request is active.
		 * @param sType The type of request to make ("POST" or "GET"), default is "GET".
		 * Note: Other HTTP request methods, such as PUT and DELETE, can also be used here, but
		 * they are not supported by all browsers.
		 * @param bMerge whether the data should be merged instead of replaced
		 * @param bCache force no caching if false. Default is false
		 * @param mHeaders An object of additional header key/value pairs to send along with the request
		 */
		 loadData(sURL:string, oParameters?:any|string, bAsync?:boolean, sType?:string, bMerge?:boolean, bCache?:string, mHeaders?:any);
		/**
		 * Sets the JSON encoded data to the model.
		 * @param oData the data to set on the model
		 * @param bMerge whether to merge the data instead of replacing it
		 */
		 setData(oData:any, bMerge?:boolean);
		/**
		 * Sets the JSON encoded string data to the model.
		 * @param sJSONText the string data to set on the model
		 * @param bMerge whether to merge the data instead of replacing it
		 */
		 setJSON(sJSONText:string, bMerge?:boolean);
		/**
		 * Sets a new value for the given property <code>sPropertyName</code> in the model.
		 * If the model value changed all interested parties are informed.
		 * @param sPath path of the property to set
		 * @param oValue value to set the property to
		 * @param oContext the context which will be used to set the property
		 * @param bAsyncUpdate whether to update other bindings dependent on this property asynchronously
		 * @return true if the value was set correctly and false if errors occurred like the entry was not found.
		 */
		 setProperty(sPath:string, oValue:any, oContext?:any, bAsyncUpdate?:boolean): boolean;
	}
}

declare namespace sap.ui.model.message {
	class MessageModel extends sap.ui.model.ClientModel{
		/**
		 * Constructor for a new JSONModel.
		 * @param oMessageManager The MessageManager instance
		 */
		 constructor(oMessageManager:sap.ui.core.message.MessageManager);
		/**
		 * Creates a new subclass of class sap.ui.model.message.MessageModel with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.ClientModel.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.model.message.MessageModel.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Returns the value for the property with the given <code>sPropertyName</code>
		 * @param sPath the path to the property
		 * @param oContext the context which will be used to retrieve the property
		 * @return the value of the property
		 */
		 getProperty(sPath:string, oContext?:any): any;
		/**
		 * Sets the message data to the model.
		 * @param oData the data to set on the model
		 */
		 setData(oData:any);
		/**
		 * Sets a new value for the given property <code>sPropertyName</code> in the model.
		 * If the model value changed all interested parties are informed.
		 * @param sPath path of the property to set
		 * @param oValue value to set the property to
		 * @param oContext the context which will be used to set the property
		 */
		 setProperty(sPath:string, oValue:any, oContext?:any);
	}
}

declare namespace sap.ui.model.odata {
	/**
	 * Different modes for retrieving the count of collections
	 */
	type BatchMode = any
	/**
	 * Different modes for retrieving the count of collections
	 */
	type CountMode = any
	class ODataAnnotations extends sap.ui.base.EventProvider{
		/**
		 * 
		 * @param aAnnotationURI The annotation-URL or an array of URLS that should be parsed and merged
		 * @param oMetadata 
		 * @param mParams 
		 */
		 constructor(aAnnotationURI:string|string[], oMetadata:sap.ui.model.odata.ODataMetadata, mParams:any);
		/**
		 * Adds either one URL or an array of URLs to be loaded and parsed. The result will be merged into the annotations
		 * data which can be retrieved using the getAnnotations-method.
		 * @param vUrl Either one URL as string or an array of URL strings
		 * @return The Promise to load the given URL(s), resolved if all URLs have been loaded, rejected if at
		 *         least one failed to load. The argument is an object containing the annotations object, success (an array
		 *         of sucessfully loaded URLs), fail (an array ob of failed URLs).
		 */
		 addUrl(vUrl:string|string[]): any;
		/**
		 * Attach event-handler <code>fnFunction</code> to the 'failed' event of this <code>sap.ui.model.odata.ODataAnnotations</code>.
		 * @param fnFunction The function to call, when the event occurs. This function will be called on the
		 *            oListener-instance (if present) or in a 'static way'.
		 * @param oData The object, that should be passed along with the event-object when firing the event.
		 * @param oListener Object on which to call the given function. If empty, the global context (window) is used.
		 * @return <code>this</code> to allow method chaining
		 */
		 attachFailed(fnFunction:any, oData?:any, oListener?:any): sap.ui.model.odata.ODataAnnotations;
		/**
		 * Attach event-handler <code>fnFunction</code> to the 'loaded' event of this <code>sap.ui.model.odata.ODataAnnotations</code>.
		 * @param fnFunction The function to call, when the event occurs. This function will be called on the
		 *            oListener-instance (if present) or in a 'static way'.
		 * @param oData The object, that should be passed along with the event-object when firing the event.
		 * @param oListener Object on which to call the given function. If empty, the global context (window) is used.
		 * @return <code>this</code> to allow method chaining
		 */
		 attachLoaded(fnFunction:any, oData?:any, oListener?:any): sap.ui.model.odata.ODataAnnotations;
		/**
		 * Detach event-handler <code>fnFunction</code> from the 'failed' event of this <code>sap.ui.model.odata.ODataAnnotations</code>.
		 * 
		 * The passed function and listener object must match the ones previously used for event registration.
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener Object on which the given function had to be called.
		 * @return <code>this</code> to allow method chaining
		 */
		 detachFailed(fnFunction:any, oListener:any): sap.ui.model.odata.ODataAnnotations;
		/**
		 * Detach event-handler <code>fnFunction</code> from the 'loaded' event of this <code>sap.ui.model.odata.ODataAnnotations</code>.
		 * 
		 * The passed function and listener object must match the ones previously used for event registration.
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener Object on which the given function had to be called.
		 * @return <code>this</code> to allow method chaining
		 */
		 detachLoaded(fnFunction:any, oListener:any): sap.ui.model.odata.ODataAnnotations;
		/**
		 * Creates a new subclass of class sap.ui.model.odata.ODataAnnotations with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Fire event failed to attached listeners.
		 * @param mArguments the arguments to pass along with the event.
		 * @return <code>this</code> to allow method chaining
		 */
		protected fireFailed(mArguments?:any): sap.ui.model.odata.ODataAnnotations;
		/**
		 * Fire event loaded to attached listeners.
		 * @param mArguments Map of arguments that will be given as parameters to teh event handler
		 * @return <code>this</code> to allow method chaining
		 */
		protected fireLoaded(mArguments?:any): sap.ui.model.odata.ODataAnnotations;
		/**
		 * returns the raw annotation data
		 * @return returns annotations data
		 */
		 getAnnotationsData(): any;
		/**
		 * Returns a metadata object for class sap.ui.model.odata.ODataAnnotations.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Checks whether annotations loading of at least one of the given URLs has already failed.
		 * Note: For asynchronous annotations {@link #attachFailed} has to be used.
		 * @return whether annotations request has failed
		 */
		 isFailed(): boolean;
		/**
		 * Checks whether annotations from at least one source are available
		 * @return returns whether annotations is already loaded
		 */
		 isLoaded(): boolean;
		/**
		 * Set custom headers which are provided in a key/value map. These headers are used for all requests.
		 * The Accept-Language header cannot be modified and is set using the Core's language setting.
		 * 
		 * To remove these headers simply set the mHeaders parameter to {}. Please also note that when calling this method
		 * again all previous custom headers are removed unless they are specified again in the mCustomHeaders parameter.
		 * @param mHeaders the header name/value map.
		 */
		 setHeaders(mHeaders:any);
		/**
		 * Sets an XML document
		 * @param oXMLDocument The XML document to parse for annotations
		 * @param sXMLContent The XML content as string to parse for annotations
		 * @param mOptions Additional options
		 * @return Whether or not parsing was successful
		 */
		 setXML(oXMLDocument:any, sXMLContent:string, mOptions?:any): boolean;
	}
	class ODataContextBinding extends sap.ui.model.ContextBinding{
		/**
		 * Constructor for odata.ODataContextBinding
		 * @param oModel 
		 * @param sPath 
		 * @param oContext 
		 * @param mParameters 
		 */
		 constructor(oModel:sap.ui.model.Model, sPath:string, oContext:any, mParameters?:any);
		/**
		 * Creates a new subclass of class sap.ui.model.odata.ODataContextBinding with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.ContextBinding.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.model.odata.ODataContextBinding.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
	}
	class ODataListBinding extends sap.ui.model.ListBinding{
		/**
		 * 
		 * @param oModel 
		 * @param sPath 
		 * @param oContext 
		 * @param aSorters initial sort order (can be either a sorter or an array of sorters)
		 * @param aFilters predefined filter/s (can be either a filter or an array of filters)
		 * @param mParameters 
		 */
		 constructor(oModel:sap.ui.model.Model, sPath:string, oContext:sap.ui.model.Context, aSorters?:any[], aFilters?:any[], mParameters?:any);
		/**
		 * Creates a new subclass of class sap.ui.model.odata.ODataListBinding with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.ListBinding.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * 
		 * Filters the list.
		 * 
		 * When using sap.ui.model.Filter the filters are first grouped according to their binding path.
		 * All filters belonging to a group are combined with OR and after that the
		 * results of all groups are combined with AND.
		 * Usually this means, all filters applied to a single table column
		 * are combined with OR, while filters on different table columns are combined with AND.
		 * Please note that a custom filter function is not supported.
		 * @param aFilters Array of filter objects
		 * @param sFilterType Type of the filter which should be adjusted, if it is not given, the standard behaviour applies
		 * @return returns <code>this</code> to facilitate method chaining
		 */
		 filter(aFilters:sap.ui.model.Filter[]|sap.ui.model.odata.Filter[], sFilterType:sap.ui.model.FilterType): sap.ui.model.ListBinding;
		/**
		 * Return contexts for the list
		 * @param iStartIndex the start index of the requested contexts
		 * @param iLength the requested amount of contexts
		 * @param iThreshold 
		 * @return the array of contexts for each row of the bound list
		 */
		protected getContexts(iStartIndex?:number, iLength?:number, iThreshold?:number): sap.ui.model.Context[];
		/**
		 * Returns a metadata object for class sap.ui.model.odata.ODataListBinding.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Initialize binding. Fires a change if data is already available ($expand) or a refresh.
		 * If metadata is not yet available, do nothing, method will be called again when
		 * metadata is loaded.
		 */
		 initialize();
		/**
		 * Refreshes the binding, check whether the model data has been changed and fire change event
		 * if this is the case. For server side models this should refetch the data from the server.
		 * To update a control, even if no data has been changed, e.g. to reset a control after failed
		 * validation, please use the parameter bForceUpdate.
		 * @param bForceUpdate Update the bound control even if no data has been changed
		 */
		 refresh(bForceUpdate?:boolean);
		/**
		 * Sorts the list.
		 * @param aSorters the Sorter or an array of sorter objects object which define the sort order
		 * @return returns <code>this</code> to facilitate method chaining
		 */
		 sort(aSorters:sap.ui.model.Sorter|any[]): sap.ui.model.ListBinding;
	}
	class ODataMessageParser extends sap.ui.core.message.MessageParser{
		/**
		 * OData implementation of the sap.ui.core.message.MessageParser class. Parses message responses from the back-end.
		 */
		 constructor();
		/**
		 * Creates a new subclass of class sap.ui.model.odata.ODataMessageParser with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.message.MessageParser.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns the name of the header field that is used to parse the server messages
		 * @return The name of the header field
		 */
		 getHeaderField(): string;
		/**
		 * Returns a metadata object for class sap.ui.model.odata.ODataMessageParser.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Parses the given response for messages, calculates the delta and fires the messageChange-event
		 * on the MessageProcessor if messages are found.
		 * @param oResponse The response from the server containing body and headers
		 * @param oRequest The original request that lead to this response
		 * @param mGetEntities A map containing the entities requested from the back-end as keys
		 * @param mChangeEntities A map containing the entities changed on the back-end as keys
		 */
		 parse(oResponse:any, oRequest:any, mGetEntities:any, mChangeEntities:any);
		/**
		 * Sets the header field name that should be used for parsing the JSON messages
		 * @param sFieldName The name of the header field that should be used as source of the message object
		 * @return Instance reference for method chaining
		 */
		 setHeaderField(sFieldName:string): sap.ui.model.odata.ODataMessageParser;
	}
	class ODataMetadata extends sap.ui.base.EventProvider{
		/**
		 * Constructor for a new ODataMetadata.
		 * @param sMetadataURI needs the correct metadata uri including $metadata
		 * @param mParams optional map of parameters.
		 */
		 constructor(sMetadataURI:string, mParams?:any);
		/**
		 * Attach event-handler <code>fnFunction</code> to the 'failed' event of this <code>sap.ui.model.odata.ODataMetadata</code>.
		 * @param fnFunction The function to call, when the event occurs. This function will be called on the
		 *            oListener-instance (if present) or in a 'static way'.
		 * @param oData The object, that should be passed along with the event-object when firing the event.
		 * @param oListener Object on which to call the given function. If empty, the global context (window) is used.
		 * @return <code>this</code> to allow method chaining
		 */
		 attachFailed(fnFunction:any, oData?:any, oListener?:any): sap.ui.model.odata.ODataMetadata;
		/**
		 * Attach event-handler <code>fnFunction</code> to the 'loaded' event of this <code>sap.ui.model.odata.ODataMetadata</code>.
		 * @param fnFunction The function to call, when the event occurs. This function will be called on the
		 *            oListener-instance (if present) or in a 'static way'.
		 * @param oData The object, that should be passed along with the event-object when firing the event.
		 * @param oListener Object on which to call the given function. If empty, the global context (window) is used.
		 * @return <code>this</code> to allow method chaining
		 */
		 attachLoaded(fnFunction:any, oData?:any, oListener?:any): sap.ui.model.odata.ODataMetadata;
		/**
		 * Detach event-handler <code>fnFunction</code> from the 'failed' event of this <code>sap.ui.model.odata.ODataMetadata</code>.
		 * 
		 * The passed function and listener object must match the ones previously used for event registration.
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener Object on which the given function had to be called.
		 * @return <code>this</code> to allow method chaining
		 */
		 detachFailed(fnFunction:any, oListener:any): sap.ui.model.odata.ODataMetadata;
		/**
		 * Detach event-handler <code>fnFunction</code> from the 'loaded' event of this <code>sap.ui.model.odata.ODataMetadata</code>.
		 * 
		 * The passed function and listener object must match the ones previously used for event registration.
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener Object on which the given function had to be called.
		 * @return <code>this</code> to allow method chaining
		 */
		 detachLoaded(fnFunction:any, oListener:any): sap.ui.model.odata.ODataMetadata;
		/**
		 * Creates a new subclass of class sap.ui.model.odata.ODataMetadata with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Fire event failed to attached listeners.
		 * @param mArguments the arguments to pass along with the event.
		 * @return <code>this</code> to allow method chaining
		 */
		protected fireFailed(mArguments?:any): sap.ui.model.odata.ODataMetadata;
		/**
		 * Fire event loaded to attached listeners.
		 * @return <code>this</code> to allow method chaining
		 */
		protected fireLoaded(): sap.ui.model.odata.ODataMetadata;
		/**
		 * Returns a metadata object for class sap.ui.model.odata.ODataMetadata.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Return the metadata object
		 * @return metdata object
		 */
		 getServiceMetadata(): any;
		/**
		 * Get the the use-batch extension value if any
		 * @return true/false
		 */
		 getUseBatch(): boolean;
		/**
		 * Checks whether metadata loading has already failed
		 * @return returns whether metadata request has failed
		 */
		 isFailed(): boolean;
		/**
		 * Checks whether metadata is available
		 * @return returns whether metadata is already loaded
		 */
		 isLoaded(): boolean;
		/**
		 * Returns a promise for the loaded state of the metadata
		 * @return returns a promise on metadata loaded state
		 */
		 loaded(): any;
		/**
		 * Refreshes the metadata creating a new request to the server.
		 * Returns a new promise which can be resolved or rejected depending on the metadata loading state.
		 * @return returns a promise on metadata loaded state
		 */
		 refresh(): any;
	}
	class ODataModel extends sap.ui.model.Model{
		/**
		 * Constructor for a new ODataModel.
		 * @param sServiceUrl base uri of the service to request data from; additional URL parameters appended here will be appended to every request
		 * 								can be passed with the mParameters object as well: [mParameters.serviceUrl] A serviceURl is required!
		 * @param mParameters (optional) a map which contains the following parameter properties:
		 */
		 constructor(sServiceUrl?:string, mParameters?:any);
		/**
		 * Adds (a) new URL(s) to the be parsed for OData annotations, which are then merged into the annotations object
		 * which can be retrieved by calling the getServiceAnnotations()-method. If a $metadata url is passed the data will
		 * also be merged into the metadata object, which can be reached by calling the getServiceMetadata() method.
		 * @param vUrl Either one URL as string or an array or URL strings
		 * @return The Promise to load the given URL(s), resolved if all URLs have been loaded, rejected if at least one fails to load.
		 * 					 If this promise resolves it returns the following parameters:
		 * 					 annotations: The annotation object
		 * 					 entitySets: An array of EntitySet objects containing the newly merged EntitySets from a $metadata requests.
		 * 								 the structure is the same as in the metadata object reached by the getServiceMetadata() method.
		 * 								 For non $metadata requests the array will be empty.
		 */
		protected addAnnotationUrl(vUrl:string|string[]): any;
		/**
		 * Adds new xml content to be parsed for OData annotations, which are then merged into the annotations object which
		 * can be retrieved by calling the getServiceAnnotations()-method.
		 * @param sXMLContent The string that should be parsed as annotation XML
		 * @param bSuppressEvents Whether not to fire annotationsLoaded event on the annotationParser
		 * @return The Promise to parse the given XML-String, resolved if parsed without errors, rejected if errors occur
		 */
		protected addAnnotationXML(sXMLContent:string, bSuppressEvents?:boolean): any;
		/**
		 * Appends the change batch operations to the end of the batch stack. Only PUT, POST or DELETE batch operations should be included in the specified array.
		 * The operations in the array will be included in a single changeset. To embed change operations in different change sets call this method with the corresponding change operations again.
		 * If an illegal batch operation is added to the change set nothing will be performed and false will be returned.
		 * @param aChangeOperations an array of change batch operations created via <code>createBatchOperation</code> and <code>sMethod</code> = POST, PUT, MERGE or DELETE
		 */
		 addBatchChangeOperations(aChangeOperations:any[]);
		/**
		 * Appends the read batch operations to the end of the batch stack. Only GET batch operations should be included in the specified array.
		 * If an illegal batch operation is added to the batch nothing will be performed and false will be returned.
		 * @param aReadOperations an array of read batch operations created via <code>createBatchOperation</code> and <code>sMethod</code> = GET
		 */
		 addBatchReadOperations(aReadOperations:any[]);
		/**
		 * Attach event-handler <code>fnFunction</code> to the 'annotationsFailed' event of this <code>sap.ui.model.odata.ODataModel</code>.
		 * @param fnFunction The function to call, when the event occurs. This function will be called on the
		 *            oListener-instance (if present) or in a 'static way'.
		 * @param oData The object, that should be passed along with the event-object when firing the event.
		 * @param oListener Object on which to call the given function. If empty, the global context (window) is used.
		 * @return <code>this</code> to allow method chaining
		 */
		 attachAnnotationsFailed(fnFunction:any, oData?:any, oListener?:any): sap.ui.model.odata.ODataModel;
		/**
		 * Attach event-handler <code>fnFunction</code> to the 'annotationsLoaded' event of this <code>sap.ui.model.odata.ODataModel</code>.
		 * @param fnFunction The function to call, when the event occurs. This function will be called on the
		 *            oListener-instance (if present) or in a 'static way'.
		 * @param oData The object, that should be passed along with the event-object when firing the event.
		 * @param oListener Object on which to call the given function. If empty, the global context (window) is used.
		 * @return <code>this</code> to allow method chaining
		 */
		 attachAnnotationsLoaded(fnFunction:any, oData?:any, oListener?:any): sap.ui.model.odata.ODataModel;
		/**
		 * Attach event-handler <code>fnFunction</code> to the 'metadataFailed' event of this <code>sap.ui.model.odata.ODataModel</code>.
		 * @param fnFunction The function to call, when the event occurs. This function will be called on the
		 *            oListener-instance (if present) or in a 'static way'.
		 * @param oData The object, that should be passed along with the event-object when firing the event.
		 * @param oListener Object on which to call the given function. If empty, the global context (window) is used.
		 * @return <code>this</code> to allow method chaining
		 */
		 attachMetadataFailed(fnFunction:any, oData?:any, oListener?:any): sap.ui.model.odata.ODataModel;
		/**
		 * Attach event-handler <code>fnFunction</code> to the 'metadataLoaded' event of this <code>sap.ui.model.odata.ODataModel</code>.
		 * @param fnFunction The function to call, when the event occurs. This function will be called on the
		 *            oListener-instance (if present) or in a 'static way'.
		 * @param oData The object, that should be passed along with the event-object when firing the event.
		 * @param oListener Object on which to call the given function. If empty, the global context (window) is used.
		 * @return <code>this</code> to allow method chaining
		 */
		 attachMetadataLoaded(fnFunction:any, oData?:any, oListener?:any): sap.ui.model.odata.ODataModel;
		/**
		 * Trigger a request to the function import odata service that was specified in the model constructor.
		 * @param sFunctionName A string containing the name of the function to call.
		 * 		The name is concatenated to the sServiceUrl which was specified in the model constructor.
		 * @param mParameters Optional parameter map containing any of the following properties:
		 * @return an object which has an <code>abort</code> function to abort the current request.
		 */
		 callFunction(sFunctionName:string, mParameters?:any): any;
		/**
		 * Removes all operations in the current batch.
		 */
		 clearBatch();
		/**
		 * Trigger a POST request to the odata service that was specified in the model constructor. Please note that deep creates are not supported
		 * and may not work.
		 * @param sPath A string containing the path to the collection where an entry
		 * 		should be created. The path is concatenated to the sServiceUrl
		 * 		which was specified in the model constructor.
		 * @param oData data of the entry that should be created.
		 * @param mParameters Optional parameter map containing any of the following properties:
		 * @return an object which has an <code>abort</code> function to abort the current request.
		 */
		 create(sPath:string, oData:any, mParameters?:any): any;
		/**
		 * Creates a single batch operation (read or change operation) which can be used in a batch request.
		 * @param sPath A string containing the path to the collection or entry where the batch operation should be performed.
		 * 						The path is concatenated to the sServiceUrl which was specified in the model constructor.
		 * @param sMethod for the batch operation. Possible values are GET, PUT, MERGE, POST, DELETE
		 * @param oData optional data payload which should be created, updated, deleted in a change batch operation.
		 * @param oParameters optional parameter for additional information introduced in SAPUI5 1.9.1,
		 */
		 createBatchOperation(sPath:string, sMethod:string, oData?:any, oParameters?:any);
		/**
		 * Creates a new entry object which is described by the metadata of the entity type of the
		 * specified sPath Name. A context object is returned which can be used to bind
		 * against the newly created object.
		 * 
		 * For each created entry a request is created and stored in a request queue.
		 * The request queue can be submitted by calling submitChanges. To delete a created
		 * entry from the request queue call deleteCreateEntry.
		 * 
		 * The optional vProperties parameter can be used as follows:
		 * 
		 *   - vProperties could be an array containing the property names which should be included
		 *     in the new entry. Other properties defined in the entity type are not included.
		 *   - vProperties could be an object which includes the desired properties and the values
		 *     which should be used for the created entry.
		 * 
		 * If vProperties is not specified, all properties in the entity type will be included in the
		 * created entry.
		 * 
		 * If there are no values specified the properties will have undefined values.
		 * 
		 * Please note that deep creates (including data defined by navigationproperties) are not supported
		 * @param sPath Name of the path to the collection
		 * @param vProperties An array that specifies a set of properties or the entry
		 * @return oContext A Context object that point to the new created entry.
		 */
		 createEntry(sPath:string, vProperties:any[]|any): sap.ui.model.Context;
		/**
		 * Creates the key from the given collection name and property map
		 * @param sCollection The name of the collection
		 * @param oKeyParameters The object containing at least all the key properties of the entity type
		 * @param bDecode Whether the URI decoding should be applied on the key
		 */
		 createKey(sCollection:string, oKeyParameters:any, bDecode:boolean);
		/**
		 * Deletes a created entry from the request queue and the model.
		 * @param oContext The context object pointing to the created entry
		 */
		 deleteCreatedEntry(oContext:sap.ui.model.Context);
		/**
		 * 
		 */
		 destroy();
		/**
		 * Detach event-handler <code>fnFunction</code> from the 'annotationsFailed' event of this <code>sap.ui.model.odata.ODataModel</code>.
		 * 
		 * The passed function and listener object must match the ones previously used for event registration.
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener Object on which the given function had to be called.
		 * @return <code>this</code> to allow method chaining
		 */
		 detachAnnotationsFailed(fnFunction:any, oListener:any): sap.ui.model.odata.ODataModel;
		/**
		 * Detach event-handler <code>fnFunction</code> from the 'annotationsLoaded' event of this <code>sap.ui.model.odata.ODataModel</code>.
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener Object on which the given function had to be called.
		 * @return <code>this</code> to allow method chaining
		 */
		 detachAnnotationsLoaded(fnFunction:any, oListener:any): sap.ui.model.odata.ODataModel;
		/**
		 * Detach event-handler <code>fnFunction</code> from the 'metadataFailed' event of this <code>sap.ui.model.odata.ODataModel</code>.
		 * 
		 * The passed function and listener object must match the ones previously used for event registration.
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener Object on which the given function had to be called.
		 * @return <code>this</code> to allow method chaining
		 */
		 detachMetadataFailed(fnFunction:any, oListener:any): sap.ui.model.odata.ODataModel;
		/**
		 * Detach event-handler <code>fnFunction</code> from the 'metadataLoaded' event of this <code>sap.ui.model.odata.ODataModel</code>.
		 * 
		 * The passed function and listener object must match the ones previously used for event registration.
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener Object on which the given function had to be called.
		 * @return <code>this</code> to allow method chaining
		 */
		 detachMetadataLoaded(fnFunction:any, oListener:any): sap.ui.model.odata.ODataModel;
		/**
		 * Creates a new subclass of class sap.ui.model.odata.ODataModel with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.Model.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Fire event annotationsFailed to attached listeners.
		 * @param mArguments the arguments to pass along with the event.
		 * @return <code>this</code> to allow method chaining
		 */
		protected fireAnnotationsFailed(mArguments?:any): sap.ui.model.odata.ODataModel;
		/**
		 * Fire event annotationsLoaded to attached listeners.
		 * @param mArguments the arguments to pass along with the event.
		 * @return <code>this</code> to allow method chaining
		 */
		protected fireAnnotationsLoaded(mArguments?:any): sap.ui.model.odata.ODataModel;
		/**
		 * Fire event metadataFailed to attached listeners.
		 * @param mArguments the arguments to pass along with the event.
		 * @return <code>this</code> to allow method chaining
		 */
		protected fireMetadataFailed(mArguments?:any): sap.ui.model.odata.ODataModel;
		/**
		 * Fire event metadataLoaded to attached listeners.
		 * @param mArguments the arguments to pass along with the event.
		 * @return <code>this</code> to allow method chaining
		 */
		protected fireMetadataLoaded(mArguments?:any): sap.ui.model.odata.ODataModel;
		/**
		 * Force no caching
		 * @param bForceNoCache whether to force no caching
		 * @deprecated The caching should be controlled by the backend by setting the correct cache control header
		 */
		 forceNoCache(bForceNoCache?:boolean);
		/**
		 * Return requested data as object if the data has already been loaded and stored in the model.
		 * @param sPath A string containing the path to the data object that should be returned.
		 * @param oContext the optional context which is used with the sPath to retrieve the requested data.
		 * @param bIncludeExpandEntries This parameter should be set when a URI or custom parameter
		 * with a $expand System Query Option was used to retrieve associated entries embedded/inline.
		 * If true then the getProperty function returns a desired property value/entry and includes the associated expand entries (if any).
		 * If false the associated/expanded entry properties are removed and not included in the
		 * desired entry as properties at all. This is useful for performing updates on the base entry only. Note: A copy and not a reference of the entry will be returned.
		 * @deprecated please use {@link #getProperty} instead
		 * @return oData Object containing the requested data if the path is valid.
		 */
		 getData(sPath:string, oContext?:any, bIncludeExpandEntries?:boolean): any;
		/**
		 * Returns all headers and custom headers which are stored in the OData model.
		 * @return the header map
		 */
		 getHeaders(): any;
		/**
		 * Returns the key part from the entry URI or the given context or object
		 * @param oObject The context or object
		 * @param bDecode Whether the URI decoding should be applied on the key
		 */
		 getKey(oObject:any|sap.ui.model.Context, bDecode:boolean);
		/**
		 * Returns a metadata object for class sap.ui.model.odata.ODataModel.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Returns an instance of an OData meta model which offers a unified access to both OData V2
		 * meta data and V4 annotations. It uses the existing {@link sap.ui.model.odata.ODataMetadata}
		 * as a foundation and merges V4 annotations from the existing
		 * {@link sap.ui.model.odata.ODataAnnotations} directly into the corresponding model element.
		 * 
		 * <b>BEWARE:</b> Access to this OData meta model will fail before the promise returned by
		 * {@link sap.ui.model.odata.ODataMetaModel#loaded loaded} has been resolved!
		 * @return The meta model for this ODataModel
		 */
		 getMetaModel(): sap.ui.model.odata.ODataMetaModel;
		/**
		 * Returns the value for the property with the given <code>sPath</code>.
		 * If the path points to a navigation property which has been loaded via $expand then the <code>bIncludeExpandEntries</code>
		 * parameter determines if the navigation property should be included in the returned value or not.
		 * Please note that this currently works for 1..1 navigation properties only.
		 * @param sPath the path/name of the property
		 * @param oContext the context if available to access the property value
		 * @param bIncludeExpandEntries This parameter should be set when a URI or custom parameter
		 * with a $expand System Query Option was used to retrieve associated entries embedded/inline.
		 * If true then the getProperty function returns a desired property value/entry and includes the associated expand entries (if any).
		 * If false the associated/expanded entry properties are removed and not included in the
		 * desired entry as properties at all. This is useful for performing updates on the base entry only. Note: A copy and not a reference of the entry will be returned.
		 * @return the value of the property
		 */
		 getProperty(sPath:string, oContext?:any, bIncludeExpandEntries?:boolean): any;
		/**
		 * Returns the current security token. If the token has not been requested from the server it will be requested first.
		 * @return the CSRF security token
		 */
		 getSecurityToken(): string;
		/**
		 * Return the annotation object. Please note that when using the model with bLoadMetadataAsync = true then this function might return undefined because the
		 * metadata has not been loaded yet.
		 * In this case attach to the <code>annotationsLoaded</code> event to get notified when the annotations are available and then call this function.
		 * @return metdata object
		 */
		 getServiceAnnotations(): any;
		/**
		 * Return the metadata object. Please note that when using the model with bLoadMetadataAsync = true then this function might return undefined because the
		 * metadata has not been loaded yet.
		 * In this case attach to the <code>metadataLoaded</code> event to get notified when the metadata is available and then call this function.
		 * @return metdata object
		 */
		 getServiceMetadata(): any;
		/**
		 * Checks if there exist pending changes in the model created by the setProperty method.
		 * @return true/false
		 */
		 hasPendingChanges(): boolean;
		/**
		 * Returns whether this model supports the $count on its collections
		 * This method is deprecated, please use getDefaultCountMode instead.
		 * @deprecated 
		 * @return 
		 */
		 isCountSupported(): boolean;
		/**
		 * Trigger a GET request to the odata service that was specified in the model constructor.
		 * The data will not be stored in the model. The requested data is returned with the response.
		 * @param sPath A string containing the path to the data which should
		 * 		be retrieved. The path is concatenated to the sServiceUrl
		 * 		which was specified in the model constructor.
		 * @param mParameters Optional parameter map containing any of the following properties:
		 * @return an object which has an <code>abort</code> function to abort the current request.
		 */
		 read(sPath:string, mParameters?:any): any;
		/**
		 * Refresh the model.
		 * This will check all bindings for updated data and update the controls if data has been changed.
		 * @param bForceUpdate Force update of controls
		 * @param bRemoveData If set to true then the model data will be removed/cleared.
		 * 					Please note that the data might not be there when calling e.g. getProperty too early before the refresh call returned.
		 */
		 refresh(bForceUpdate?:boolean, bRemoveData?:boolean);
		/**
		 * refreshes the metadata for model, e.g. in case the first request for metadata has failed
		 */
		 refreshMetadata();
		/**
		 * refresh XSRF token by performing a GET request against the service root URL.
		 * @param fnSuccess a callback function which is called when the data has
		 *            					 been successfully retrieved.
		 * @param fnError a callback function which is called when the request failed. The handler can have the parameter: oError which contains
		 *  additional error information.
		 * @param bAsync true for asynchronous requests.
		 * @return an object which has an <code>abort</code> function to abort the current request.
		 */
		 refreshSecurityToken(fnSuccess?:any, fnError?:any, bAsync?:boolean): any;
		/**
		 * Trigger a DELETE request to the odata service that was specified in the model constructor.
		 * @param sPath A string containing the path to the data that should be removed.
		 * 		The path is concatenated to the sServiceUrl which was specified in the model constructor.
		 * @param mParameters Optional, can contain the following attributes: oContext, fnSuccess, fnError, sETag:
		 * @return an object which has an <code>abort</code> function to abort the current request.
		 */
		 remove(sPath:string, mParameters?:any): any;
		/**
		 * 
		 * Resets the collected changes by the setProperty method and reloads the data from the server.
		 * @param fnSuccess a callback function which is called when the data has
		 *            					 been successfully resetted. The handler can have the
		 *            	                 following parameters: oData and response.
		 * @param fnError a callback function which is called when the request failed
		 */
		 resetChanges(fnSuccess?:any, fnError?:any);
		/**
		 * Sets whether this OData service supports $count on its collections.
		 * This method is deprecated, please use setDefaultCountMode instead.
		 * @param bCountSupported 
		 * @deprecated 
		 */
		 setCountSupported(bCountSupported:boolean);
		/**
		 * Set custom headers which are provided in a key/value map. These headers are used for requests against the OData backend.
		 * Private headers which are set in the ODataModel cannot be modified.
		 * These private headers are: accept, accept-language, x-csrf-token, MaxDataServiceVersion, DataServiceVersion.
		 * 
		 * To remove these headers simply set the mCustomHeaders parameter to null. Please also note that when calling this method again all previous custom headers
		 * are removed unless they are specified again in the mCustomHeaders parameter.
		 * @param mHeaders the header name/value map.
		 */
		 setHeaders(mHeaders:any);
		/**
		 * Sets a new value for the given property <code>sPropertyName</code> in the model without triggering a server request.
		 *  This can be done by the submitChanges method.
		 * 
		 *  Note: Only one entry of one collection can be updated at once. Otherwise a fireRejectChange event is fired.
		 * 
		 *  Before updating a different entry the existing changes of the current entry have to be submitted or resetted by the
		 *  corresponding methods: submitChanges, resetChanges.
		 * 
		 *  IMPORTANT: All pending changes are resetted in the model if the application triggeres any kind of refresh
		 *  on that entry. Make sure to submit the pending changes first. To determine if there are any pending changes call the hasPendingChanges method.
		 * @param sPath path of the property to set
		 * @param oValue value to set the property to
		 * @param oContext the context which will be used to set the property
		 * @param bAsyncUpdate whether to update other bindings dependent on this property asynchronously
		 * @return true if the value was set correctly and false if errors occurred like the entry was not found or another entry was already updated.
		 */
		 setProperty(sPath:string, oValue:any, oContext?:any, bAsyncUpdate?:boolean): boolean;
		/**
		 * Enable/Disable XCSRF-Token handling
		 * @param bTokenHandling whether to use token handling or not
		 */
		 setTokenHandlingEnabled(bTokenHandling?:boolean);
		/**
		 * Enable/Disable batch for all requests
		 * @param bUseBatch whether the requests should be encapsulated in a batch request
		 */
		 setUseBatch(bUseBatch?:boolean);
		/**
		 * Submits the collected changes in the batch which were collected via <code>addBatchReadOperations</code> or <code>addBatchChangeOperations</code>.
		 * The batch will be cleared afterwards. If the batch is empty no request will be performed and false will be returned.
		 * Note: No data will be stored in the model.
		 * @param bImportData 
		 * @param fnSuccess a callback function which is called when the batch request has
		 *            					 been successfully sent. Note: There might have errors occured in the single batch operations. These errors can be accessed in the
		 *            aErrorResponses parameter in the callback handler.
		 *            The handler can have the
		 *            	                 following parameters: oData, oResponse and aErrorResponses.
		 * @param fnError a callback function which is called when the batch request failed. The handler can have the parameter: oError which contains
		 * additional error information.
		 * @param bAsync true for asynchronous request. Default is true.
		 * @return an object which has an <code>abort</code> function to abort the current request. Returns false if no request will be performed because the batch is empty.
		 */
		 submitBatch(bImportData:boolean, fnSuccess?:any, fnError?:any, bAsync?:boolean): any;
		/**
		 * Submits the collected changes which were collected by the setProperty method. A MERGE request will be triggered to only update the changed properties.
		 * If a URI with a $expand System Query Option was used then the expand entries will be removed from the collected changes.
		 * Changes to this entries should be done on the entry itself. So no deep updates are supported.
		 * @param fnSuccess a callback function which is called when the data has
		 *            					 been successfully updated. The handler can have the
		 *            	                 following parameters: oData and response.
		 * @param fnError a callback function which is called when the request failed. The handler can have the parameter: oError which contains
		 * additional error information
		 * @param oParameters optional parameter for additional information introduced in SAPUI5 1.9.1
		 * @return an object which has an <code>abort</code> function to abort the current request.
		 */
		 submitChanges(fnSuccess?:any, fnError?:any, oParameters?:any): any;
		/**
		 * Trigger a PUT/MERGE request to the odata service that was specified in the model constructor. Please note that deep updates are not supported
		 * and may not work. These should be done seperate on the entry directly.
		 * @param sPath A string containing the path to the data that should be updated.
		 * 		The path is concatenated to the sServiceUrl which was specified
		 * 		in the model constructor.
		 * @param oData data of the entry that should be updated.
		 * @param mParameters Optional, can contain the following attributes:
		 * @return an object which has an <code>abort</code> function to abort the current request.
		 */
		 update(sPath:string, oData:any, mParameters?:any): any;
		/**
		 * update all bindings
		 * @param bForceUpdate If set to false an update  will only be done when the value of a binding changed.
		 */
		 updateBindings(bForceUpdate?:boolean);
	}
	class ODataPropertyBinding extends sap.ui.model.PropertyBinding{
		/**
		 * 
		 * @param oModel 
		 * @param sPath 
		 * @param oContext 
		 * @param mParameters 
		 */
		 constructor(oModel:sap.ui.model.Model, sPath:string, oContext:sap.ui.model.Context, mParameters?:any);
		/**
		 * Creates a new subclass of class sap.ui.model.odata.ODataPropertyBinding with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.PropertyBinding.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.model.odata.ODataPropertyBinding.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Returns the current value of the bound target
		 * @return the current value of the bound target
		 */
		protected getValue(): any;
		/**
		 * Initialize the binding. The message should be called when creating a binding.
		 * If metadata is not yet available, do nothing, method will be called again when
		 * metadata is loaded.
		 */
		protected initialize();
	}
	namespace ODataUtils {
		/**
		 * Formats a JavaScript value according to the given
		 * <a href="http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem">
		 * EDM type</a>.
		 * @param vValue the value to format
		 * @param sType the EDM type (e.g. Edm.Decimal)
		 * @return the formatted value
		 */
		function formatValue(vValue:any, sType:string): string;
	}
	/**
	 * Different modes for executing service operations (filtering, sorting)
	 */
	type OperationMode = any
	/**
	 * The types in this namespace are {@link sap.ui.model.SimpleType simple types} corresponding
	 * to OData primitive types for both
	 * {@link http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem OData V2}
	 * and
	 * {@link http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part3-csdl.html OData V4} (see
	 * "4.4 Primitive Types").
	 * 
	 * They can be used in any place where simple types are allowed (and the model representation
	 * matches), but they are of course most valuable when used in bindings to a
	 * {@link sap.ui.model.odata.v2.ODataModel} or {@link sap.ui.model.odata.v4.ODataModel}.
	 * 
	 * <b>Example:</b>
	 * <pre>
	 *   &lt;Label text="ID"/&gt;
	 *   &lt;Input value="{path : 'id', type : 'sap.ui.model.odata.type.String',
	 *       constraints : {nullable : false, maxLength : 10}}"/&gt;
	 *   &lt;Label text="valid through"/&gt;
	 *   &lt;Input value="{path : 'validThrough', type : 'sap.ui.model.odata.type.DateTime',
	 *       constraints : {displayFormat : 'Date'}}"/&gt;
	 * </pre>
	 * 
	 * All types support formatting from the representation used in ODataModel ("model format") to
	 * various representations used by UI elements ("target type") and vice versa. Additionally they
	 * support validating a given value against the type's constraints.
	 * 
	 * The following target types may be supported:
	 * <table>
	 * <tr><th>Type</th><th>Description</th></tr>
	 * <tr><td><code>string</code></td><td>The value is converted to a <code>string</code>, so that it
	 * can be displayed in an input field. Supported by all types.</td></tr>
	 * <tr><td><code>boolean</code></td><td>The value is converted to a <code>Boolean</code>, so that
	 * it can be displayed in a checkbox. Only supported by
	 * {@link sap.ui.model.odata.type.Boolean}.</td></tr>
	 * <tr><td><code>int</code></td><td>The value is converted to an integer (as <code>number</code>).
	 * May cause truncation of decimals and overruns. Supported by all numeric types.</td></tr>
	 * <tr><td><code>float</code></td><td>The value is converted to a <code>number</code>. Supported by
	 * all numeric types.</td></tr>
	 * <tr><td><code>any</code></td><td>A technical format. The value is simply passed through. Only
	 * supported by <code>format</code>, not by <code>parse</code>. Supported by all types.</td></tr>
	 * </table>
	 * 
	 * All constraints relevant for OData V2 may be given as strings besides their natural types (e.g.
	 * <code>nullable : "false"</code> or <code>maxLength : "10"</code>). This makes the life of
	 * template processors easier, but is not needed for OData V4.
	 * 
	 * <b>Handling of <code>null</code></b>:
	 * 
	 * All types handle <code>null</code> in the same way. When formatting to <code>string</code>, it
	 * is simply passed through (and <code>undefined</code> becomes <code>null</code>, too). When
	 * parsing from <code>string</code>, it is also passed through.  Additionally,
	 * {@link sap.ui.model.type.odata.String String} and {@link sap.ui.model.type.odata.Guid Guid}
	 * convert the empty string to <code>null</code> when parsing. <code>validate</code> decides based
	 * on the constraint <code>nullable</code>: If <code>false</code>, <code>null</code> is not
	 * accepted and leads to a (locale-dependent) <code>ParseException</code>.
	 * 
	 * This ensures that the user cannot clear an input field bound to an attribute with non-nullable
	 * type. However it does not ensure that the user really entered something if the field was empty
	 * before.
	 */
	type type = any
	/**
	 * Different methods for update operations
	 */
	type UpdateMethod = any
	/**
	 * OData-based DataBinding
	 */
	type v2 = any
	/**
	 * Model and related classes like bindings for OData V4.
	 */
	type v4 = any
}

declare namespace sap.ui.model.odata.v2 {
	class ODataAnnotationsconstructor {
		/**
		 * Creates a new instance of the ODataAnnotations annotation loader.
		 * @param oMetadata Metadata object with the metadata information needed to parse the annotations
		 * @param mOptions Obligatory options
		 */
		 constructor(oMetadata:sap.ui.model.odata.ODataMetadata, mOptions:any);
	}
	class ODataContextBinding extends sap.ui.model.ContextBinding{
		/**
		 * Constructor for odata.ODataContextBinding
		 * @param oModel 
		 * @param sPath 
		 * @param oContext 
		 * @param mParameters a map which contains additional parameters for the binding.
		 */
		 constructor(oModel:sap.ui.model.Model, sPath:string, oContext:any, mParameters?:any);
		/**
		 * Creates a new subclass of class sap.ui.model.odata.v2.ODataContextBinding with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.ContextBinding.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.model.odata.v2.ODataContextBinding.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * 
		 * @param bForceUpdate Update the bound control even if no data has been changed
		 * @param sGroupId The group Id for the refresh
		 */
		 refresh(bForceUpdate?:boolean, sGroupId?:string);
	}
	class ODataListBinding extends sap.ui.model.ListBinding{
		/**
		 * 
		 * @param oModel 
		 * @param sPath 
		 * @param oContext 
		 * @param aSorters initial sort order (can be either a sorter or an array of sorters)
		 * @param aFilters predefined filter/s (can be either a filter or an array of filters)
		 * @param mParameters a map which contains additional parameters for the binding.
		 */
		 constructor(oModel:sap.ui.model.Model, sPath:string, oContext:sap.ui.model.Context, aSorters?:any[], aFilters?:any[], mParameters?:any);
		/**
		 * Creates a new subclass of class sap.ui.model.odata.v2.ODataListBinding with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.ListBinding.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * 
		 * Filters the list.
		 * 
		 * When using sap.ui.model.Filter the filters are first grouped according to their binding path.
		 * All filters belonging to a group are combined with OR and after that the
		 * results of all groups are combined with AND.
		 * Usually this means, all filters applied to a single table column
		 * are combined with OR, while filters on different table columns are combined with AND.
		 * Please note that a custom filter function is only supported with operation mode <code>sap.ui.model.odata.OperationMode.Client</code>.
		 * @param aFilters Array of filter objects
		 * @param sFilterType Type of the filter which should be adjusted, if it is not given, the standard behaviour applies
		 * @return returns <code>this</code> to facilitate method chaining
		 */
		 filter(aFilters:sap.ui.model.Filter[]|sap.ui.model.odata.Filter[], sFilterType:sap.ui.model.FilterType): sap.ui.model.ListBinding;
		/**
		 * Return contexts for the list
		 * @param iStartIndex the start index of the requested contexts
		 * @param iLength the requested amount of contexts
		 * @param iThreshold The threshold value
		 * @return the array of contexts for each row of the bound list
		 */
		protected getContexts(iStartIndex?:number, iLength?:number, iThreshold?:number): sap.ui.model.Context[];
		/**
		 * Return the length of the list.
		 * 
		 * In case the final length is unknown (e.g. when searching on a large dataset), this will
		 * return an estimated length.
		 * @return the length
		 */
		 getLength(): number;
		/**
		 * Returns a metadata object for class sap.ui.model.odata.v2.ODataListBinding.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Initialize binding. Fires a change if data is already available ($expand) or a refresh.
		 * If metadata is not yet available, do nothing, method will be called again when
		 * metadata is loaded.
		 * @return oBinding The binding instance
		 */
		 initialize(): sap.ui.model.odata.OdataListBinding;
		/**
		 * Refreshes the binding, check whether the model data has been changed and fire change event
		 * if this is the case. For server side models this should refetch the data from the server.
		 * To update a control, even if no data has been changed, e.g. to reset a control after failed
		 * validation, please use the parameter bForceUpdate.
		 * @param bForceUpdate Update the bound control even if no data has been changed
		 * @param sGroupId The group Id for the refresh
		 */
		 refresh(bForceUpdate?:boolean, sGroupId?:string);
		/**
		 * Sorts the list.
		 * @param aSorters the Sorter or an array of sorter objects object which define the sort order
		 * @return returns <code>this</code> to facilitate method chaining
		 */
		 sort(aSorters:sap.ui.model.Sorter|any[]): sap.ui.model.ListBinding;
	}
	class ODataModel extends sap.ui.model.Model{
		/**
		 * Constructor for a new ODataModel.
		 * @param sServiceUrl base uri of the service to request data from; additional URL parameters appended here will be appended to every request
		 * 								can be passed with the mParameters object as well: [mParameters.serviceUrl] A serviceURl is required!
		 * @param mParameters (optional) a map which contains the following parameter properties:
		 */
		 constructor(sServiceUrl?:string, mParameters?:any);
		/**
		 * Adds (a) new URL(s) to the be parsed for OData annotations, which are then merged into the annotations object
		 * which can be retrieved by calling the getServiceAnnotations()-method. If a $metadata url is passed the data will
		 * also be merged into the metadata object, which can be reached by calling the getServiceMetadata() method.
		 * @param vUrl Either one URL as string or an array or URL strings
		 * @return The Promise to load the given URL(s), resolved if all URLs have been loaded, rejected if at least one fails to load.
		 * 					 If this promise resolves it returns the following parameters:
		 * 					 annotations: The annotation object
		 * 					 entitySets: An array of EntitySet objects containing the newly merged EntitySets from a $metadata requests.
		 * 								 the structure is the same as in the metadata object reached by the getServiceMetadata() method.
		 * 								 For non $metadata requests the array will be empty.
		 */
		protected addAnnotationUrl(vUrl:string|string[]): any;
		/**
		 * Adds new xml content to be parsed for OData annotations, which are then merged into the annotations object which
		 * can be retrieved by calling the getServiceAnnotations()-method.
		 * @param sXMLContent The string that should be parsed as annotation XML
		 * @param bSuppressEvents Whether not to fire annotationsLoaded event on the annotationParser
		 * @return The Promise to parse the given XML-String, resolved if parsed without errors, rejected if errors occur
		 */
		protected addAnnotationXML(sXMLContent:string, bSuppressEvents?:boolean): any;
		/**
		 * Attach event-handler <code>fnFunction</code> to the 'annotationsFailed' event of this <code>sap.ui.model.odata.v2.ODataModel</code>.
		 * @param fnFunction The function to call, when the event occurs. This function will be called on the
		 *            oListener-instance (if present) or in a 'static way'.
		 * @param oData The object, that should be passed along with the event-object when firing the event.
		 * @param oListener Object on which to call the given function. If empty, the global context (window) is used.
		 * @return <code>this</code> to allow method chaining
		 */
		 attachAnnotationsFailed(fnFunction:any, oData?:any, oListener?:any): sap.ui.model.odata.v2.ODataModel;
		/**
		 * Attach event-handler <code>fnFunction</code> to the 'annotationsLoaded' event of this <code>sap.ui.model.odata.v2.ODataModel</code>.
		 * @param fnFunction The function to call, when the event occurs. This function will be called on the
		 *            oListener-instance (if present) or in a 'static way'.
		 * @param oData The object, that should be passed along with the event-object when firing the event.
		 * @param oListener Object on which to call the given function. If empty, the global context (window) is used.
		 * @return <code>this</code> to allow method chaining
		 */
		 attachAnnotationsLoaded(fnFunction:any, oData?:any, oListener?:any): sap.ui.model.odata.v2.ODataModel;
		/**
		 * Attach event-handler <code>fnFunction</code> to the 'batchRequestCompleted' event of this <code>sap.ui.model.odata.v2.ODataModel</code>.
		 * @param fnFunction The function to call, when the event occurs. This function will be called on the
		 *            oListener-instance (if present) or in a 'static way'.
		 * @param oData The object, that should be passed along with the event-object when firing the event.
		 * @param oListener Object on which to call the given function. If empty, the global context (window) is used.
		 * @return <code>this</code> to allow method chaining
		 */
		 attachBatchRequestCompleted(fnFunction:any, oData?:any, oListener?:any): sap.ui.model.odata.v2.ODataModel;
		/**
		 * Attach event-handler <code>fnFunction</code> to the 'batchRequestFailed' event of this <code>sap.ui.model.odata.v2.ODataModel</code>.<br/>
		 * @param fnFunction The function to call, when the event occurs. This function will be called on the
		 *            oListener-instance (if present) or in a 'static way'.
		 * @param oData The object, that should be passed along with the event-object when firing the event.
		 * @param oListener Object on which to call the given function. If empty, this Model is used.
		 * @return <code>this</code> to allow method chaining
		 */
		 attachBatchRequestFailed(fnFunction:any, oData?:any, oListener?:any): sap.ui.model.odata.v2.ODataModel;
		/**
		 * Attach event-handler <code>fnFunction</code> to the 'requestSent' event of this <code>sap.ui.model.odata.v2.ODataModel</code>.
		 * @param fnFunction The function to call, when the event occurs. This function will be called on the
		 *            oListener-instance (if present) or in a 'static way'.
		 * @param oData The object, that should be passed along with the event-object when firing the event.
		 * @param oListener Object on which to call the given function. If empty, the global context (window) is used.
		 * @return <code>this</code> to allow method chaining
		 */
		 attachBatchRequestSent(fnFunction:any, oData?:any, oListener?:any): sap.ui.model.odata.v2.ODataModel;
		/**
		 * Attach event-handler <code>fnFunction</code> to the 'metadataFailed' event of this <code>sap.ui.model.odata.v2.ODataModel</code>.
		 * @param fnFunction The function to call, when the event occurs. This function will be called on the
		 *            oListener-instance (if present) or in a 'static way'.
		 * @param oData The object, that should be passed along with the event-object when firing the event.
		 * @param oListener Object on which to call the given function. If empty, the global context (window) is used.
		 * @return <code>this</code> to allow method chaining
		 */
		 attachMetadataFailed(fnFunction:any, oData?:any, oListener?:any): sap.ui.model.odata.v2.ODataModel;
		/**
		 * Attach event-handler <code>fnFunction</code> to the 'metadataLoaded' event of this <code>sap.ui.model.odata.v2.ODataModel</code>.
		 * @param fnFunction The function to call, when the event occurs. This function will be called on the
		 *            oListener-instance (if present) or in a 'static way'.
		 * @param oData The object, that should be passed along with the event-object when firing the event.
		 * @param oListener Object on which to call the given function. If empty, the global context (window) is used.
		 * @return <code>this</code> to allow method chaining
		 */
		 attachMetadataLoaded(fnFunction:any, oData?:any, oListener?:any): sap.ui.model.odata.v2.ODataModel;
		/**
		 * Trigger a request to the function import odata service that was specified in the model constructor.
		 * 
		 * If the ReturnType of the function import is either an EntityType or a collection of EntityType the
		 * changes are reflected in the model, otherwise they are ignored, and the <code>response</code> can
		 * be processed in the successHandler.
		 * @param sFunctionName A string containing the name of the function to call. The name is concatenated to the sServiceUrl which was
		 *        specified in the model constructor.
		 * @param mParameters Optional parameter map containing any of the following properties:
		 * @return oRequestHandle An object which has a <code>contextCreated</code> function that returns a <code>Promise</code>.
		 *         This resolves with the created {@link sap.ui.model.Context}.
		 *         In addition it has an <code>abort</code> function to abort the current request.
		 */
		 callFunction(sFunctionName:string, mParameters?:any): any;
		/**
		 * Trigger a POST request to the odata service that was specified in the model constructor. Please note that deep creates are not supported
		 * and may not work.
		 * @param sPath A string containing the path to the collection where an entry
		 * 		should be created. The path is concatenated to the sServiceUrl
		 * 		which was specified in the model constructor.
		 * @param oData data of the entry that should be created.
		 * @param mParameters Optional parameter map containing any of the following properties:
		 * @return an object which has an <code>abort</code> function to abort the current request.
		 */
		 create(sPath:string, oData:any, mParameters?:any): any;
		/**
		 * Creates a binding context for the given path
		 * If the data of the context is not yet available, it can not be created, but first the
		 * entity needs to be fetched from the server asynchronously. In case no callback function
		 * is provided, the request will not be triggered.
		 * @param sPath binding path
		 * @param oContext bindingContext
		 * @param mParameters a map which contains additional parameters for the binding
		 * @param fnCallBack function called when context is created
		 * @param bReload reload of data
		 * @return sap.ui.model.Context
		 */
		 createBindingContext(sPath:string, oContext?:any, mParameters?:any, fnCallBack?:any, bReload?:boolean);
		/**
		 * Creates a new entry object which is described by the metadata of the entity type of the
		 * specified sPath Name. A context object is returned which can be used to bind
		 * against the newly created object.
		 * 
		 * For each created entry a request is created and stored in a request queue.
		 * The request queue can be submitted by calling submitChanges. To delete a created
		 * entry from the request queue call deleteCreatedEntry.
		 * 
		 * The optional properties parameter can be used as follows:
		 * 
		 *   - properties could be an array containing the property names which should be included
		 *     in the new entry. Other properties defined in the entity type are not included.
		 *   - properties could be an object which includes the desired properties and the values
		 *     which should be used for the created entry.
		 * 
		 * If properties is not specified, all properties in the entity type will be included in the
		 * created entry.
		 * 
		 * If there are no values specified the properties will have undefined values.
		 * 
		 * Please note that deep creates (including data defined by navigationproperties) are not supported
		 * @param sPath Name of the path to the EntitySet
		 * @param mParameters A map of the following parameters:
		 * @return oContext A Context object that point to the new created entry.
		 */
		 createEntry(sPath:string, mParameters:any): sap.ui.model.Context;
		/**
		 * Creates the key from the given collection name and property map. Please make sure that the metadata document is loaded before using this function.
		 * @param sCollection The name of the collection
		 * @param oKeyProperties The object containing at least all the key properties of the entity type
		 * @return [sKey] key of the entry
		 */
		 createKey(sCollection:string, oKeyProperties:any): string;
		/**
		 * Deletes a created entry from the request queue and the model.
		 * @param oContext The context object pointing to the created entry
		 */
		 deleteCreatedEntry(oContext:sap.ui.model.Context);
		/**
		 * 
		 */
		 destroy();
		/**
		 * Detach event-handler <code>fnFunction</code> from the 'annotationsFailed' event of this <code>sap.ui.model.odata.v2.ODataModel</code>.
		 * 
		 * The passed function and listener object must match the ones previously used for event registration.
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener Object on which the given function had to be called.
		 * @return <code>this</code> to allow method chaining
		 */
		 detachAnnotationsFailed(fnFunction:any, oListener:any): sap.ui.model.odata.v2.ODataModel;
		/**
		 * Detach event-handler <code>fnFunction</code> from the 'annotationsLoaded' event of this <code>sap.ui.model.odata.v2.ODataModel</code>.
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener Object on which the given function had to be called.
		 * @return <code>this</code> to allow method chaining
		 */
		 detachAnnotationsLoaded(fnFunction:any, oListener:any): sap.ui.model.odata.v2.ODataModel;
		/**
		 * Detach event-handler <code>fnFunction</code> from the 'batchRequestCompleted' event of this <code>sap.ui.model.odata.v2.ODataModel</code>.
		 * 
		 * The passed function and listener object must match the ones previously used for event registration.
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener Object on which the given function had to be called.
		 * @return <code>this</code> to allow method chaining
		 */
		 detachBatchRequestCompleted(fnFunction:any, oListener:any): sap.ui.model.odata.v2.ODataModel;
		/**
		 * Detach event-handler <code>fnFunction</code> from the 'batchRequestFailed' event of this <code>sap.ui.model.odata.v2.ODataModel</code>.<br/>
		 * 
		 * The passed function and listener object must match the ones previously used for event registration.
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener Object on which the given function had to be called.
		 * @return <code>this</code> to allow method chaining
		 */
		 detachBatchRequestFailed(fnFunction:any, oListener:any): sap.ui.model.odata.v2.ODataModel;
		/**
		 * Detach event-handler <code>fnFunction</code> from the 'batchRequestSent' event of this <code>sap.ui.model.odata.v2.ODataModel</code>.
		 * 
		 * The passed function and listener object must match the ones previously used for event registration.
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener Object on which the given function had to be called.
		 * @return <code>this</code> to allow method chaining
		 */
		 detachBatchRequestSent(fnFunction:any, oListener:any): sap.ui.model.odata.v2.ODataModel;
		/**
		 * Detach event-handler <code>fnFunction</code> from the 'metadataFailed' event of this <code>sap.ui.model.odata.v2.ODataModel</code>.
		 * 
		 * The passed function and listener object must match the ones previously used for event registration.
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener Object on which the given function had to be called.
		 * @return <code>this</code> to allow method chaining
		 */
		 detachMetadataFailed(fnFunction:any, oListener:any): sap.ui.model.odata.v2.ODataModel;
		/**
		 * Detach event-handler <code>fnFunction</code> from the 'metadataLoaded' event of this <code>sap.ui.model.odata.v2.ODataModel</code>.
		 * 
		 * The passed function and listener object must match the ones previously used for event registration.
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener Object on which the given function had to be called.
		 * @return <code>this</code> to allow method chaining
		 */
		 detachMetadataLoaded(fnFunction:any, oListener:any): sap.ui.model.odata.v2.ODataModel;
		/**
		 * Creates a new subclass of class sap.ui.model.odata.v2.ODataModel with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.Model.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Fire event annotationsFailed to attached listeners.
		 * @param mArguments the arguments to pass along with the event.
		 * @return <code>this</code> to allow method chaining
		 */
		protected fireAnnotationsFailed(mArguments?:any): sap.ui.model.odata.v2.ODataModel;
		/**
		 * Fire event annotationsLoaded to attached listeners.
		 * @param mArguments the arguments to pass along with the event.
		 * @return <code>this</code> to allow method chaining
		 */
		protected fireAnnotationsLoaded(mArguments?:any): sap.ui.model.odata.v2.ODataModel;
		/**
		 * Fire event batchRequestCompleted to attached listeners.
		 * @param mArguments parameters to add to the fired event
		 * @return <code>this</code> to allow method chaining
		 */
		protected fireBatchRequestCompleted(mArguments:any): sap.ui.model.odata.v2.ODataModel;
		/**
		 * Fire event batchRequestFailed to attached listeners.
		 * @param mArguments the arguments to pass along with the event.
		 * @return <code>this</code> to allow method chaining
		 */
		protected fireBatchRequestFailed(mArguments:any): sap.ui.model.odata.v2.ODataModel;
		/**
		 * Fire event batchRequestSent to attached listeners.
		 * @param mArguments the arguments to pass along with the event.
		 * @return <code>this</code> to allow method chaining
		 */
		protected fireBatchRequestSent(mArguments?:any): sap.ui.model.odata.v2.ODataModel;
		/**
		 * Fire event metadataFailed to attached listeners.
		 * @param mArguments the arguments to pass along with the event.
		 * @return <code>this</code> to allow method chaining
		 */
		protected fireMetadataFailed(mArguments?:any): sap.ui.model.odata.v2.ODataModel;
		/**
		 * Fire event metadataLoaded to attached listeners.
		 * @param mArguments the arguments to pass along with the event.
		 * @return <code>this</code> to allow method chaining
		 */
		protected fireMetadataLoaded(mArguments?:any): sap.ui.model.odata.v2.ODataModel;
		/**
		 * Force the update on the server of an entity by setting its ETag to '*'.
		 * ETag handling must be active so the force update will work.
		 * @param sKey The key to an Entity e.g.: Customer(4711)
		 */
		 forceEntityUpdate(sKey:string);
		/**
		 * Returns the definition of groups per EntityType for TwoWay changes
		 * @return mChangeGroups Definition of Groups for "TwoWay" changes
		 */
		 getChangeGroups(): any;
		/**
		 * Return requested data as object if the data has already been loaded and stored in the model.
		 * @param sPath A string containing the path to the data object that should be returned.
		 * @param oContext the optional context which is used with the sPath to retrieve the requested data.
		 * @param bIncludeExpandEntries This parameter should be set when a URI or custom parameter
		 * with a $expand System Query Option was used to retrieve associated entries embedded/inline.
		 * If true then the getProperty function returns a desired property value/entry and includes the associated expand entries (if any).
		 * If false the associated/expanded entry properties are removed and not included in the
		 * desired entry as properties at all. This is useful for performing updates on the base entry only. Note: A copy and not a reference of the entry will be returned.
		 * @deprecated please use {@link #getProperty} instead
		 * @return oData Object containing the requested data if the path is valid.
		 */
		 getData(sPath:string, oContext?:any, bIncludeExpandEntries?:boolean): any;
		/**
		 * Returns the array of GroupIds that are set as deferred
		 * @return aGroupIds The array of deferred GroupIds
		 */
		 getDeferredGroups(): any[];
		/**
		 * Returns the ETag for a given binding path/context or data object
		 * @param sPath The binding path
		 * @param oContext The binding context
		 * @param oEntity The entity data
		 * @return The found ETag (or null if none could be found)
		 */
		 getETag(sPath?:string, oContext?:sap.ui.model.Context, oEntity?:any): string;
		/**
		 * Returns all headers and custom headers which are stored in the OData model.
		 * @return the header map
		 */
		 getHeaders(): any;
		/**
		 * Returns the key part from the entry URI or the given context or object
		 * @param vValue A string representation of an URI, the context or entry object
		 * @return [sKey] key of the entry
		 */
		 getKey(vValue:string|any|sap.ui.model.Context): string;
		/**
		 * Returns a metadata object for class sap.ui.model.odata.v2.ODataModel.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Returns an instance of an OData meta model which offers a unified access to both OData V2
		 * meta data and V4 annotations. It uses the existing {@link sap.ui.model.odata.ODataMetadata}
		 * as a foundation and merges V4 annotations from the existing
		 * {@link sap.ui.model.odata.v2.ODataAnnotations} directly into the corresponding model element.
		 * 
		 * <b>BEWARE:</b> Access to this OData meta model will fail before the promise returned by
		 * {@link sap.ui.model.odata.ODataMetaModel#loaded loaded} has been resolved!
		 * @return The meta model for this ODataModel
		 */
		 getMetaModel(): sap.ui.model.odata.ODataMetaModel;
		/**
		 * Returns the original value for the property with the given path and context.
		 * The original value is the value that was last responded by the server.
		 * @param sPath the path/name of the property
		 * @param oContext the context if available to access the property value
		 * @return vValue the value of the property
		 */
		 getOriginalProperty(sPath:string, oContext?:any): any;
		/**
		 * Returns the value for the property with the given <code>sPath</code>.
		 * If the path points to a navigation property which has been loaded via $expand then the <code>bIncludeExpandEntries</code>
		 * parameter determines if the navigation property should be included in the returned value or not.
		 * Please note that this currently works for 1..1 navigation properties only.
		 * @param sPath the path/name of the property
		 * @param oContext the context if available to access the property value
		 * @param bIncludeExpandEntries This parameter should be set when a URI or custom parameter
		 * with a $expand System Query Option was used to retrieve associated entries embedded/inline.
		 * If true then the getProperty function returns a desired property value/entry and includes the associated expand entries (if any).
		 * If false the associated/expanded entry properties are removed and not included in the
		 * desired entry as properties at all. This is useful for performing updates on the base entry only. Note: A copy and not a reference of the entry will be returned.
		 * @return vValue the value of the property
		 */
		 getProperty(sPath:string, oContext?:any, bIncludeExpandEntries?:boolean): any;
		/**
		 * Returns the current security token. If the token has not been requested from the server it will be requested first.
		 * @return the CSRF security token
		 */
		 getSecurityToken(): string;
		/**
		 * Return the annotation object. Please note that the metadata is loaded asynchronously and this function might return undefined because the
		 * metadata has not been loaded yet.
		 * In this case attach to the <code>annotationsLoaded</code> event to get notified when the annotations are available and then call this function.
		 * @return metdata object
		 */
		 getServiceAnnotations(): any;
		/**
		 * Return the parsed XML metadata as a Javascript object. Please note that the metadata is loaded asynchronously and this function might return undefined because the
		 * metadata has not been loaded yet.
		 * In this case attach to the <code>metadataLoaded</code> event to get notified when the metadata is available and then call this function.
		 * @return metdata object
		 */
		 getServiceMetadata(): any;
		/**
		 * Checks if there exist pending changes in the model created by the setProperty method.
		 * @return true/false
		 */
		 hasPendingChanges(): boolean;
		/**
		 * Checks if there are pending requests, either ongoing or sequential
		 * @return true/false
		 */
		 hasPendingRequests(): boolean;
		/**
		 * Trigger a GET request to the odata service that was specified in the model constructor.
		 * The data will be stored in the model. The requested data is returned with the response.
		 * @param sPath A string containing the path to the data which should
		 * 		be retrieved. The path is concatenated to the sServiceUrl
		 * 		which was specified in the model constructor.
		 * @param mParameters Optional parameter map containing any of the following properties:
		 * @return an object which has an <code>abort</code> function to abort the current request.
		 */
		 read(sPath:string, mParameters?:any): any;
		/**
		 * Refresh the model.
		 * This will check all bindings for updated data and update the controls if data has been changed.
		 * @param bForceUpdate Force update of controls
		 * @param bRemoveData If set to true then the model data will be removed/cleared.
		 * 					Please note that the data might not be there when calling e.g. getProperty too early before the refresh call returned.
		 * @param sGroupId The groupId. Requests belonging to the same groupId will be bundled in one batch request.
		 */
		 refresh(bForceUpdate?:boolean, bRemoveData?:boolean, sGroupId?:string);
		/**
		 * Refreshes the metadata for model, e.g. in case the request for metadata has failed.
		 * Returns a new promise which can be resolved or rejected depending on the metadata loading state.
		 * @return returns a promise on metadata loaded state or null if metadata is not initialized or currently refreshed.
		 */
		 refreshMetadata(): any;
		/**
		 * refresh XSRF token by performing a GET request against the service root URL.
		 * @param fnSuccess a callback function which is called when the data has
		 *            					 been successfully retrieved.
		 * @param fnError a callback function which is called when the request failed. The handler can have the parameter: oError which contains
		 *  additional error information.
		 * @return an object which has an <code>abort</code> function to abort the current request.
		 */
		 refreshSecurityToken(fnSuccess?:any, fnError?:any): any;
		/**
		 * Trigger a DELETE request to the odata service that was specified in the model constructor.
		 * @param sPath A string containing the path to the data that should be removed.
		 * 		The path is concatenated to the sServiceUrl which was specified in the model constructor.
		 * @param mParameters Optional, can contain the following attributes:
		 * @return an object which has an <code>abort</code> function to abort the current request.
		 */
		 remove(sPath:string, mParameters?:any): any;
		/**
		 * 
		 * Resets the collected changes by the setProperty method.
		 * @param aPath Array of paths that should be resetted.
		 * 							If no array is passed all changes will be resetted.
		 */
		 resetChanges(aPath?:any[]);
		/**
		 * Returns a promise, which will resolve with the security token as soon as it is available
		 * @return the CSRF security token
		 */
		 securityTokenAvailable(): any;
		/**
		 * Definition of groups per EntityType for "TwoWay" changes
		 * @param mGroups A map containing the definition of bacthGroups for TwoWay changes. The Map has the
		 * following format:
		 * {
		 * 		"EntityTypeName": {
		 * 			groupId: "ID",
		 * 			[changeSetId: "ID",]
		 * 			[single: true/false,]
		 * 		}
		 * }
		 * GroupId: Defines the Group for changes of the defined EntityTypeName
		 * changeSetId: Defines a changeSetId wich bundles the changes for the EntityType.
		 * single: Defines if every change will get an own changeSet (true)
		 */
		 setChangeGroups(mGroups:any);
		/**
		 * Setting request groups as deferred. Requests that belongs to a deferred group will be sent manually
		 * via a submitChanges call.
		 * @param aGroupIds Array of GroupIds that should be set as deferred
		 */
		 setDeferredGroups(aGroupIds:any[]);
		/**
		 * Set custom headers which are provided in a key/value map. These headers are used for requests against the OData backend.
		 * Private headers which are set in the ODataModel cannot be modified.
		 * These private headers are: accept, accept-language, x-csrf-token, MaxDataServiceVersion, DataServiceVersion.
		 * 
		 * To remove these headers simply set the mCustomHeaders parameter to null. Please also note that when calling this method again all previous custom headers
		 * are removed unless they are specified again in the mCustomHeaders parameter.
		 * @param mHeaders the header name/value map.
		 */
		 setHeaders(mHeaders:any);
		/**
		 * Sets a new value for the given property <code>sPropertyName</code> in the model.
		 * 
		 * If the changeBatchGroup for the changed EntityType is set to deferred changes could be submitted
		 * with submitChanges. Otherwise the change will be submitted directly.
		 * @param sPath path of the property to set
		 * @param oValue value to set the property to
		 * @param oContext the context which will be used to set the property
		 * @param bAsyncUpdate whether to update other bindings dependent on this property asynchronously
		 * @return true if the value was set correctly and false if errors occurred like the entry was not found or another entry was already updated.
		 */
		 setProperty(sPath:string, oValue:any, oContext?:any, bAsyncUpdate?:boolean): boolean;
		/**
		 * Enable/Disable XCSRF-Token handling
		 * @param bTokenHandling whether to use token handling or not
		 */
		 setTokenHandlingEnabled(bTokenHandling?:boolean);
		/**
		 * 
		 * @param bUseBatch whether the requests should be encapsulated in a batch request
		 */
		 setUseBatch(bUseBatch?:boolean);
		/**
		 * Submits the collected changes which were collected by the setProperty method. The update method is defined by the global <code>defaultUpdateMethod</code>
		 * parameter which is sap.ui.model.odata.UpdateMethod.Merge by default. In case of a sap.ui.model.odata.UpdateMethod.Merge request only the changed properties will be updated.
		 * If a URI with a $expand System Query Option was used then the expand entries will be removed from the collected changes.
		 * Changes to this entries should be done on the entry itself. So no deep updates are supported.
		 * 
		 * Important: The success/error handler will only be called if batch support is enabled. If multiple batchGroups are submitted the handlers will be called for every batchGroup.
		 * @param mParameters a map which contains the following parameter properties:
		 * @return an object which has an <code>abort</code> function to abort the current request or requests
		 */
		 submitChanges(mParameters?:any): any;
		/**
		 * Trigger a PUT/MERGE request to the odata service that was specified in the model constructor.
		 * The update method used is defined by the global <code>defaultUpdateMethod</code> parameter which is sap.ui.model.odata.UpdateMethod.Merge by default.
		 * Please note that deep updates are not supported and may not work. These should be done seperate on the entry directly.
		 * @param sPath A string containing the path to the data that should be updated.
		 * 		The path is concatenated to the sServiceUrl which was specified
		 * 		in the model constructor.
		 * @param oData data of the entry that should be updated.
		 * @param mParameters Optional, can contain the following attributes:
		 * @return an object which has an <code>abort</code> function to abort the current request.
		 */
		 update(sPath:string, oData:any, mParameters?:any): any;
		/**
		 * update all bindings
		 * @param bForceUpdate If set to false an update  will only be done when the value of a binding changed.
		 */
		 updateBindings(bForceUpdate?:boolean);
	}
	class ODataTreeBinding extends sap.ui.model.TreeBinding{
		/**
		 * 
		 * @param oModel 
		 * @param sPath 
		 * @param oContext 
		 * @param aApplicationFilters predefined filter/s (can be either a filter or an array of filters). All initial filters,
		 * 										   will be sent with every request. Filtering on the ODataTreeBinding is only supported with initial filters.
		 * @param mParameters Parameter Object
		 * @param aSorters predefined sorter/s (can be either a sorter or an array of sorters)
		 */
		 constructor(oModel:sap.ui.model.Model, sPath:string, oContext:sap.ui.model.Context, aApplicationFilters?:sap.ui.model.Filter[], mParameters?:any, aSorters?:sap.ui.model.Sorter[]);
		/**
		 * Creates a new subclass of class sap.ui.model.odata.v2.ODataTreeBinding with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.TreeBinding.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Applies the given filters to the ODataTreeBinding.
		 * Please note that "Control" filters are not suported for OperationMode.Server, here only "Application" filters are allowed.
		 * Filters given via the constructor are always Application filters and will be send with every backend-request.
		 * Please see the constructor documentation for more information.
		 * 
		 * Since 1.34.0 complete clientside filtering is supported for OperationMode.Client and in OperationMode.Auto, in case the backend-count is lower than the threshold.
		 * In this case all control and application filters will be applied on the client.
		 * See also: {@link sap.ui.model.odata.OperationMode.Auto}, {@link sap.ui.model.FilterType}.
		 * 
		 * For the OperationMode.Client and OperationMode.Auto, you may also specify the "useServersideApplicationFilters" constructor binding parameter.
		 * If this is set, the Application filters will always be applied on the backend, and thus trigger an OData request.
		 * Please see the constructor documentation for more information.
		 * @param aFilters 
		 * @param sFilterType Type of the filter which should be adjusted, if it is not given, the standard behaviour FilterType.Client applies
		 * @return returns <code>this</code> to facilitate method chaining
		 */
		 filter(aFilters:sap.ui.model.Filter[]|sap.ui.model.Filter, sFilterType:sap.ui.model.FilterType): sap.ui.model.odata.v2.ODataTreeBinding;
		/**
		 * Returns the number of child nodes. This function is not available when the annotation "hierarchy-node-descendant-count-for"
		 * is exposed on the service.
		 * @param oContext the context element of the node
		 * @return the number of children
		 */
		 getChildCount(oContext:any): number;
		/**
		 * Returns a metadata object for class sap.ui.model.odata.v2.ODataTreeBinding.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Returns the contexts of the child nodes for the given context. This function is not available when the annotation "hierarchy-node-descendant-count-for"
		 * is exposed on the service.
		 * @param oContext the context for which the child nodes should be retrieved
		 * @param iStartIndex the start index of the requested contexts
		 * @param iLength the requested amount of contexts
		 * @param iThreshold 
		 * @return the contexts array
		 */
		 getNodeContexts(oContext:sap.ui.model.Context, iStartIndex:number, iLength:number, iThreshold:number): sap.ui.model.Context[];
		/**
		 * Returns root contexts for the tree. You can specify the start index and the length for paging requests.
		 * This function is not available when the annotation "hierarchy-node-descendant-count-for" is exposed on the service.
		 * @param iStartIndex the start index of the requested contexts
		 * @param iLength the requested amount of contexts. If none given, the default value is the size limit of the underlying
		 * 												 sap.ui.model.odata.v2.ODataModel instance.
		 * @param iThreshold the number of entities which should be retrieved in addition to the given length.
		 * 				  A higher threshold reduces the number of backend requests, yet these request blow up in size, since more data is loaded.
		 * @return an array containing the contexts for the entities returned by the backend, might be fewer than requested
		 * 								  if the backend does not have enough data.
		 */
		 getRootContexts(iStartIndex?:number, iLength?:number, iThreshold?:number): sap.ui.model.Context[];
		/**
		 * Returns the rootLevel
		 * @return 
		 */
		 getRootLevel(): number;
		/**
		 * Returns if the node has child nodes.
		 * If the ODataTreeBinding is running with hierarchy annotations, a context with the property values "expanded" or "collapsed"
		 * for the drilldown state property, returns true. Entities with drilldown state "leaf" return false.
		 * 
		 * This function is not available when the annotation "hierarchy-node-descendant-count-for" is exposed on the service.
		 * @param oContext the context element of the node
		 * @return true if node has children
		 */
		 hasChildren(oContext:sap.ui.model.Context): boolean;
		/**
		 * Initialize binding. Fires a change if data is already available ($expand) or a refresh.
		 * If metadata is not yet available, do nothing, method will be called again when
		 * metadata is loaded.
		 * @return The binding instance
		 */
		 initialize(): sap.ui.model.odata.v2.ODataTreeBinding;
		/**
		 * Refreshes the binding, check whether the model data has been changed and fire change event
		 * if this is the case. For server side models this should refetch the data from the server.
		 * To update a control, even if no data has been changed, e.g. to reset a control after failed
		 * validation, please use the parameter bForceUpdate.
		 * @param bForceUpdate Update the bound control even if no data has been changed
		 * @param sGroupId The  group Id for the refresh
		 */
		 refresh(bForceUpdate?:boolean, sGroupId?:string);
		/**
		 * Sets the rootLevel
		 * The root level is the level of the topmost tree nodes, which will be used as an entry point for OData services.
		 * This is only possible (and necessary) for OData services implementing the hierarchy annotation specification,
		 * or when providing the annotation information locally as a binding parameter. See the constructor for API documentation on this.
		 * @param iRootLevel 
		 */
		 setRootLevel(iRootLevel:number);
		/**
		 * Sorts the Tree according to the given Sorter(s).
		 * In OperationMode.Client or OperationMode.Auto (if the given threshold is satisfied), the sorters are applied locally on the client.
		 * @param aSorters the Sorter or an Array of sap.ui.model.Sorter instances
		 * @return returns <code>this</code> to facilitate method chaining
		 */
		 sort(aSorters:sap.ui.model.Sorter[]|sap.ui.model.Sorter): sap.ui.model.odata.v2.ODataTreeBinding;
	}
}

declare namespace sap.ui.model.odata.v4 {
	class Context extends sap.ui.model.Context{
		/**
		 * Do <strong>NOT</strong> call this private constructor for a new <code>Context</code>. In the
		 * OData V4 model you cannot create contexts at will: retrieve them from a binding or a view
		 * element instead.
		 * @param oModel The model
		 * @param oBinding A binding that belongs to the model
		 * @param sPath An absolute path without trailing slash
		 * @param iIndex Index of item (within the collection addressed by <code>sPath</code>) represented
		 *   by this context; used by list bindings, not context bindings
		 */
		 constructor(oModel:sap.ui.model.odata.v4.ODataModel, oBinding:sap.ui.model.odata.v4.ODataContextBinding|sap.ui.model.odata.v4.ODataListBinding, sPath:string, iIndex?:number);
		/**
		 * Creates a new subclass of class sap.ui.model.odata.v4.Context with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.Context.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.model.odata.v4.Context.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
	}
	class ODataContextBinding extends sap.ui.model.ContextBinding{
		/**
		 * DO NOT CALL this private constructor for a new <code>ODataContextBinding</code>,
		 * but rather use {@link sap.ui.model.odata.v4.ODataModel#bindContext bindContext} instead!
		 * @param oModel The OData V4 model
		 * @param sPath The binding path in the model; must not end with a slash
		 * @param oContext The context which is required as base for a relative path
		 * @param mParameters Map of binding parameters which can be OData query options as specified in
		 *   "OData Version 4.0 Part 2: URL Conventions" or the binding-specific parameters "$$groupId"
		 *   and "$$updateGroupId".
		 *   Note: If parameters are provided for a relative binding path, the binding accesses data
		 *   with its own service requests instead of using its parent binding.
		 *   The following OData query options are allowed:
		 *   <ul>
		 *   <li> All "5.2 Custom Query Options" except for those with a name starting with "sap-"
		 *   <li> The $expand, $filter, $orderby and $select "5.1 System Query Options"; OData V4 only
		 *   allows $filter and $orderby inside resource paths that identify a collection. In our case
		 *   here, this means you can only use them inside $expand.
		 *   </ul>
		 *   All other query options lead to an error.
		 *   Query options specified for the binding overwrite model query options.
		 */
		 constructor(oModel:sap.ui.model.odata.v4.ODataModel, sPath:string, oContext?:sap.ui.model.odata.v4.Context, mParameters?:any);
		/**
		 * Creates a new subclass of class sap.ui.model.odata.v4.ODataContextBinding with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.ContextBinding.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.model.odata.v4.ODataContextBinding.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
	}
	class ODataListBinding extends sap.ui.model.ListBinding{
		/**
		 * DO NOT CALL this private constructor for a new <code>ODataListBinding</code>,
		 * but rather use {@link sap.ui.model.odata.v4.ODataModel#bindList bindList} instead!
		 * @param oModel The OData V4 model
		 * @param sPath The binding path in the model; must not be empty or end with a slash
		 * @param oContext The parent context which is required as base for a relative path
		 * @param vSorters The dynamic sorters to be used initially. Call {@link #sort} to replace them. Static
		 *   sorters, as defined in the '$orderby' binding parameter, are always executed after the
		 *   dynamic sorters.
		 *   Supported since 1.39.0.
		 * @param vFilters The dynamic application filters to be used initially. Call {@link #filter} to replace them.
		 *   Static filters, as defined in the '$filter' binding parameter, are always combined with the
		 *   dynamic filters using a logical <code>AND</code>.
		 *   Supported since 1.39.0.
		 * @param mParameters Map of binding parameters which can be OData query options as specified in
		 *   "OData Version 4.0 Part 2: URL Conventions" or the binding-specific parameters "$$groupId"
		 *   and "$$updateGroupId".
		 *   Note: If parameters are provided for a relative binding path, the binding accesses data
		 *   with its own service requests instead of using its parent binding.
		 *   The following OData query options are allowed:
		 *   <ul>
		 *   <li> All "5.2 Custom Query Options" except for those with a name starting with "sap-"
		 *   <li> The $expand, $filter, $orderby and $select "5.1 System Query Options"
		 *   </ul>
		 *   All other query options lead to an error.
		 *   Query options specified for the binding overwrite model query options.
		 */
		 constructor(oModel:sap.ui.model.odata.v4.ODataModel, sPath:string, oContext?:sap.ui.model.odata.v4.Context, vSorters?:sap.ui.model.Sorter|sap.ui.model.Sorter[], vFilters?:sap.ui.model.Filter|sap.ui.model.Filter[], mParameters?:any);
		/**
		 * Creates a new subclass of class sap.ui.model.odata.v4.ODataListBinding with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.ListBinding.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.model.odata.v4.ODataListBinding.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
	}
	class ODataMetaModel extends sap.ui.model.MetaModel{
		/**
		 * Do <strong>NOT</strong> call this private constructor for a new <code>ODataMetaModel</code>,
		 * but rather use {@link sap.ui.model.odata.v4.ODataModel#getMetaModel getMetaModel} instead.
		 * @param oRequestor The meta data requestor
		 * @param sUrl The URL to the $metadata document of the service
		 */
		 constructor(oRequestor:sap.ui.model.odata.v4.lib._MetadataRequestor, sUrl:string);
		/**
		 * Creates a new subclass of class sap.ui.model.odata.v4.ODataMetaModel with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.MetaModel.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.model.odata.v4.ODataMetaModel.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
	}
	class ODataModel extends sap.ui.model.Model{
		/**
		 * Constructor for a new ODataModel.
		 * @param mParameters The parameters
		 */
		 constructor(mParameters:any);
	}
	class ODataPropertyBinding extends sap.ui.model.PropertyBinding{
		/**
		 * DO NOT CALL this private constructor for a new <code>ODataPropertyBinding</code>,
		 * but rather use {@link sap.ui.model.odata.v4.ODataModel#bindProperty bindProperty} instead!
		 * @param oModel The OData V4 model
		 * @param sPath The binding path in the model; must not be empty or end with a slash
		 * @param oContext The context which is required as base for a relative path
		 * @param mParameters Map of binding parameters which can be OData query options as specified in
		 *   "OData Version 4.0 Part 2: URL Conventions" or the binding-specific parameters "$$groupId"
		 *   and "$$updateGroupId".
		 *   Note: Binding parameters may only be provided for absolute binding paths as only those
		 *   lead to a data service request.
		 *   All "5.2 Custom Query Options" are allowed except for those with a name starting with
		 *   "sap-". All other query options lead to an error.
		 *   Query options specified for the binding overwrite model query options.
		 */
		 constructor(oModel:sap.ui.model.odata.v4.ODataModel, sPath:string, oContext?:sap.ui.model.odata.v4.Context, mParameters?:any);
		/**
		 * Sets the optional type and internal type for this binding; used for formatting and parsing.
		 * Fires a change event if the type has changed.
		 * @param oType The type for this binding
		 * @param sInternalType The internal type of the element property which owns this binding, for example "any",
		 *   "boolean", "float", "int", "string"; see {@link sap.ui.model.odata.type} for more
		 *   information
		 */
		 setType(oType:sap.ui.model.Type, sInternalType:string);
	}
}

declare namespace sap.ui.model.resource {
	class ResourceModel extends sap.ui.model.Model{
		/**
		 * Constructor for a new ResourceModel.
		 * @param oData parameters used to initialize the ResourceModel; at least either bundleUrl or bundleName must be set on this object; if both are set, bundleName wins
		 */
		 constructor(oData:any);
		/**
		 * Creates a new subclass of class sap.ui.model.resource.ResourceModel with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.Model.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.model.resource.ResourceModel.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Returns the value for the property with the given <code>sPropertyName</code>
		 * @param sPath the path to the property
		 * @return the value of the property
		 */
		 getProperty(sPath:string): string;
		/**
		 * Returns the resource bundle of this model
		 * @return loaded resource bundle or ECMA Script 6 Promise in asynchronous case
		 */
		 getResourceBundle(): jQuery.sap.util.ResourceBundle|any;
	}
}

declare namespace sap.ui.model.type {
	class Boolean extends sap.ui.model.SimpleType{
		/**
		 * Constructor for a Boolean type.
		 * @param oFormatOptions formatting options. Boolean doesn't support any specific format options
		 * @param oConstraints value constraints. Boolean doesn't support additional constraints
		 */
		 constructor(oFormatOptions?:any, oConstraints?:any);
		/**
		 * Creates a new subclass of class sap.ui.model.type.Boolean with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.model.type.Boolean.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
	}
	class Currency extends sap.ui.model.CompositeType{
		/**
		 * Constructor for a Currency type.
		 * @param oFormatOptions formatting options. Supports the same options as {@link sap.ui.core.format.NumberFormat.getCurrencyInstance NumberFormat.getCurrencyInstance}
		 * @param oConstraints value constraints.
		 */
		 constructor(oFormatOptions?:any, oConstraints?:any);
		/**
		 * Creates a new subclass of class sap.ui.model.type.Currency with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.CompositeType.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Format the given array containing amount and currency code to an output value of type string.
		 * Other internal types than 'string' are not supported by the Currency type.
		 * If an source format is has been defined for this type, the formatValue does also accept
		 * a string value as input, which will be parsed into an array using the source format.
		 * If aValues is not defined or null, null will be returned.
		 * @param vValue the array of values or string value to be formatted
		 * @param sInternalType the target type
		 * @return the formatted output value
		 */
		 formatValue(vValue:any[]|string, sInternalType:string): any;
		/**
		 * Returns a metadata object for class sap.ui.model.type.Currency.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Parse a string value to an array containing amount and currency. Parsing of other
		 * internal types than 'string' is not supported by the Currency type.
		 * In case a source format has been defined, after parsing the currency is formatted
		 * using the source format and a string value is returned instead.
		 * @param vValue the value to be parsed
		 * @param sInternalType the source type
		 * @param aCurrentValues the current values of all binding parts
		 * @return the parse result array
		 */
		 parseValue(vValue:any, sInternalType:string, aCurrentValues:any[]): any[]|string;
	}
	class Date extends sap.ui.model.SimpleType{
		/**
		 * Constructor for a Date type.
		 * @param oFormatOptions options used to create a DateFormat for formatting / parsing. Supports the same options as {@link sap.ui.core.format.DateFormat.getDateInstance DateFormat.getDateInstance}
		 * @param oConstraints value constraints.
		 */
		 constructor(oFormatOptions?:any, oConstraints?:any);
		/**
		 * Creates a new subclass of class sap.ui.model.type.Date with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.model.type.Date.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * 
		 */
		protected getOutputPattern();
	}
	class DateTime extends sap.ui.model.type.Date{
		/**
		 * Constructor for a DateTime type.
		 * @param oFormatOptions options used to create a DateFormat for formatting / parsing to/from external values and
		 *           optionally for a second DateFormat to convert between the data source format (Model) and the internally used JavaScript Date.format.
		 *           For both DateFormat objects, the same options are supported as for {@link sap.ui.core.format.DateFormat.getDateTimeInstance DateFormat.getDateTimeInstance}.
		 *           Note that this differs from the base type.
		 * @param oConstraints value constraints. Supports the same kind of constraints as its base type Date, but note the different format options (Date vs. DateTime)
		 */
		 constructor(oFormatOptions?:any, oConstraints?:any);
		/**
		 * Creates a new subclass of class sap.ui.model.type.DateTime with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.type.Date.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.model.type.DateTime.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
	}
	class FileSize extends sap.ui.model.SimpleType{
		/**
		 * Constructor for a FileSize type.
		 * @param oFormatOptions formatting options. Supports the same options as {@link sap.ui.core.format.FileSizeFormat.getInstance FileSizeFormat.getInstance}
		 * @param oConstraints value constraints.
		 */
		 constructor(oFormatOptions?:any, oConstraints?:any);
		/**
		 * Creates a new subclass of class sap.ui.model.type.FileSize with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.model.type.FileSize.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
	}
	class Float extends sap.ui.model.SimpleType{
		/**
		 * Constructor for a Float type.
		 * @param oFormatOptions formatting options. Supports the same options as {@link sap.ui.core.format.NumberFormat.getFloatInstance NumberFormat.getFloatInstance}
		 * @param oConstraints value constraints.
		 */
		 constructor(oFormatOptions?:any, oConstraints?:any);
		/**
		 * Creates a new subclass of class sap.ui.model.type.Float with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.model.type.Float.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
	}
	class Integer extends sap.ui.model.SimpleType{
		/**
		 * Constructor for a Integer type.
		 * @param oFormatOptions formatting options. Supports the same options as {@link sap.ui.core.format.NumberFormat.getIntegerInstance NumberFormat.getIntegerInstance}
		 * @param oConstraints value constraints.
		 */
		 constructor(oFormatOptions?:any, oConstraints?:any);
		/**
		 * Creates a new subclass of class sap.ui.model.type.Integer with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.model.type.Integer.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
	}
	class String extends sap.ui.model.SimpleType{
		/**
		 * Constructor for a String type.
		 * @param oFormatOptions formatting options. String doesn't support any formatting options
		 * @param oConstraints value constraints. All given constraints must be fulfilled by a value to be valid
		 */
		 constructor(oFormatOptions?:any, oConstraints?:any);
		/**
		 * Creates a new subclass of class sap.ui.model.type.String with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.model.type.String.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
	}
	class Time extends sap.ui.model.type.Date{
		/**
		 * Constructor for a Time type.
		 * @param oFormatOptions options used to create a DateFormat for formatting / parsing to/from external values and
		 *           optionally for a second DateFormat to convert between the data source format (Model) and the internally used JavaScript Date.format.
		 *           For both DateFormat objects, the same options are supported as for {@link sap.ui.core.format.DateFormat.getTimeInstance DateFormat.getTimeInstance}.
		 *           Note that this differs from the base type.
		 * @param oConstraints value constraints. Supports the same kind of constraints as its base type Date, but note the different format options (Date vs. Time)
		 */
		 constructor(oFormatOptions?:any, oConstraints?:any);
		/**
		 * Creates a new subclass of class sap.ui.model.type.Time with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.type.Date.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.model.type.Time.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
	}
}

declare namespace sap.ui.model.xml {
	class XMLModel extends sap.ui.model.ClientModel{
		/**
		 * Constructor for a new XMLModel.
		 * @param oData either the URL where to load the XML from or a XML
		 */
		 constructor(oData:any);
		/**
		 * Creates a new subclass of class sap.ui.model.xml.XMLModel with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.ClientModel.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.model.xml.XMLModel.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Returns the object for the given <code>path</code>
		 * @param sPath the path to the object
		 * @param oContext the context which will be used to retrieve the object
		 * @return the object
		 */
		 getObject(sPath:string, oContext?:any): any;
		/**
		 * Returns the value for the property with the given <code>sPropertyName</code>
		 * @param sPath the path to the property
		 * @param oContext the context which will be used to retrieve the property
		 * @return the value of the property
		 */
		 getProperty(sPath:string, oContext?:any): any;
		/**
		 * Serializes the current XML data of the model into a string.
		 * @return the XML document serialized as string
		 */
		 getXML();
		/**
		 * Load XML-encoded data from the server using a GET HTTP request and store the resulting XML data in the model.
		 * Note: Due to browser security restrictions, most "Ajax" requests are subject to the same origin policy,
		 * the request can not successfully retrieve data from a different domain, subdomain, or protocol.
		 * @param sURL A string containing the URL to which the request is sent.
		 * @param mHeaders An object of additional header key/value pairs to send along with the request
		 * @param oParameters A map or string that is sent to the server with the request.
		 * @param bAsync if the request should be asynchron or not. Default is true.
		 * @param sType of request. Default is 'GET'
		 * @param bCache force no caching if false. Default is false
		 */
		 loadData(sURL:string, mHeaders:any, oParameters?:any|string, bAsync?:boolean, sType?:string, bCache?:string);
		/**
		 * Sets the provided XML encoded data object to the model
		 * @param oData the data to set to the model
		 */
		 setData(oData:any);
		/**
		 * Sets an XML namespace to use in the binding path
		 * @param sNameSpace the namespace URI
		 * @param sPrefix the prefix for the namespace (optional)
		 */
		 setNameSpace(sNameSpace:string, sPrefix?:string);
		/**
		 * Sets a new value for the given property <code>sPropertyName</code> in the model.
		 * If the model value changed all interested parties are informed.
		 * @param sPath path of the property to set
		 * @param oValue value to set the property to
		 * @param oContext the context which will be used to set the property
		 * @param bAsyncUpdate whether to update other bindings dependent on this property asynchronously
		 * @return true if the value was set correctly and false if errors occurred like the entry was not found.
		 */
		 setProperty(sPath:string, oValue:any, oContext?:any, bAsyncUpdate?:boolean): boolean;
		/**
		 * Sets the specified XML formatted string text to the model
		 * @param sXMLText the XML data as string
		 */
		 setXML(sXMLText:string);
	}
}

declare namespace sap.ui.suite {
	class TaskCircle extends sap.ui.core.Control{
		/**
		 * Constructor for a new TaskCircle.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given
		 * @param mSettings initial settings for the new control
		 */
		 constructor(sId?:string, mSettings?:any);
		/**
		 * Adds some ariaDescribedBy into the association <code>ariaDescribedBy</code>.
		 * @param vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 addAriaDescribedBy(vAriaDescribedBy:sap.ui.core.ID|sap.ui.core.Control): sap.ui.suite.TaskCircle;
		/**
		 * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 addAriaLabelledBy(vAriaLabelledBy:sap.ui.core.ID|sap.ui.core.Control): sap.ui.suite.TaskCircle;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>press</code> event of this <code>sap.ui.suite.TaskCircle</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.ui.suite.TaskCircle</code> itself.
		 * 
		 * Event is fired when the user clicks the control.
		 * @param fnFunction The function to be called when the event occurs
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.suite.TaskCircle</code> itself
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 attachPress(fnFunction:any, oData?:any, oListener?:any): sap.ui.suite.TaskCircle;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>press</code> event of this <code>sap.ui.suite.TaskCircle</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 detachPress(fnFunction:any, oListener:any): sap.ui.suite.TaskCircle;
		/**
		 * Creates a new subclass of class sap.ui.suite.TaskCircle with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Fires event <code>press</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		protected firePress(mArguments?:any): sap.ui.suite.TaskCircle;
		/**
		 * Puts the focus to the control.
		 */
		 focus();
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaDescribedBy</code>.
		 * @return 
		 */
		 getAriaDescribedBy(): sap.ui.core.ID[];
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>.
		 * @return 
		 */
		 getAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Gets current value of property <code>color</code>.
		 * 
		 * Color of the circle. The default color is red.
		 * 
		 * Default value is <code>Gray</code>.
		 * @return Value of property <code>color</code>
		 */
		 getColor(): sap.ui.suite.TaskCircleColor;
		/**
		 * Gets current value of property <code>maxValue</code>.
		 * 
		 * Upper limit of the displayed values. Default is 100.
		 * 
		 * Default value is <code>100</code>.
		 * @return Value of property <code>maxValue</code>
		 */
		 getMaxValue(): number;
		/**
		 * Returns a metadata object for class sap.ui.suite.TaskCircle.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Gets current value of property <code>minValue</code>.
		 * 
		 * Lower limit of the displayed values. Default is 0.
		 * 
		 * Default value is <code>0</code>.
		 * @return Value of property <code>minValue</code>
		 */
		 getMinValue(): number;
		/**
		 * Gets current value of property <code>value</code>.
		 * 
		 * Current value of the task circle to be displayed. In dependency of the parameters maxValue and minValue it controls the size of the circle.
		 * 
		 * Default value is <code>0</code>.
		 * @return Value of property <code>value</code>
		 */
		 getValue(): number;
		/**
		 * Removes all the controls in the association named <code>ariaDescribedBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		 removeAllAriaDescribedBy(): sap.ui.core.ID[];
		/**
		 * Removes all the controls in the association named <code>ariaLabelledBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		 removeAllAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Removes an ariaDescribedBy from the association named <code>ariaDescribedBy</code>.
		 * @param vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
		 * @return The removed ariaDescribedBy or <code>null</code>
		 */
		 removeAriaDescribedBy(vAriaDescribedBy:number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
		 * @return The removed ariaLabelledBy or <code>null</code>
		 */
		 removeAriaLabelledBy(vAriaLabelledBy:number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Sets a new value for property <code>color</code>.
		 * 
		 * Color of the circle. The default color is red.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Gray</code>.
		 * @param sColor New value for property <code>color</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setColor(sColor:sap.ui.suite.TaskCircleColor): sap.ui.suite.TaskCircle;
		/**
		 * Sets a new value for property <code>maxValue</code>.
		 * 
		 * Upper limit of the displayed values. Default is 100.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>100</code>.
		 * @param iMaxValue New value for property <code>maxValue</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setMaxValue(iMaxValue:number): sap.ui.suite.TaskCircle;
		/**
		 * Sets a new value for property <code>minValue</code>.
		 * 
		 * Lower limit of the displayed values. Default is 0.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>0</code>.
		 * @param iMinValue New value for property <code>minValue</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setMinValue(iMinValue:number): sap.ui.suite.TaskCircle;
		/**
		 * Sets a new value for property <code>value</code>.
		 * 
		 * Current value of the task circle to be displayed. In dependency of the parameters maxValue and minValue it controls the size of the circle.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>0</code>.
		 * @param iValue New value for property <code>value</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setValue(iValue:number): sap.ui.suite.TaskCircle;
	}
	class VerticalProgressIndicator extends sap.ui.core.Control{
		/**
		 * Constructor for a new VerticalProgressIndicator.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given
		 * @param mSettings initial settings for the new control
		 */
		 constructor(sId?:string, mSettings?:any);
		/**
		 * Adds some ariaDescribedBy into the association <code>ariaDescribedBy</code>.
		 * @param vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 addAriaDescribedBy(vAriaDescribedBy:sap.ui.core.ID|sap.ui.core.Control): sap.ui.suite.VerticalProgressIndicator;
		/**
		 * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 addAriaLabelledBy(vAriaLabelledBy:sap.ui.core.ID|sap.ui.core.Control): sap.ui.suite.VerticalProgressIndicator;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>press</code> event of this <code>sap.ui.suite.VerticalProgressIndicator</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.ui.suite.VerticalProgressIndicator</code> itself.
		 * 
		 * Event is fired when the user clicks the control.
		 * @param fnFunction The function to be called when the event occurs
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.suite.VerticalProgressIndicator</code> itself
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 attachPress(fnFunction:any, oData?:any, oListener?:any): sap.ui.suite.VerticalProgressIndicator;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>press</code> event of this <code>sap.ui.suite.VerticalProgressIndicator</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 detachPress(fnFunction:any, oListener:any): sap.ui.suite.VerticalProgressIndicator;
		/**
		 * Creates a new subclass of class sap.ui.suite.VerticalProgressIndicator with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Fires event <code>press</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		protected firePress(mArguments?:any): sap.ui.suite.VerticalProgressIndicator;
		/**
		 * Puts the focus to the control.
		 */
		 focus();
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaDescribedBy</code>.
		 * @return 
		 */
		 getAriaDescribedBy(): sap.ui.core.ID[];
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>.
		 * @return 
		 */
		 getAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Returns a metadata object for class sap.ui.suite.VerticalProgressIndicator.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Gets current value of property <code>percentage</code>.
		 * 
		 * The numerical value between 0 and 100 which determines the height of the vertical bar. Values higher than 100 will be displayed as 100%, values lower than zero will be displayed as 0%.
		 * @return Value of property <code>percentage</code>
		 */
		 getPercentage(): number;
		/**
		 * Removes all the controls in the association named <code>ariaDescribedBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		 removeAllAriaDescribedBy(): sap.ui.core.ID[];
		/**
		 * Removes all the controls in the association named <code>ariaLabelledBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		 removeAllAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Removes an ariaDescribedBy from the association named <code>ariaDescribedBy</code>.
		 * @param vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
		 * @return The removed ariaDescribedBy or <code>null</code>
		 */
		 removeAriaDescribedBy(vAriaDescribedBy:number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
		 * @return The removed ariaLabelledBy or <code>null</code>
		 */
		 removeAriaLabelledBy(vAriaLabelledBy:number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Property setter for the Percentage, which determines the height of the vertical bar.
		 * Values higher than 100 will be displayed as 100%, values lower than zero will be displayed as 0%.
		 * A new rendering is not necessary, only the bar will be moved
		 * @param iPercentage 
		 * @return <code>this</code> to allow method chaining
		 */
		 setPercentage(iPercentage:number): sap.ui.suite.VerticalProgressIndicator;
	}
}

declare namespace sap.ui.table {
	class AnalyticalColumn extends sap.ui.table.Column{
		/**
		 * Constructor for a new AnalyticalColumn.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given
		 * @param mSettings initial settings for the new control
		 */
		 constructor(sId?:string, mSettings?:any);
		/**
		 * Creates a new subclass of class sap.ui.table.AnalyticalColumn with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.table.Column.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Gets current value of property <code>groupHeaderFormatter</code>.
		 * 
		 * If the column is grouped, this formatter is used to format the value in the group header
		 * @return Value of property <code>groupHeaderFormatter</code>
		 */
		 getGroupHeaderFormatter(): any;
		/**
		 * Gets current value of property <code>inResult</code>.
		 * 
		 * Specifies that the dimension referred to by the column shall be included in the granularity of the data result. It allows a finer distinction between a visible/grouped/(included)inResult column.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>inResult</code>
		 */
		 getInResult(): boolean;
		/**
		 * Gets current value of property <code>leadingProperty</code>.
		 * 
		 * Defines the primary model property which is used inside the Column. In case of the analytical extension this means the property which is grouped by for dimensions or the property which is summed for measures.
		 * @return Value of property <code>leadingProperty</code>
		 */
		 getLeadingProperty(): string;
		/**
		 * Returns a metadata object for class sap.ui.table.AnalyticalColumn.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Gets current value of property <code>showIfGrouped</code>.
		 * 
		 * Specifies whether the column is displayed within the table even if it is grouped or not. A grouped column has the same value for every rows within the group.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>showIfGrouped</code>
		 */
		 getShowIfGrouped(): boolean;
		/**
		 * Gets current value of property <code>summed</code>.
		 * 
		 * If defined a sum for this column is calculated
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>summed</code>
		 */
		 getSummed(): boolean;
		/**
		 * Sets a new value for property <code>groupHeaderFormatter</code>.
		 * 
		 * If the column is grouped, this formatter is used to format the value in the group header
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param oGroupHeaderFormatter New value for property <code>groupHeaderFormatter</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setGroupHeaderFormatter(oGroupHeaderFormatter:any): sap.ui.table.AnalyticalColumn;
		/**
		 * Sets a new value for property <code>inResult</code>.
		 * 
		 * Specifies that the dimension referred to by the column shall be included in the granularity of the data result. It allows a finer distinction between a visible/grouped/(included)inResult column.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bInResult New value for property <code>inResult</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setInResult(bInResult:boolean): sap.ui.table.AnalyticalColumn;
		/**
		 * Sets a new value for property <code>leadingProperty</code>.
		 * 
		 * Defines the primary model property which is used inside the Column. In case of the analytical extension this means the property which is grouped by for dimensions or the property which is summed for measures.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sLeadingProperty New value for property <code>leadingProperty</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setLeadingProperty(sLeadingProperty:string): sap.ui.table.AnalyticalColumn;
		/**
		 * Sets a new value for property <code>showIfGrouped</code>.
		 * 
		 * Specifies whether the column is displayed within the table even if it is grouped or not. A grouped column has the same value for every rows within the group.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bShowIfGrouped New value for property <code>showIfGrouped</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setShowIfGrouped(bShowIfGrouped:boolean): sap.ui.table.AnalyticalColumn;
		/**
		 * Sets a new value for property <code>summed</code>.
		 * 
		 * If defined a sum for this column is calculated
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bSummed New value for property <code>summed</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setSummed(bSummed:boolean): sap.ui.table.AnalyticalColumn;
	}
	class AnalyticalColumnMenu extends sap.ui.table.ColumnMenu{
		/**
		 * Constructor for a new AnalyticalColumnMenu.
		 * @param sId id for the new control, generated automatically if no id is given
		 * @param mSettings initial settings for the new control
		 */
		 constructor(sId?:string, mSettings?:any);
		/**
		 * Creates a new subclass of class sap.ui.table.AnalyticalColumnMenu with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.table.ColumnMenu.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.table.AnalyticalColumnMenu.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
	}
	class AnalyticalTable extends sap.ui.table.Table{
		/**
		 * Constructor for a new AnalyticalTable.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given
		 * @param mSettings initial settings for the new control
		 */
		 constructor(sId?:string, mSettings?:any);
		/**
		 * Marks a range of tree nodes as selected, starting with iFromIndex going to iToIndex.
		 * The TreeNodes are referenced via their absolute row index.
		 * Please be aware, that the absolute row index only applies to the the tree which is visualized by the TreeTable.
		 * Invisible nodes (collapsed child nodes) will not be regarded.
		 * 
		 * Please also take notice of the fact, that "addSelectionInterval" does not change any other selection.
		 * To override the current selection, please use "setSelctionInterval" or for a single entry use "setSelectedIndex".
		 * @param iFromIndex The starting index of the range which will be selected.
		 * @param iToIndex The starting index of the range which will be selected.
		 * @return a reference on the TreeTable control, can be used for chaining
		 */
		 addSelectionInterval(iFromIndex:number, iToIndex:number): sap.ui.table.TreeTable;
		/**
		 * Clears the complete selection (all tree table rows/nodes will lose their selection)
		 * @return a reference on the TreeTable control, can be used for chaining
		 */
		 clearSelection(): sap.ui.table.TreeTable;
		/**
		 * Collapses all nodes (and lower if collapseRecursive is activated)
		 * @return a reference on the TreeTable control, can be used for chaining
		 */
		 collapseAll(): sap.ui.table.TreeTable;
		/**
		 * Creates a new subclass of class sap.ui.table.AnalyticalTable with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.table.Table.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Gets current value of property <code>autoExpandMode</code>.
		 * 
		 * The kind of auto expansion algorithm, e.g. optimised filter conditions, per level requests, ...
		 * sap.ui.table.TreeAutoExpandMode
		 * 
		 * Default value is <code>Bundled</code>.
		 * @return Value of property <code>autoExpandMode</code>
		 */
		 getAutoExpandMode(): string;
		/**
		 * Gets current value of property <code>collapseRecursive</code>.
		 * 
		 * Setting collapseRecursive to true means, that when collapsing a node all subsequent child nodes will also be collapsed.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>collapseRecursive</code>
		 */
		 getCollapseRecursive(): boolean;
		/**
		 * Gets current value of property <code>columnVisibilityMenuSorter</code>.
		 * 
		 * Functions which is used to sort the column visibility menu entries e.g.: function(ColumnA, ColumnB) { return 0 = equals, <0 lower, >0 greater }; Other values than functions will be ignored.
		 * @return Value of property <code>columnVisibilityMenuSorter</code>
		 */
		 getColumnVisibilityMenuSorter(): any;
		/**
		 * Returns the context of a row by its index.
		 * @param iIndex Index of the row to return the context from.
		 * @return 
		 */
		 getContextByIndex(iIndex:number): any;
		/**
		 * Returns a metadata object for class sap.ui.table.AnalyticalTable.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Gets current value of property <code>numberOfExpandedLevels</code>.
		 * 
		 * Number of levels, which should be opened initially (on first load of data).
		 * 
		 * Default value is <code>0</code>.
		 * @return Value of property <code>numberOfExpandedLevels</code>
		 */
		 getNumberOfExpandedLevels(): number;
		/**
		 * Retrieves the lead selection index. The lead selection index is, among other things, used to determine the
		 * start/end of a selection range, when using Shift-Click to select multiple entries at once.
		 * @return an array containing all selected indices (ascending ordered integers)
		 */
		 getSelectedIndex(): number[];
		/**
		 * Returns an array containing the row indices of all selected tree nodes (ordered ascending).
		 * 
		 * Please be aware of the following:
		 * Due to performance/network traffic reasons, the getSelectedIndices function returns only all indices
		 * of actually selected rows/tree nodes. Unknown rows/nodes (as in "not yet loaded" to the client), will not be
		 * returned.
		 * @return an array containing all selected indices
		 */
		 getSelectedIndices(): number[];
		/**
		 * Gets current value of property <code>sumOnTop</code>.
		 * 
		 * Specifies if the total values should be displayed in the group headers or on bottom of the row. Does not affact the total sum.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>sumOnTop</code>
		 */
		 getSumOnTop(): boolean;
		/**
		 * Returns the total size of the data entries.
		 * @return 
		 */
		 getTotalSize(): number;
		/**
		 * Checks if the row at the given index is selected.
		 * @param iRowIndex The row index for which the selection state should be retrieved
		 * @return true if the index is selected, false otherwise
		 */
		 isIndexSelected(iRowIndex:number): boolean;
		/**
		 * All rows/tree nodes inside the range (including boundaries) will be deselected.
		 * Tree nodes are referenced with theit absolute row index inside the tree-
		 * Please be aware, that the absolute row index only applies to the the tree which is visualized by the TreeTable.
		 * Invisible nodes (collapsed child nodes) will not be regarded.
		 * @param iFromIndex The starting index of the range which will be deselected.
		 * @param iToIndex The starting index of the range which will be deselected.
		 * @return a reference on the TreeTable control, can be used for chaining
		 */
		 removeSelectionInterval(iFromIndex:number, iToIndex:number): sap.ui.table.TreeTable;
		/**
		 * This function is used by some composite controls to force updating the AnalyticalInfo
		 * @param bSuppressRefresh binding shall not refresh data
		 * @param bForceChange forces the binding to fire a change event
		 */
		protected resumeUpdateAnalyticalInfo(bSuppressRefresh:boolean, bForceChange:boolean);
		/**
		 * Selects all available nodes/rows.
		 * 
		 * Explanation of the SelectAll function and what to expect from its behavior:
		 * All rows/tree nodes locally stored on the client are selected.
		 * In addition all subsequent rows/tree nodes, which will be paged into view are also immediatly selected.
		 * However, due to obvious performance/network traffic reasons, the SelectAll function will NOT retrieve any data from the backend.
		 * @return a reference on the TreeTable control, can be used for chaining
		 */
		 selectAll(): sap.ui.table.TreeTable;
		/**
		 * Sets a new value for property <code>autoExpandMode</code>.
		 * 
		 * The kind of auto expansion algorithm, e.g. optimised filter conditions, per level requests, ...
		 * sap.ui.table.TreeAutoExpandMode
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Bundled</code>.
		 * @param sAutoExpandMode New value for property <code>autoExpandMode</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setAutoExpandMode(sAutoExpandMode:string): sap.ui.table.AnalyticalTable;
		/**
		 * Sets a new value for property <code>columnVisibilityMenuSorter</code>.
		 * 
		 * Functions which is used to sort the column visibility menu entries e.g.: function(ColumnA, ColumnB) { return 0 = equals, <0 lower, >0 greater }; Other values than functions will be ignored.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param oColumnVisibilityMenuSorter New value for property <code>columnVisibilityMenuSorter</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setColumnVisibilityMenuSorter(oColumnVisibilityMenuSorter:any): sap.ui.table.AnalyticalTable;
		/**
		 * Sets a new value for property <code>numberOfExpandedLevels</code>.
		 * 
		 * Number of levels, which should be opened initially (on first load of data).
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>0</code>.
		 * @param iNumberOfExpandedLevels New value for property <code>numberOfExpandedLevels</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setNumberOfExpandedLevels(iNumberOfExpandedLevels:number): sap.ui.table.AnalyticalTable;
		/**
		 * Overriden from Table.js base class.
		 * In a TreeTable you can only select indices, which correspond to the currently visualized tree.
		 * Invisible tree nodes (e.g. collapsed child nodes) can not be selected via Index, because they do not
		 * correspond to a TreeTable row.
		 * @param iRowIndex The row index which will be selected (if existing)
		 * @return a reference on the TreeTable control, can be used for chaining
		 */
		 setSelectedIndex(iRowIndex:number): sap.ui.table.TreeTable;
		/**
		 * Sets the selection behavior.
		 * Since the AnalyticalTable relies on the RowSelector for rendering the group headers the SelectionBehavior "RowOnly" is
		 * not supported and must not be used.
		 * @param sBehavior the selection behavior, see sap.ui.table.SelectionBehavior
		 * @return this for chaining
		 */
		 setSelectionBehavior(sBehavior:string): sap.ui.table.Table;
		/**
		 * Sets the selection of the TreeTable to the given range (including boundaries).
		 * Beware: The previous selection will be lost/overriden. If this is not wanted, please use "addSelectionInterval" and
		 * "removeSelectionIntervall".
		 * @param iFromIndex the start index of the selection range
		 * @param iToIndex the end index of the selection range
		 * @return a reference on the TreeTable control, can be used for chaining
		 */
		 setSelectionInterval(iFromIndex:number, iToIndex:number): sap.ui.table.TreeTable;
		/**
		 * Sets the selection mode, the current selection is lost.
		 * Since the AnalyticalTable relies on the RowSelector for rendering the group headers the SelectionMode "None" is
		 * not supported and must not be used.
		 * @param sSelectionMode the selection mode, see sap.ui.table.SelectionMode
		 * @return a reference on the table for chaining
		 */
		 setSelectionMode(sSelectionMode:string): sap.ui.table.Table;
		/**
		 * Sets a new value for property <code>sumOnTop</code>.
		 * 
		 * Specifies if the total values should be displayed in the group headers or on bottom of the row. Does not affact the total sum.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bSumOnTop New value for property <code>sumOnTop</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setSumOnTop(bSumOnTop:boolean): sap.ui.table.AnalyticalTable;
		/**
		 * This function is used by some composite controls to avoid updating the AnalyticalInfo when several column are added to the table.
		 * In order to finally update the AnalyticalInfo and request data, resumeUpdateAnalyticalInfo must be called.
		 */
		protected suspendUpdateAnalyticalInfo();
	}
	class Column extends sap.ui.core.Element{
		/**
		 * Constructor for a new Column.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given
		 * @param mSettings Initial settings for the new control
		 */
		 constructor(sId?:string, mSettings?:any);
		/**
		 * Destroys the label in the aggregation <code>label</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 destroyLabel(): sap.ui.table.Column;
		/**
		 * Destroys the menu in the aggregation <code>menu</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 destroyMenu(): sap.ui.table.Column;
		/**
		 * Destroys the template in the aggregation <code>template</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 destroyTemplate(): sap.ui.table.Column;
		/**
		 * Creates a new subclass of class sap.ui.table.Column with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Gets current value of property <code>defaultFilterOperator</code>.
		 * 
		 * If this property is set, the default filter operator of the column is overridden.
		 * By default <code>Contains</code> is used for string and <code>EQ</code> for other types. A valid <code>sap.ui.model.FilterOperator</code> needs to be passed.
		 * @return Value of property <code>defaultFilterOperator</code>
		 */
		 getDefaultFilterOperator(): string;
		/**
		 * Gets current value of property <code>filtered</code>.
		 * 
		 * Indicates if the column is filtered. This property only controls if a filter indicator is displayed in the
		 * column header - it does not trigger the filter function. The column has to be filtered by calling <code>Column.sort()</code>
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>filtered</code>
		 */
		 getFiltered(): boolean;
		/**
		 * Gets current value of property <code>filterOperator</code>.
		 * 
		 * Filter operator to use when filtering this column.
		 * @return Value of property <code>filterOperator</code>
		 */
		 getFilterOperator(): string;
		/**
		 * Gets current value of property <code>filterProperty</code>.
		 * 
		 * Specifies the binding property on which the column shall be filtered.
		 * Since the column template may have composite bindings, it's not possible to figure out on which binding
		 * property the filter shall be applied. Therefore the binding property for filtering must be specified.
		 * For example, if the first name and last name are displayed in the same column, only one of the two can be defined as
		 * <code>filterProperty</code>.
		 * 
		 * A column menu entry for filtering can only be generated if the <code>filterProperty</code> is set. The
		 * default menu entry is a text input field.
		 * @return Value of property <code>filterProperty</code>
		 */
		 getFilterProperty(): string;
		/**
		 * Gets current value of property <code>filterValue</code>.
		 * 
		 * Specifies the value of the filter as string (will be converted into the proper data type). It is possible
		 * to provide a filterOperator as string, as shown here:
		 * <pre>
		 * &gt; 50
		 * &lt; 100
		 * &gt;= 150
		 * &lt;= 200
		 * = 250
		 * != 300
		 * something    ends with
		 * something*    starts with
		 * something*   contains
		 * some..thing   between
		 * 50..100       between
		 * </pre>
		 * @return Value of property <code>filterValue</code>
		 */
		 getFilterValue(): string;
		/**
		 * Gets current value of property <code>flexible</code>.
		 * 
		 * If the table is wider than the sum of widths of the visible columns, the columns will be
		 * resized proportionally to their widths that were set originally. If set to false, the column will be displayed in the
		 * original width. If all columns are set to not be flexible, an extra "dummy" column will be
		 * created at the end of the table.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>flexible</code>
		 */
		 getFlexible(): boolean;
		/**
		 * Gets current value of property <code>grouped</code>.
		 * 
		 * Indicates if the column is grouped.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>grouped</code>
		 */
		 getGrouped(): boolean;
		/**
		 * Gets current value of property <code>hAlign</code>.
		 * 
		 * Horizontal alignment of the column content. Controls with a text align do not inherit
		 * the horizontal alignment. You have to set the text align directly on the template.
		 * 
		 * Default value is <code>Begin</code>.
		 * @return Value of property <code>hAlign</code>
		 */
		 getHAlign(): sap.ui.core.HorizontalAlign;
		/**
		 * Gets current value of property <code>headerSpan</code>.
		 * 
		 * If this property is set, a span is applied for the header. When moving columns, all columns
		 * which are part of the header will be moved. The <code>headerSpan</code> can be either an integer or an array of
		 * integers (if you use the multi header feature of the table). If you only specify an integer, this span is
		 * applied for all header rows, with multiple integers you can specify a separate span for each header row.
		 * 
		 * Default value is <code>1</code>.
		 * @return Value of property <code>headerSpan</code>
		 */
		 getHeaderSpan(): any;
		/**
		 * Gets content of aggregation <code>label</code>.
		 * 
		 * Label of the column which is displayed in the column header. This aggregation is for the standard behavior,
		 * where you only want to display one single row header. If a string is supplied, a default label control will be
		 * created. Which control this is depends on the loaded libraries.
		 * @return 
		 */
		 getLabel(): sap.ui.core.Control|string;
		/**
		 * Gets content of aggregation <code>menu</code>.
		 * 
		 * The menu used by the column. By default the {@link sap.ui.table.ColumnMenu} is used.
		 * 
		 * <b>Note:</b> Applications must not use or change the default <code>sap.ui.table.ColumnMenu</code> of
		 * a column in any way or create own instances of <code>sap.ui.table.ColumnMenu</code>.
		 * To add a custom menu to a column, use the aggregation <code>menu</code> with a new instance of
		 * <code>sap.ui.unified.Menu</code>.
		 * @return 
		 */
		 getMenu(): sap.ui.unified.Menu;
		/**
		 * Returns a metadata object for class sap.ui.table.Column.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Gets current value of property <code>resizable</code>.
		 * 
		 * If set to true, the column can be resized either using the resize-handle (by mouse) or using
		 * the keyboard (SHIFT + Left/Right Arrow keys)
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>resizable</code>
		 */
		 getResizable(): boolean;
		/**
		 * Gets current value of property <code>sorted</code>.
		 * 
		 * Indicates if the column is sorted. This property only controls if a sort indicator is displayed in the
		 * column header - it does not trigger the sort function. The column has to be sorted by calling <code>Column.sort()</code>
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>sorted</code>
		 */
		 getSorted(): boolean;
		/**
		 * Gets current value of property <code>sortOrder</code>.
		 * 
		 * This property indicates the sort direction (Ascending or Descending). The corresponding icon will be
		 * rendered if the property <code>sorted</code> is <code>true</code>
		 * 
		 * Default value is <code>Ascending</code>.
		 * @return Value of property <code>sortOrder</code>
		 */
		 getSortOrder(): sap.ui.table.SortOrder;
		/**
		 * Gets current value of property <code>sortProperty</code>.
		 * 
		 * Specifies the binding property on which the column will sort.
		 * Since the column template may have composite bindings, it's not possible to figure out on which binding
		 * property the sort shall be applied. Therefore the binding property for sorting must be specified.
		 * For example, if the first name and last name are displayed in the same column, only one of the two can be defined as
		 * <code>sortProperty</code>.
		 * 
		 * A column menu entry for sorting can only be generated if the <code>sortProperty</code> is set.
		 * @return Value of property <code>sortProperty</code>
		 */
		 getSortProperty(): string;
		/**
		 * Gets content of aggregation <code>template</code>.
		 * 
		 * Template (cell renderer) of this column. A template is decoupled from the column, which means after
		 * changing the templates' properties or aggregations an explicit invalidation of the column or table is
		 * required. The default depends on the loaded libraries.
		 * @return 
		 */
		 getTemplate(): sap.ui.core.Control;
		/**
		 * Gets current value of property <code>visible</code>.
		 * 
		 * Invisible controls are not rendered.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>visible</code>
		 */
		 getVisible(): boolean;
		/**
		 * Gets current value of property <code>width</code>.
		 * 
		 * Width of the column. Works only with px/em/rem values. Em are handled like rem values.
		 * @return Value of property <code>width</code>
		 */
		 getWidth(): sap.ui.core.CSSSize;
		/**
		 * Sets a new value for property <code>defaultFilterOperator</code>.
		 * 
		 * If this property is set, the default filter operator of the column is overridden.
		 * By default <code>Contains</code> is used for string and <code>EQ</code> for other types. A valid <code>sap.ui.model.FilterOperator</code> needs to be passed.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sDefaultFilterOperator New value for property <code>defaultFilterOperator</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setDefaultFilterOperator(sDefaultFilterOperator:string): sap.ui.table.Column;
		/**
		 * Sets a new value for property <code>filtered</code>.
		 * 
		 * Indicates if the column is filtered. This property only controls if a filter indicator is displayed in the
		 * column header - it does not trigger the filter function. The column has to be filtered by calling <code>Column.sort()</code>
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bFiltered New value for property <code>filtered</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setFiltered(bFiltered:boolean): sap.ui.table.Column;
		/**
		 * Sets a new value for property <code>filterOperator</code>.
		 * 
		 * Filter operator to use when filtering this column.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sFilterOperator New value for property <code>filterOperator</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setFilterOperator(sFilterOperator:string): sap.ui.table.Column;
		/**
		 * Sets a new value for property <code>filterProperty</code>.
		 * 
		 * Specifies the binding property on which the column shall be filtered.
		 * Since the column template may have composite bindings, it's not possible to figure out on which binding
		 * property the filter shall be applied. Therefore the binding property for filtering must be specified.
		 * For example, if the first name and last name are displayed in the same column, only one of the two can be defined as
		 * <code>filterProperty</code>.
		 * 
		 * A column menu entry for filtering can only be generated if the <code>filterProperty</code> is set. The
		 * default menu entry is a text input field.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sFilterProperty New value for property <code>filterProperty</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setFilterProperty(sFilterProperty:string): sap.ui.table.Column;
		/**
		 * Sets a new value for property <code>filterValue</code>.
		 * 
		 * Specifies the value of the filter as string (will be converted into the proper data type). It is possible
		 * to provide a filterOperator as string, as shown here:
		 * <pre>
		 * &gt; 50
		 * &lt; 100
		 * &gt;= 150
		 * &lt;= 200
		 * = 250
		 * != 300
		 * something    ends with
		 * something*    starts with
		 * something*   contains
		 * some..thing   between
		 * 50..100       between
		 * </pre>
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sFilterValue New value for property <code>filterValue</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setFilterValue(sFilterValue:string): sap.ui.table.Column;
		/**
		 * Sets a new value for property <code>flexible</code>.
		 * 
		 * If the table is wider than the sum of widths of the visible columns, the columns will be
		 * resized proportionally to their widths that were set originally. If set to false, the column will be displayed in the
		 * original width. If all columns are set to not be flexible, an extra "dummy" column will be
		 * created at the end of the table.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bFlexible New value for property <code>flexible</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setFlexible(bFlexible:boolean): sap.ui.table.Column;
		/**
		 * Sets a new value for property <code>grouped</code>.
		 * 
		 * Indicates if the column is grouped.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bGrouped New value for property <code>grouped</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setGrouped(bGrouped:boolean): sap.ui.table.Column;
		/**
		 * Sets a new value for property <code>hAlign</code>.
		 * 
		 * Horizontal alignment of the column content. Controls with a text align do not inherit
		 * the horizontal alignment. You have to set the text align directly on the template.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Begin</code>.
		 * @param sHAlign New value for property <code>hAlign</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setHAlign(sHAlign:sap.ui.core.HorizontalAlign): sap.ui.table.Column;
		/**
		 * Sets a new value for property <code>headerSpan</code>.
		 * 
		 * If this property is set, a span is applied for the header. When moving columns, all columns
		 * which are part of the header will be moved. The <code>headerSpan</code> can be either an integer or an array of
		 * integers (if you use the multi header feature of the table). If you only specify an integer, this span is
		 * applied for all header rows, with multiple integers you can specify a separate span for each header row.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>1</code>.
		 * @param oHeaderSpan New value for property <code>headerSpan</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setHeaderSpan(oHeaderSpan:any): sap.ui.table.Column;
		/**
		 * Sets the aggregated <code>label</code>.
		 * @param vLabel The label to set
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setLabel(vLabel:sap.ui.core.Control|string): sap.ui.table.Column;
		/**
		 * Sets the aggregated <code>menu</code>.
		 * @param oMenu The menu to set
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setMenu(oMenu:sap.ui.unified.Menu): sap.ui.table.Column;
		/**
		 * Sets a new value for property <code>resizable</code>.
		 * 
		 * If set to true, the column can be resized either using the resize-handle (by mouse) or using
		 * the keyboard (SHIFT + Left/Right Arrow keys)
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bResizable New value for property <code>resizable</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setResizable(bResizable:boolean): sap.ui.table.Column;
		/**
		 * Sets a new value for property <code>sorted</code>.
		 * 
		 * Indicates if the column is sorted. This property only controls if a sort indicator is displayed in the
		 * column header - it does not trigger the sort function. The column has to be sorted by calling <code>Column.sort()</code>
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bSorted New value for property <code>sorted</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setSorted(bSorted:boolean): sap.ui.table.Column;
		/**
		 * Sets a new value for property <code>sortOrder</code>.
		 * 
		 * This property indicates the sort direction (Ascending or Descending). The corresponding icon will be
		 * rendered if the property <code>sorted</code> is <code>true</code>
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Ascending</code>.
		 * @param sSortOrder New value for property <code>sortOrder</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setSortOrder(sSortOrder:sap.ui.table.SortOrder): sap.ui.table.Column;
		/**
		 * Sets a new value for property <code>sortProperty</code>.
		 * 
		 * Specifies the binding property on which the column will sort.
		 * Since the column template may have composite bindings, it's not possible to figure out on which binding
		 * property the sort shall be applied. Therefore the binding property for sorting must be specified.
		 * For example, if the first name and last name are displayed in the same column, only one of the two can be defined as
		 * <code>sortProperty</code>.
		 * 
		 * A column menu entry for sorting can only be generated if the <code>sortProperty</code> is set.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sSortProperty New value for property <code>sortProperty</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setSortProperty(sSortProperty:string): sap.ui.table.Column;
		/**
		 * Sets the aggregated <code>template</code>.
		 * @param oTemplate The template to set
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setTemplate(oTemplate:sap.ui.core.Control): sap.ui.table.Column;
		/**
		 * Sets a new value for property <code>visible</code>.
		 * 
		 * Invisible controls are not rendered.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bVisible New value for property <code>visible</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setVisible(bVisible:boolean): sap.ui.table.Column;
		/**
		 * Sets a new value for property <code>width</code>.
		 * 
		 * Width of the column. Works only with px/em/rem values. Em are handled like rem values.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sWidth New value for property <code>width</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setWidth(sWidth:sap.ui.core.CSSSize): sap.ui.table.Column;
		/**
		 * Returns whether the column should be rendered or not.
		 * @return true, if the column should be rendered
		 */
		protected shouldRender(): boolean;
	}
	class ColumnMenu extends sap.ui.unified.Menu{
		/**
		 * Constructor for a new ColumnMenu.
		 * 
		 * <b>Note:</b> Applications must not use or change the default <code>sap.ui.table.ColumnMenu</code> of
		 * a column in any way or create own instances of <code>sap.ui.table.ColumnMenu</code>.
		 * To add a custom menu to a column, use the aggregation <code>menu</code> with a new instance of
		 * <code>sap.ui.unified.Menu</code>.
		 * @param sId id for the new control, generated automatically if no id is given
		 * @param mSettings initial settings for the new control
		 */
		 constructor(sId?:string, mSettings?:any);
		/**
		 * Creates a new subclass of class sap.ui.table.ColumnMenu with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.unified.Menu.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.table.ColumnMenu.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
	}
	/**
	 * Details about the group event to distinguish between different actions associated with grouping
	 */
	type GroupEventType = 
	/**
	 * Details about the group event to distinguish between different actions associated with grouping
	 */
	"group" |
	/**
	 * Details about the group event to distinguish between different actions associated with grouping
	 */
	"hideGroupedColumn" |
	/**
	 * Details about the group event to distinguish between different actions associated with grouping
	 */
	"moveDown" |
	/**
	 * Details about the group event to distinguish between different actions associated with grouping
	 */
	"moveUp" |
	/**
	 * Details about the group event to distinguish between different actions associated with grouping
	 */
	"showGroupedColumn" |
	/**
	 * Details about the group event to distinguish between different actions associated with grouping
	 */
	"ungroup" |
	/**
	 * Details about the group event to distinguish between different actions associated with grouping
	 */
	"ungroupAll";
	/**
	 * Navigation mode of the table
	 */
	type NavigationMode = 
	/**
	 * Navigation mode of the table
	 */
	"Paginator" |
	/**
	 * Navigation mode of the table
	 */
	"Scrollbar";
	class Row extends sap.ui.core.Element{
		/**
		 * Constructor for a new Row.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given
		 * @param mSettings initial settings for the new control
		 */
		 constructor(sId?:string, mSettings?:any);
		/**
		 * Adds some cell to the aggregation <code>cells</code>.
		 * @param oCell the cell to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 addCell(oCell:sap.ui.core.Control): sap.ui.table.Row;
		/**
		 * Destroys all the cells in the aggregation <code>cells</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 destroyCells(): sap.ui.table.Row;
		/**
		 * Creates a new subclass of class sap.ui.table.Row with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Gets content of aggregation <code>cells</code>.
		 * 
		 * The controls for the cells.
		 * @return 
		 */
		 getCells(): sap.ui.core.Control[];
		/**
		 * Returns the index of the row in the table or -1 if not added to a table. This
		 * function considers the scroll position of the table and also takes fixed rows and
		 * fixed bottom rows into account.
		 * @return index of the row (considers scroll position and fixed rows)
		 */
		 getIndex(): number;
		/**
		 * Returns a metadata object for class sap.ui.table.Row.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>cells</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oCell The cell whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		 indexOfCell(oCell:sap.ui.core.Control): number;
		/**
		 * Inserts a cell into the aggregation <code>cells</code>.
		 * @param oCell the cell to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the cell should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the cell is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the cell is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 insertCell(oCell:sap.ui.core.Control, iIndex:number): sap.ui.table.Row;
		/**
		 * Removes all the controls from the aggregation <code>cells</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		 removeAllCells(): sap.ui.core.Control[];
		/**
		 * Removes a cell from the aggregation <code>cells</code>.
		 * @param vCell The cell to remove or its index or id
		 * @return The removed cell or <code>null</code>
		 */
		 removeCell(vCell:number|string|sap.ui.core.Control): sap.ui.core.Control;
	}
	/**
	 * Selection behavior of the table
	 */
	type SelectionBehavior = 
	/**
	 * Selection behavior of the table
	 */
	"Row" |
	/**
	 * Selection behavior of the table
	 */
	"RowOnly" |
	/**
	 * Selection behavior of the table
	 */
	"RowSelector";
	/**
	 * Selection mode of the table
	 */
	type SelectionMode = 
	/**
	 * Selection mode of the table
	 */
	"Multi" |
	/**
	 * Selection mode of the table
	 */
	"MultiToggle" |
	/**
	 * Selection mode of the table
	 */
	"None" |
	/**
	 * Selection mode of the table
	 */
	"Single";
	/**
	 * Shared DOM Reference IDs of the table.
	 * 
	 * Contains IDs of shared DOM references, which should be accessible to inheriting controls via getDomRef() function.
	 */
	type SharedDomRef = 
	/**
	 * Shared DOM Reference IDs of the table.
	 * 
	 * Contains IDs of shared DOM references, which should be accessible to inheriting controls via getDomRef() function.
	 */
	"HorizontalScrollBar" |
	/**
	 * Shared DOM Reference IDs of the table.
	 * 
	 * Contains IDs of shared DOM references, which should be accessible to inheriting controls via getDomRef() function.
	 */
	"VerticalScrollBar";
	/**
	 * Sort order of a column
	 */
	type SortOrder = 
	/**
	 * Sort order of a column
	 */
	"Ascending" |
	/**
	 * Sort order of a column
	 */
	"Descending";
	class Table extends sap.ui.core.Control{
		/**
		 * Constructor for a new Table.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given
		 * @param mSettings initial settings for the new control
		 */
		 constructor(sId?:string, mSettings?:any);
		/**
		 * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 addAriaLabelledBy(vAriaLabelledBy:sap.ui.core.ID|sap.ui.core.Control): sap.ui.table.Table;
		/**
		 * Adds some column to the aggregation <code>columns</code>.
		 * @param oColumn the column to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 addColumn(oColumn:sap.ui.table.Column): sap.ui.table.Table;
		/**
		 * Adds some extension to the aggregation <code>extension</code>.
		 * @param oExtension the extension to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 addExtension(oExtension:sap.ui.core.Control): sap.ui.table.Table;
		/**
		 * Adds some row to the aggregation <code>rows</code>.
		 * @param oRow the row to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 addRow(oRow:sap.ui.table.Row): sap.ui.table.Table;
		/**
		 * Adds the given selection interval to the selection. In case of single selection the "indexTo" value will be used for as selected index.
		 * @param iIndexFrom Index from which .
		 * @param iIndexTo Indices of the items that shall additionally be selected.
		 * @return 
		 */
		 addSelectionInterval(iIndexFrom:number, iIndexTo:number): sap.ui.table.Table;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>columnMove</code> event of this <code>sap.ui.table.Table</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.ui.table.Table</code> itself.
		 * 
		 * fired when a table column is moved.
		 * @param fnFunction The function to be called when the event occurs
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table</code> itself
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 attachColumnMove(fnFunction:any, oData?:any, oListener?:any): sap.ui.table.Table;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>columnResize</code> event of this <code>sap.ui.table.Table</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.ui.table.Table</code> itself.
		 * 
		 * fired when a table column is resized.
		 * @param fnFunction The function to be called when the event occurs
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table</code> itself
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 attachColumnResize(fnFunction:any, oData?:any, oListener?:any): sap.ui.table.Table;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>columnSelect</code> event of this <code>sap.ui.table.Table</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.ui.table.Table</code> itself.
		 * 
		 * fired when a column of the table has been selected
		 * @param fnFunction The function to be called when the event occurs
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table</code> itself
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 attachColumnSelect(fnFunction:any, oData?:any, oListener?:any): sap.ui.table.Table;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>columnVisibility</code> event of this <code>sap.ui.table.Table</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.ui.table.Table</code> itself.
		 * 
		 * fired when the visibility of a table column is changed.
		 * @param fnFunction The function to be called when the event occurs
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table</code> itself
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 attachColumnVisibility(fnFunction:any, oData?:any, oListener?:any): sap.ui.table.Table;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>filter</code> event of this <code>sap.ui.table.Table</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.ui.table.Table</code> itself.
		 * 
		 * fired when the table is filtered.
		 * @param fnFunction The function to be called when the event occurs
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table</code> itself
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 attachFilter(fnFunction:any, oData?:any, oListener?:any): sap.ui.table.Table;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>group</code> event of this <code>sap.ui.table.Table</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.ui.table.Table</code> itself.
		 * 
		 * fired when the table is grouped (experimental!).
		 * @param fnFunction The function to be called when the event occurs
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table</code> itself
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 attachGroup(fnFunction:any, oData?:any, oListener?:any): sap.ui.table.Table;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>rowSelectionChange</code> event of this <code>sap.ui.table.Table</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.ui.table.Table</code> itself.
		 * 
		 * fired when the row selection of the table has been changed (the event parameters can be used to determine
		 * selection changes - to find out the selected rows you should better use the table selection API)
		 * @param fnFunction The function to be called when the event occurs
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table</code> itself
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 attachRowSelectionChange(fnFunction:any, oData?:any, oListener?:any): sap.ui.table.Table;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>sort</code> event of this <code>sap.ui.table.Table</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.ui.table.Table</code> itself.
		 * 
		 * fired when the table is sorted.
		 * @param fnFunction The function to be called when the event occurs
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table</code> itself
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 attachSort(fnFunction:any, oData?:any, oListener?:any): sap.ui.table.Table;
		/**
		 * Triggers automatic resizing of a column to the widest content.
		 * @param iColIndex The index of the column in the list of visible columns.
		 */
		 autoResizeColumn(iColIndex:number);
		/**
		 * Binds aggregation <code>columns</code> to model data.
		 * 
		 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
		 * detailed description of the possible properties of <code>oBindingInfo</code>.
		 * @param oBindingInfo The binding information
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 bindColumns(oBindingInfo:any): sap.ui.table.Table;
		/**
		 * Binds aggregation <code>rows</code> to model data.
		 * 
		 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
		 * detailed description of the possible properties of <code>oBindingInfo</code>.
		 * @param oBindingInfo The binding information
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 bindRows(oBindingInfo:any): sap.ui.table.Table;
		/**
		 * Removes complete selection.
		 * @return 
		 */
		 clearSelection(): sap.ui.table.Table;
		/**
		 * Destroys all the columns in the aggregation <code>columns</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 destroyColumns(): sap.ui.table.Table;
		/**
		 * Destroys all the extension in the aggregation <code>extension</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 destroyExtension(): sap.ui.table.Table;
		/**
		 * Destroys the footer in the aggregation <code>footer</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 destroyFooter(): sap.ui.table.Table;
		/**
		 * Destroys the noData in the aggregation <code>noData</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 destroyNoData(): sap.ui.table.Table;
		/**
		 * Destroys all the rows in the aggregation <code>rows</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 destroyRows(): sap.ui.table.Table;
		/**
		 * Destroys the title in the aggregation <code>title</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 destroyTitle(): sap.ui.table.Table;
		/**
		 * Destroys the toolbar in the aggregation <code>toolbar</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 destroyToolbar(): sap.ui.table.Table;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>columnMove</code> event of this <code>sap.ui.table.Table</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 detachColumnMove(fnFunction:any, oListener:any): sap.ui.table.Table;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>columnResize</code> event of this <code>sap.ui.table.Table</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 detachColumnResize(fnFunction:any, oListener:any): sap.ui.table.Table;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>columnSelect</code> event of this <code>sap.ui.table.Table</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 detachColumnSelect(fnFunction:any, oListener:any): sap.ui.table.Table;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>columnVisibility</code> event of this <code>sap.ui.table.Table</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 detachColumnVisibility(fnFunction:any, oListener:any): sap.ui.table.Table;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>filter</code> event of this <code>sap.ui.table.Table</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 detachFilter(fnFunction:any, oListener:any): sap.ui.table.Table;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>group</code> event of this <code>sap.ui.table.Table</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 detachGroup(fnFunction:any, oListener:any): sap.ui.table.Table;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>rowSelectionChange</code> event of this <code>sap.ui.table.Table</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 detachRowSelectionChange(fnFunction:any, oListener:any): sap.ui.table.Table;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>sort</code> event of this <code>sap.ui.table.Table</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 detachSort(fnFunction:any, oListener:any): sap.ui.table.Table;
		/**
		 * Creates a new {@link sap.ui.core.util.Export} object and fills row/column information from the table if not provided. For the cell content, the column's "sortProperty" will be used (experimental!)
		 * 
		 * <p><b>Please note: The return value was changed from jQuery Promises to standard ES6 Promises.
		 * jQuery specific Promise methods ('done', 'fail', 'always', 'pipe' and 'state') are still available but should not be used.
		 * Please use only the standard methods 'then' and 'catch'!</b></p>
		 * @param mSettings settings for the new Export, see {@link sap.ui.core.util.Export} <code>constructor</code>
		 * @return Promise object
		 */
		 exportData(mSettings?:any): any;
		/**
		 * Creates a new subclass of class sap.ui.table.Table with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * filter the given column by the given value
		 * @param oColumn column to be filtered
		 * @param sValue filter value as string (will be converted)
		 * @return 
		 */
		 filter(oColumn:sap.ui.table.Column, sValue:string): sap.ui.table.Table;
		/**
		 * Fires event <code>columnMove</code> to attached listeners.
		 * 
		 * Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>column</code> of type <code>sap.ui.table.Column</code>moved column.</li>
		 * <li><code>newPos</code> of type <code>int</code>new position of the column.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event
		 * @return Whether or not to prevent the default action
		 */
		protected fireColumnMove(mArguments?:any): boolean;
		/**
		 * Fires event <code>columnResize</code> to attached listeners.
		 * 
		 * Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>column</code> of type <code>sap.ui.table.Column</code>resized column.</li>
		 * <li><code>width</code> of type <code>sap.ui.core.CSSSize</code>new width of the table column as CSS Size definition.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event
		 * @return Whether or not to prevent the default action
		 */
		protected fireColumnResize(mArguments?:any): boolean;
		/**
		 * Fires event <code>columnSelect</code> to attached listeners.
		 * 
		 * Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>column</code> of type <code>sap.ui.table.Column</code>reference to the selected column</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event
		 * @return Whether or not to prevent the default action
		 */
		protected fireColumnSelect(mArguments?:any): boolean;
		/**
		 * Fires event <code>columnVisibility</code> to attached listeners.
		 * 
		 * Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>column</code> of type <code>sap.ui.table.Column</code>affected column.</li>
		 * <li><code>visible</code> of type <code>boolean</code>new value of the visible property.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event
		 * @return Whether or not to prevent the default action
		 */
		protected fireColumnVisibility(mArguments?:any): boolean;
		/**
		 * Fires event <code>filter</code> to attached listeners.
		 * 
		 * Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>column</code> of type <code>sap.ui.table.Column</code>filtered column.</li>
		 * <li><code>value</code> of type <code>string</code>filter value.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event
		 * @return Whether or not to prevent the default action
		 */
		protected fireFilter(mArguments?:any): boolean;
		/**
		 * Fires event <code>group</code> to attached listeners.
		 * 
		 * Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>column</code> of type <code>sap.ui.table.Column</code>grouped column.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event
		 * @return Whether or not to prevent the default action
		 */
		protected fireGroup(mArguments?:any): boolean;
		/**
		 * Fires event <code>rowSelectionChange</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>rowIndex</code> of type <code>int</code>row index which has been clicked so that the selection has been changed (either selected or deselected)</li>
		 * <li><code>rowContext</code> of type <code>object</code>binding context of the row which has been clicked so that selection has been changed</li>
		 * <li><code>rowIndices</code> of type <code>int[]</code>array of row indices which selection has been changed (either selected or deselected)</li>
		 * <li><code>selectAll</code> of type <code>boolean</code>indicator if "select all" function is used to select rows</li>
		 * <li><code>userInteraction</code> of type <code>boolean</code>indicates that the event was fired due to an explicit user interaction like clicking the row header
		 * or using the keyboard (SPACE or ENTER) to select a row or a range of rows.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		protected fireRowSelectionChange(mArguments?:any): sap.ui.table.Table;
		/**
		 * Fires event <code>sort</code> to attached listeners.
		 * 
		 * Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>column</code> of type <code>sap.ui.table.Column</code>sorted column.</li>
		 * <li><code>sortOrder</code> of type <code>sap.ui.table.SortOrder</code>Sort Order</li>
		 * <li><code>columnAdded</code> of type <code>boolean</code>If column was added to sorter this is true. If new sort is started this is set to false</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event
		 * @return Whether or not to prevent the default action
		 */
		protected fireSort(mArguments?:any): boolean;
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>.
		 * @return 
		 */
		 getAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Gets current value of property <code>columnHeaderHeight</code>.
		 * 
		 * Height of the column header of the Table in pixel.
		 * @return Value of property <code>columnHeaderHeight</code>
		 */
		 getColumnHeaderHeight(): number;
		/**
		 * Gets current value of property <code>columnHeaderVisible</code>.
		 * 
		 * Flag whether the column header is visible or not.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>columnHeaderVisible</code>
		 */
		 getColumnHeaderVisible(): boolean;
		/**
		 * Gets content of aggregation <code>columns</code>.
		 * 
		 * Columns of the Table
		 * @return 
		 */
		 getColumns(): sap.ui.table.Column[];
		/**
		 * Returns the context of a row by its index. Please note that for server-based models like OData,
		 * the supplied index might not have been loaded yet. If the context is not available at the client,
		 * the binding will trigger a backend request and request this single context. Although this API
		 * looks synchronous it may not return a context but load it and fire a change event on the binding.
		 * 
		 * For server-based models you should consider to only make this API call when the index is within
		 * the currently visible scroll area.
		 * @param iIndex Index of the row to return the context from.
		 * @return 
		 */
		 getContextByIndex(iIndex:number): any;
		/**
		 * Gets current value of property <code>editable</code>.
		 * 
		 * Flag whether the controls of the Table are editable or not (currently this only controls the background color in certain themes!)
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>editable</code>
		 */
		 getEditable(): boolean;
		/**
		 * Gets current value of property <code>enableColumnReordering</code>.
		 * 
		 * Flag to enable or disable column reordering
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>enableColumnReordering</code>
		 */
		 getEnableColumnReordering(): boolean;
		/**
		 * Gets current value of property <code>enableGrouping</code>.
		 * 
		 * Flag to enable or disable column grouping. (experimental!)
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>enableGrouping</code>
		 */
		 getEnableGrouping(): boolean;
		/**
		 * Gets content of aggregation <code>extension</code>.
		 * 
		 * Extension section of the Table (if not set it will be hidden)
		 * @return 
		 */
		 getExtension(): sap.ui.core.Control[];
		/**
		 * Gets current value of property <code>firstVisibleRow</code>.
		 * 
		 * First visible row.
		 * 
		 * Default value is <code>0</code>.
		 * @return Value of property <code>firstVisibleRow</code>
		 */
		 getFirstVisibleRow(): number;
		/**
		 * Gets current value of property <code>fixedColumnCount</code>.
		 * 
		 * Number of columns that are fix on the left. When you use a horizontal scroll bar, only
		 * the columns which are not fixed, will scroll. Fixed columns need a defined width for the feature to work.
		 * Please note that the aggregated width of all fixed columns must not exceed the table width since there
		 * will be no scrollbar for fixed columns.
		 * 
		 * Default value is <code>0</code>.
		 * @return Value of property <code>fixedColumnCount</code>
		 */
		 getFixedColumnCount(): number;
		/**
		 * Gets current value of property <code>fixedRowCount</code>.
		 * 
		 * Number of rows that are fix on the top. When you use a vertical scroll bar, only the rows which are not fixed, will scroll.
		 * 
		 * Default value is <code>0</code>.
		 * @return Value of property <code>fixedRowCount</code>
		 */
		 getFixedRowCount(): number;
		/**
		 * Gets content of aggregation <code>footer</code>.
		 * 
		 * Control or text of footer section of the Table (if not set it will be hidden)
		 * @return 
		 */
		 getFooter(): sap.ui.core.Control|string;
		/**
		 * ID of the element which is the current target of the association <code>groupBy</code>, or <code>null</code>.
		 * @return 
		 */
		 getGroupBy(): sap.ui.core.ID;
		/**
		 * Returns a metadata object for class sap.ui.table.Table.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Gets current value of property <code>minAutoRowCount</code>.
		 * 
		 * This property is used to set the minimum count of visible rows when the property visibleRowCountMode is set to Auto or Interactive.
		 * For any other visibleRowCountMode, it is ignored.
		 * 
		 * Default value is <code>5</code>.
		 * @return Value of property <code>minAutoRowCount</code>
		 */
		 getMinAutoRowCount(): number;
		/**
		 * Gets content of aggregation <code>noData</code>.
		 * 
		 * The value for the noData aggregation can be either a string value or a control instance.
		 * The control is shown, in case there is no data for the Table available. In case of a string
		 * value this will simply replace the no data text.
		 * @return 
		 */
		 getNoData(): sap.ui.core.Control|string;
		/**
		 * Gets current value of property <code>rowHeight</code>.
		 * 
		 * Height of a row of the Table in pixel.
		 * @return Value of property <code>rowHeight</code>
		 */
		 getRowHeight(): number;
		/**
		 * Gets content of aggregation <code>rows</code>.
		 * 
		 * Rows of the Table
		 * @return 
		 */
		 getRows(): sap.ui.table.Row[];
		/**
		 * Gets current value of property <code>selectedIndex</code>.
		 * 
		 * Zero-based index of selected item. Index value for no selection is -1.
		 * When multi-selection is enabled and multiple items are selected, the method returns
		 * the lead selected item. Sets the zero-based index of the currently selected item. This method
		 * removes any previous selections. When the given index is invalid, the call is ignored.
		 * 
		 * Default value is <code>-1</code>.
		 * @return Value of property <code>selectedIndex</code>
		 */
		 getSelectedIndex(): number;
		/**
		 * Zero-based indices of selected items, wrapped in an array. An empty array means "no selection".
		 * @return int[]
		 */
		 getSelectedIndices();
		/**
		 * Gets current value of property <code>selectionBehavior</code>.
		 * 
		 * Selection behavior of the Table. This property defines whether the row selector is displayed and whether the row, the row selector or both
		 * can be clicked to select a row.
		 * 
		 * Default value is <code>RowSelector</code>.
		 * @return Value of property <code>selectionBehavior</code>
		 */
		 getSelectionBehavior(): sap.ui.table.SelectionBehavior;
		/**
		 * Gets current value of property <code>selectionMode</code>.
		 * 
		 * Selection mode of the Table. This property controls whether single or multiple rows can be selected and
		 * how the selection can be extended. It may also influence the visual appearance.
		 * 
		 * Default value is <code>MultiToggle</code>.
		 * @return Value of property <code>selectionMode</code>
		 */
		 getSelectionMode(): sap.ui.table.SelectionMode;
		/**
		 * Gets current value of property <code>showColumnVisibilityMenu</code>.
		 * 
		 * Flag to show or hide the column visibility menu. This menu will get displayed in each
		 * generated column header menu. It allows to show or hide columns
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>showColumnVisibilityMenu</code>
		 */
		 getShowColumnVisibilityMenu(): boolean;
		/**
		 * Gets current value of property <code>showNoData</code>.
		 * 
		 * Flag whether to show the no data overlay or not once the table is empty. If set to false
		 * the table will just show a grid of empty cells
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>showNoData</code>
		 */
		 getShowNoData(): boolean;
		/**
		 * gets sorted columns
		 * @return Array of sorted columns
		 */
		 getSortedColumns();
		/**
		 * Gets current value of property <code>threshold</code>.
		 * 
		 * The <code>threshold</code> defines how many additional (not yet visible records) shall be pre-fetched to enable smooth
		 * scrolling. The threshold is always added to the <code>visibleRowCount</code>. If the <code>visibleRowCount</code> is 10 and the
		 * <code>threshold</code> is 100, there will be 110 records fetched with the initial load.
		 * If the <code>threshold</code> is lower than the <code>visibleRowCount</code>, the <code>visibleRowCount</code> will be used as
		 * the <code>threshold</code>. If the value is 0 then the thresholding is disabled.
		 * 
		 * Default value is <code>100</code>.
		 * @return Value of property <code>threshold</code>
		 */
		 getThreshold(): number;
		/**
		 * Gets content of aggregation <code>title</code>.
		 * 
		 * Control or text of title section of the Table (if not set it will be hidden)
		 * @return 
		 */
		 getTitle(): sap.ui.core.Control|string;
		/**
		 * Gets content of aggregation <code>toolbar</code>.
		 * 
		 * Toolbar of the Table (if not set it will be hidden)
		 * @return 
		 */
		 getToolbar(): sap.ui.core.Toolbar;
		/**
		 * Gets current value of property <code>visibleRowCount</code>.
		 * 
		 * Number of visible rows of the table.
		 * 
		 * Default value is <code>10</code>.
		 * @return Value of property <code>visibleRowCount</code>
		 */
		 getVisibleRowCount(): number;
		/**
		 * Gets current value of property <code>width</code>.
		 * 
		 * Width of the Table.
		 * 
		 * Default value is <code>auto</code>.
		 * @return Value of property <code>width</code>
		 */
		 getWidth(): sap.ui.core.CSSSize;
		/**
		 * Checks for the provided <code>sap.ui.table.Column</code> in the aggregation <code>columns</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oColumn The column whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		 indexOfColumn(oColumn:sap.ui.table.Column): number;
		/**
		 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>extension</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oExtension The extension whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		 indexOfExtension(oExtension:sap.ui.core.Control): number;
		/**
		 * Checks for the provided <code>sap.ui.table.Row</code> in the aggregation <code>rows</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oRow The row whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		 indexOfRow(oRow:sap.ui.table.Row): number;
		/**
		 * Inserts a column into the aggregation <code>columns</code>.
		 * @param oColumn the column to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the column should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the column is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the column is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 insertColumn(oColumn:sap.ui.table.Column, iIndex:number): sap.ui.table.Table;
		/**
		 * Inserts a extension into the aggregation <code>extension</code>.
		 * @param oExtension the extension to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the extension should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the extension is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the extension is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 insertExtension(oExtension:sap.ui.core.Control, iIndex:number): sap.ui.table.Table;
		/**
		 * Inserts a row into the aggregation <code>rows</code>.
		 * @param oRow the row to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the row should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the row is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the row is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 insertRow(oRow:sap.ui.table.Row, iIndex:number): sap.ui.table.Table;
		/**
		 * Returns whether the given index is selected.
		 * @param iIndex Index which is checked for selection state.
		 * @return 
		 */
		 isIndexSelected(iIndex:number): boolean;
		/**
		 * Removes all the controls in the association named <code>ariaLabelledBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		 removeAllAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Removes all the controls from the aggregation <code>columns</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		 removeAllColumns(): sap.ui.table.Column[];
		/**
		 * Removes all the controls from the aggregation <code>extension</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		 removeAllExtension(): sap.ui.core.Control[];
		/**
		 * Removes all the controls from the aggregation <code>rows</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		 removeAllRows(): sap.ui.table.Row[];
		/**
		 * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
		 * @return The removed ariaLabelledBy or <code>null</code>
		 */
		 removeAriaLabelledBy(vAriaLabelledBy:number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Removes a column from the aggregation <code>columns</code>.
		 * @param vColumn The column to remove or its index or id
		 * @return The removed column or <code>null</code>
		 */
		 removeColumn(vColumn:number|string|sap.ui.table.Column): sap.ui.table.Column;
		/**
		 * Removes a extension from the aggregation <code>extension</code>.
		 * @param vExtension The extension to remove or its index or id
		 * @return The removed extension or <code>null</code>
		 */
		 removeExtension(vExtension:number|string|sap.ui.core.Control): sap.ui.core.Control;
		/**
		 * Removes a row from the aggregation <code>rows</code>.
		 * @param vRow The row to remove or its index or id
		 * @return The removed row or <code>null</code>
		 */
		 removeRow(vRow:number|string|sap.ui.table.Row): sap.ui.table.Row;
		/**
		 * Removes the given selection interval from the selection. In case of single selection this call removeSelectedIndex with the "indexTo" value.
		 * @param iIndexFrom Index from which .
		 * @param iIndexTo Indices of the items that shall additionally be selected.
		 * @return 
		 */
		 removeSelectionInterval(iIndexFrom:number, iIndexTo:number): sap.ui.table.Table;
		/**
		 * Add all rows to the selection.
		 * Please note that for server based models like OData the indices which are considered to be selected might not
		 * be available at the client yet. Calling getContextByIndex might not return a result but trigger a roundtrip
		 * to request this single entity.
		 * @return sap.ui.table.Table
		 */
		 selectAll();
		/**
		 * Sets a new value for property <code>columnHeaderHeight</code>.
		 * 
		 * Height of the column header of the Table in pixel.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param iColumnHeaderHeight New value for property <code>columnHeaderHeight</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setColumnHeaderHeight(iColumnHeaderHeight:number): sap.ui.table.Table;
		/**
		 * Sets a new value for property <code>columnHeaderVisible</code>.
		 * 
		 * Flag whether the column header is visible or not.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bColumnHeaderVisible New value for property <code>columnHeaderVisible</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setColumnHeaderVisible(bColumnHeaderVisible:boolean): sap.ui.table.Table;
		/**
		 * Sets a new value for property <code>editable</code>.
		 * 
		 * Flag whether the controls of the Table are editable or not (currently this only controls the background color in certain themes!)
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bEditable New value for property <code>editable</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setEditable(bEditable:boolean): sap.ui.table.Table;
		/**
		 * Sets a new value for property <code>enableColumnReordering</code>.
		 * 
		 * Flag to enable or disable column reordering
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bEnableColumnReordering New value for property <code>enableColumnReordering</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setEnableColumnReordering(bEnableColumnReordering:boolean): sap.ui.table.Table;
		/**
		 * Sets a new value for property <code>firstVisibleRow</code>.
		 * 
		 * First visible row.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>0</code>.
		 * @param iFirstVisibleRow New value for property <code>firstVisibleRow</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setFirstVisibleRow(iFirstVisibleRow:number): sap.ui.table.Table;
		/**
		 * Sets a new value for property <code>fixedColumnCount</code>.
		 * 
		 * Number of columns that are fix on the left. When you use a horizontal scroll bar, only
		 * the columns which are not fixed, will scroll. Fixed columns need a defined width for the feature to work.
		 * Please note that the aggregated width of all fixed columns must not exceed the table width since there
		 * will be no scrollbar for fixed columns.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>0</code>.
		 * @param iFixedColumnCount New value for property <code>fixedColumnCount</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setFixedColumnCount(iFixedColumnCount:number): sap.ui.table.Table;
		/**
		 * Sets a new value for property <code>fixedRowCount</code>.
		 * 
		 * Number of rows that are fix on the top. When you use a vertical scroll bar, only the rows which are not fixed, will scroll.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>0</code>.
		 * @param iFixedRowCount New value for property <code>fixedRowCount</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setFixedRowCount(iFixedRowCount:number): sap.ui.table.Table;
		/**
		 * Sets the aggregated <code>footer</code>.
		 * @param vFooter The footer to set
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setFooter(vFooter:sap.ui.core.Control|string): sap.ui.table.Table;
		/**
		 * Sets the associated <code>groupBy</code>.
		 * @param oGroupBy ID of an element which becomes the new target of this groupBy association; alternatively, an element instance may be given
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setGroupBy(oGroupBy:sap.ui.core.ID|sap.ui.table.Column): sap.ui.table.Table;
		/**
		 * Sets a new value for property <code>minAutoRowCount</code>.
		 * 
		 * This property is used to set the minimum count of visible rows when the property visibleRowCountMode is set to Auto or Interactive.
		 * For any other visibleRowCountMode, it is ignored.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>5</code>.
		 * @param iMinAutoRowCount New value for property <code>minAutoRowCount</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setMinAutoRowCount(iMinAutoRowCount:number): sap.ui.table.Table;
		/**
		 * Sets the aggregated <code>noData</code>.
		 * @param vNoData The noData to set
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setNoData(vNoData:sap.ui.core.Control|string): sap.ui.table.Table;
		/**
		 * Sets a new value for property <code>rowHeight</code>.
		 * 
		 * Height of a row of the Table in pixel.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param iRowHeight New value for property <code>rowHeight</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setRowHeight(iRowHeight:number): sap.ui.table.Table;
		/**
		 * Sets a new value for property <code>selectedIndex</code>.
		 * 
		 * Zero-based index of selected item. Index value for no selection is -1.
		 * When multi-selection is enabled and multiple items are selected, the method returns
		 * the lead selected item. Sets the zero-based index of the currently selected item. This method
		 * removes any previous selections. When the given index is invalid, the call is ignored.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>-1</code>.
		 * @param iSelectedIndex New value for property <code>selectedIndex</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setSelectedIndex(iSelectedIndex:number): sap.ui.table.Table;
		/**
		 * Sets a new value for property <code>selectionBehavior</code>.
		 * 
		 * Selection behavior of the Table. This property defines whether the row selector is displayed and whether the row, the row selector or both
		 * can be clicked to select a row.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>RowSelector</code>.
		 * @param sSelectionBehavior New value for property <code>selectionBehavior</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setSelectionBehavior(sSelectionBehavior:sap.ui.table.SelectionBehavior): sap.ui.table.Table;
		/**
		 * Sets the given selection interval as selection. In case of single selection the "indexTo" value will be used for as selected index.
		 * @param iIndexFrom Index from which .
		 * @param iIndexTo Indices of the items that shall additionally be selected.
		 * @return 
		 */
		 setSelectionInterval(iIndexFrom:number, iIndexTo:number): sap.ui.table.Table;
		/**
		 * Sets the selection mode. The current selection is lost.
		 * @param sSelectionMode the selection mode, see sap.ui.table.SelectionMode
		 * @return a reference on the table for chaining
		 */
		 setSelectionMode(sSelectionMode:string);
		/**
		 * Sets a new value for property <code>showColumnVisibilityMenu</code>.
		 * 
		 * Flag to show or hide the column visibility menu. This menu will get displayed in each
		 * generated column header menu. It allows to show or hide columns
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bShowColumnVisibilityMenu New value for property <code>showColumnVisibilityMenu</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setShowColumnVisibilityMenu(bShowColumnVisibilityMenu:boolean): sap.ui.table.Table;
		/**
		 * Sets a new value for property <code>showNoData</code>.
		 * 
		 * Flag whether to show the no data overlay or not once the table is empty. If set to false
		 * the table will just show a grid of empty cells
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bShowNoData New value for property <code>showNoData</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setShowNoData(bShowNoData:boolean): sap.ui.table.Table;
		/**
		 * Sets the threshold value, which will be added to all data requests in
		 * case the Table is bound against an OData service.
		 */
		 setThreshold();
		/**
		 * Sets the aggregated <code>title</code>.
		 * @param vTitle The title to set
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setTitle(vTitle:sap.ui.core.Control|string): sap.ui.table.Table;
		/**
		 * Sets the aggregated <code>toolbar</code>.
		 * @param oToolbar The toolbar to set
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setToolbar(oToolbar:sap.ui.core.Toolbar): sap.ui.table.Table;
		/**
		 * Sets a new tooltip for this object. The tooltip can either be a simple string
		 * (which in most cases will be rendered as the <code>title</code> attribute of this
		 * Element) or an instance of {@link sap.ui.core.TooltipBase}.
		 * 
		 * If a new tooltip is set, any previously set tooltip is deactivated.
		 * 
		 * Please note that tooltips are not rendered for the table. The tooltip property will be set
		 * but it won't effect the DOM.
		 * @param vTooltip 
		 * @return This-reference for chaining
		 */
		 setTooltip(vTooltip:string|sap.ui.core.TooltipBase): sap.ui.table.Table;
		/**
		 * Sets a new value for property <code>visibleRowCount</code>.
		 * 
		 * Number of visible rows of the table.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>10</code>.
		 * @param iVisibleRowCount New value for property <code>visibleRowCount</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setVisibleRowCount(iVisibleRowCount:number): sap.ui.table.Table;
		/**
		 * Sets a new value for property <code>width</code>.
		 * 
		 * Width of the Table.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>auto</code>.
		 * @param sWidth New value for property <code>width</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setWidth(sWidth:sap.ui.core.CSSSize): sap.ui.table.Table;
		/**
		 * sorts the given column ascending or descending
		 * @param oColumn column to be sorted
		 * @param oSortOrder sort order of the column (if undefined the default will be ascending)
		 * @param bAdd Set to true to add the new sort criterion to the existing sort criteria
		 * @return 
		 */
		 sort(oColumn:sap.ui.table.Column, oSortOrder:sap.ui.table.SortOrder, bAdd:boolean): sap.ui.table.Table;
		/**
		 * Unbinds aggregation <code>columns</code> from model data.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 unbindColumns(): sap.ui.table.Table;
		/**
		 * Unbinds aggregation <code>rows</code> from model data.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 unbindRows(): sap.ui.table.Table;
	}
	/**
	 * Different modes for setting the auto expand mode on different tables (Analytical-, TreeTable, ...)
	 */
	type TreeAutoExpandMode = any
	class TreeTable extends sap.ui.table.Table{
		/**
		 * Constructor for a new TreeTable.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given
		 * @param mSettings initial settings for the new control
		 */
		 constructor(sId?:string, mSettings?:any);
		/**
		 * Marks a range of tree nodes as selected, starting with iFromIndex going to iToIndex.
		 * The TreeNodes are referenced via their absolute row index.
		 * Please be aware, that the absolute row index only applies to the the tree which is visualized by the TreeTable.
		 * Invisible nodes (collapsed child nodes) will not be regarded.
		 * 
		 * Please also take notice of the fact, that "addSelectionInterval" does not change any other selection.
		 * To override the current selection, please use "setSelctionInterval" or for a single entry use "setSelectedIndex".
		 * @param iFromIndex The starting index of the range which will be selected.
		 * @param iToIndex The starting index of the range which will be selected.
		 * @return a reference on the TreeTable control, can be used for chaining
		 */
		 addSelectionInterval(iFromIndex:number, iToIndex:number): sap.ui.table.TreeTable;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>toggleOpenState</code> event of this <code>sap.ui.table.TreeTable</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.ui.table.TreeTable</code> itself.
		 * 
		 * fired when a node has been expanded or collapsed (only available in hierachical mode)
		 * @param fnFunction The function to be called when the event occurs
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.table.TreeTable</code> itself
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 attachToggleOpenState(fnFunction:any, oData?:any, oListener?:any): sap.ui.table.TreeTable;
		/**
		 * Clears the complete selection (all tree table rows/nodes will lose their selection)
		 * @return a reference on the TreeTable control, can be used for chaining
		 */
		 clearSelection(): sap.ui.table.TreeTable;
		/**
		 * collapses the row for the given row index
		 * @param iRowIndex index of the row to collapse
		 * @return a reference on the TreeTable control, can be used for chaining
		 */
		 collapse(iRowIndex:number): sap.ui.table.TreeTable;
		/**
		 * Collapses all nodes (and lower if collapseRecursive is activated)
		 * @return a reference on the TreeTable control, can be used for chaining
		 */
		 collapseAll(): sap.ui.table.TreeTable;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>toggleOpenState</code> event of this <code>sap.ui.table.TreeTable</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 detachToggleOpenState(fnFunction:any, oListener:any): sap.ui.table.TreeTable;
		/**
		 * expands the row for the given row index
		 * @param iRowIndex index of the row to expand
		 * @return a reference on the TreeTable control, can be used for chaining
		 */
		 expand(iRowIndex:number): sap.ui.table.TreeTable;
		/**
		 * Expands all nodes starting from the root level to the given level 'iLevel'.
		 * 
		 * Only supported with ODataModel v2, when running in OperationMode.Client or OperationMode.Auto.
		 * Fully supported for <code>sap.ui.model.ClientTreeBinding</code>, e.g. if you are using a <code>sap.ui.model.json.JSONModel</code>.
		 * 
		 * Please also see <code>sap.ui.model.odata.OperationMode</code>.
		 * @param iLevel the level to which the trees shall be expanded
		 * @return a reference on the TreeTable control, can be used for chaining
		 */
		 expandToLevel(iLevel:number): sap.ui.table.TreeTable;
		/**
		 * Creates a new subclass of class sap.ui.table.TreeTable with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.table.Table.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Fires event <code>toggleOpenState</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>rowIndex</code> of type <code>int</code>index of the expanded/collapsed row</li>
		 * <li><code>rowContext</code> of type <code>object</code>binding context of the selected row</li>
		 * <li><code>expanded</code> of type <code>boolean</code>flag whether the node has been expanded or collapsed</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		protected fireToggleOpenState(mArguments?:any): sap.ui.table.TreeTable;
		/**
		 * Gets current value of property <code>collapseRecursive</code>.
		 * 
		 * Setting collapseRecursive to true means, that when collapsing a node all subsequent child nodes will also be collapsed.
		 * This property is only supported with sap.ui.model.odata.v2.ODataModel
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>collapseRecursive</code>
		 */
		 getCollapseRecursive(): boolean;
		/**
		 * Gets current value of property <code>expandFirstLevel</code>.
		 * 
		 * Flag to enable or disable expanding of first level.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>expandFirstLevel</code>
		 */
		 getExpandFirstLevel(): boolean;
		/**
		 * Gets current value of property <code>groupHeaderProperty</code>.
		 * 
		 * The property name of the rows data which will be displayed as a group header if the group mode is enabled
		 * @return Value of property <code>groupHeaderProperty</code>
		 */
		 getGroupHeaderProperty(): string;
		/**
		 * Returns a metadata object for class sap.ui.table.TreeTable.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Gets current value of property <code>rootLevel</code>.
		 * 
		 * The root level is the level of the topmost tree nodes, which will be used as an entry point for OData services.
		 * This property is only supported when the TreeTable uses an underlying odata services with hierarchy annotations.
		 * This property is only supported with sap.ui.model.odata.v2.ODataModel
		 * The hierarchy annotations may also be provided locally as a parameter for the ODataTreeBinding.
		 * 
		 * Default value is <code>0</code>.
		 * @return Value of property <code>rootLevel</code>
		 */
		 getRootLevel(): number;
		/**
		 * Retrieves the lead selection index. The lead selection index is, among other things, used to determine the
		 * start/end of a selection range, when using Shift-Click to select multiple entries at once.
		 * @return an array containing all selected indices (ascending ordered integers)
		 */
		 getSelectedIndex(): number[];
		/**
		 * Returns an array containing the row indices of all selected tree nodes (ordered ascending).
		 * 
		 * Please be aware of the following:
		 * Due to performance/network traffic reasons, the getSelectedIndices function returns only all indices
		 * of actually selected rows/tree nodes. Unknown rows/nodes (as in "not yet loaded" to the client), will not be
		 * returned.
		 * @return an array containing all selected indices
		 */
		 getSelectedIndices(): number[];
		/**
		 * Gets current value of property <code>useGroupMode</code>.
		 * 
		 * If group mode is enable nodes with subitems are rendered as if they were group headers.
		 * This can be used to do the grouping for an OData service on the backend and visualize this in a table.
		 * This mode only makes sense if the tree has a depth of exacly 1 (group headers and entries)
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>useGroupMode</code>
		 */
		 getUseGroupMode(): boolean;
		/**
		 * Returns whether the row is expanded or collapsed.
		 * @param iRowIndex index of the row to check
		 * @return true if the node at "iRowIndex" is expanded, false otherwise (meaning it is collapsed)
		 */
		 isExpanded(iRowIndex:number): boolean;
		/**
		 * Checks if the row at the given index is selected.
		 * @param iRowIndex The row index for which the selection state should be retrieved
		 * @return true if the index is selected, false otherwise
		 */
		 isIndexSelected(iRowIndex:number): boolean;
		/**
		 * All rows/tree nodes inside the range (including boundaries) will be deselected.
		 * Tree nodes are referenced with theit absolute row index inside the tree-
		 * Please be aware, that the absolute row index only applies to the the tree which is visualized by the TreeTable.
		 * Invisible nodes (collapsed child nodes) will not be regarded.
		 * @param iFromIndex The starting index of the range which will be deselected.
		 * @param iToIndex The starting index of the range which will be deselected.
		 * @return a reference on the TreeTable control, can be used for chaining
		 */
		 removeSelectionInterval(iFromIndex:number, iToIndex:number): sap.ui.table.TreeTable;
		/**
		 * Selects all available nodes/rows.
		 * 
		 * Explanation of the SelectAll function and what to expect from its behavior:
		 * All rows/tree nodes locally stored on the client are selected.
		 * In addition all subsequent rows/tree nodes, which will be paged into view are also immediatly selected.
		 * However, due to obvious performance/network traffic reasons, the SelectAll function will NOT retrieve any data from the backend.
		 * @return a reference on the TreeTable control, can be used for chaining
		 */
		 selectAll(): sap.ui.table.TreeTable;
		/**
		 * Sets a new value for property <code>expandFirstLevel</code>.
		 * 
		 * Flag to enable or disable expanding of first level.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bExpandFirstLevel New value for property <code>expandFirstLevel</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setExpandFirstLevel(bExpandFirstLevel:boolean): sap.ui.table.TreeTable;
		/**
		 * Setter for property <code>fixedRowCount</code>.
		 * 
		 * <b>This property is not supportd for the TreeTable and will be ignored!</b>
		 * 
		 * Default value is <code>0</code>
		 * @param iFixedRowCount new value for property <code>fixedRowCount</code>
		 * @return <code>this</code> to allow method chaining
		 */
		 setFixedRowCount(iFixedRowCount:number): sap.ui.table.TreeTable;
		/**
		 * Sets a new value for property <code>groupHeaderProperty</code>.
		 * 
		 * The property name of the rows data which will be displayed as a group header if the group mode is enabled
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sGroupHeaderProperty New value for property <code>groupHeaderProperty</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setGroupHeaderProperty(sGroupHeaderProperty:string): sap.ui.table.TreeTable;
		/**
		 * Overriden from Table.js base class.
		 * In a TreeTable you can only select indices, which correspond to the currently visualized tree.
		 * Invisible tree nodes (e.g. collapsed child nodes) can not be selected via Index, because they do not
		 * correspond to a TreeTable row.
		 * @param iRowIndex The row index which will be selected (if existing)
		 * @return a reference on the TreeTable control, can be used for chaining
		 */
		 setSelectedIndex(iRowIndex:number): sap.ui.table.TreeTable;
		/**
		 * Sets the selection of the TreeTable to the given range (including boundaries).
		 * Beware: The previous selection will be lost/overriden. If this is not wanted, please use "addSelectionInterval" and
		 * "removeSelectionIntervall".
		 * @param iFromIndex the start index of the selection range
		 * @param iToIndex the end index of the selection range
		 * @return a reference on the TreeTable control, can be used for chaining
		 */
		 setSelectionInterval(iFromIndex:number, iToIndex:number): sap.ui.table.TreeTable;
		/**
		 * Sets the selection mode. The current selection is lost.
		 * @param sSelectionMode the selection mode, see sap.ui.table.SelectionMode
		 * @return a reference on the table for chaining
		 */
		 setSelectionMode(sSelectionMode:string);
		/**
		 * Sets a new value for property <code>useGroupMode</code>.
		 * 
		 * If group mode is enable nodes with subitems are rendered as if they were group headers.
		 * This can be used to do the grouping for an OData service on the backend and visualize this in a table.
		 * This mode only makes sense if the tree has a depth of exacly 1 (group headers and entries)
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bUseGroupMode New value for property <code>useGroupMode</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setUseGroupMode(bUseGroupMode:boolean): sap.ui.table.TreeTable;
	}
	/**
	 * VisibleRowCountMode of the table
	 */
	type VisibleRowCountMode = 
	/**
	 * VisibleRowCountMode of the table
	 */
	"Auto" |
	/**
	 * VisibleRowCountMode of the table
	 */
	"Fixed" |
	/**
	 * VisibleRowCountMode of the table
	 */
	"Interactive";
}

declare namespace sap.ui.test.gherkin.dataTableUtils {
	/**
	 * A simple object containing a series of normalization functions that change a string according to a
	 * particular strategy.
	 */
	namespace normalization {
		/**
		 * e.g. "First Name" -> "firstName"
		 * @param sString the string to normalize
		 * @return the input string with all words after the first capitalized and all spaces removed
		 */
		function camelCase(sString:string): string;
		/**
		 * e.g. "First Name" -> "first-name"
		 * @param sString the string to normalize
		 * @return the input string trimmed, changed to lower case and with space between words
		 *                   replaced by a hyphen ('-')
		 */
		function hyphenated(sString:string): string;
		/**
		 * e.g. "First Name" -> "First Name"
		 * @param sString the string to normalize
		 * @return the original unchanged input string
		 */
		function none(sString:string): string;
		/**
		 * e.g. "first name" -> "FirstName"
		 * @param sString the string to normalize
		 * @return the input string with all words capitalized and all spaces removed
		 */
		function pascalCase(sString:string): string;
		/**
		 * e.g. "first name" -> "First Name"
		 * @param sString the string to normalize
		 * @return the input string trimmed and with all words capitalized
		 */
		function titleCase(sString:string): string;
	}
}

declare namespace sap.ui.unified {
	/**
	 * Calendar Utility Class
	 */
	type calendar = any
	class FileUploader extends sap.ui.core.Control{
		/**
		 * Constructor for a new FileUploader.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given
		 * @param mSettings initial settings for the new control
		 */
		 constructor(sId?:string, mSettings?:any);
		/**
		 * Adds some headerParameter to the aggregation <code>headerParameters</code>.
		 * @param oHeaderParameter the headerParameter to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 addHeaderParameter(oHeaderParameter:sap.ui.unified.FileUploaderParameter): sap.ui.unified.FileUploader;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>change</code> event of this <code>sap.ui.unified.FileUploader</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.ui.unified.FileUploader</code> itself.
		 * 
		 * Event is fired when the value of the file path has been changed.
		 * @param fnFunction The function to be called when the event occurs
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.unified.FileUploader</code> itself
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 attachChange(fnFunction:any, oData?:any, oListener?:any): sap.ui.unified.FileUploader;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>fileAllowed</code> event of this <code>sap.ui.unified.FileUploader</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.ui.unified.FileUploader</code> itself.
		 * 
		 * Event is fired when the file is allowed for upload on client side.
		 * @param fnFunction The function to be called when the event occurs
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.unified.FileUploader</code> itself
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 attachFileAllowed(fnFunction:any, oData?:any, oListener?:any): sap.ui.unified.FileUploader;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>fileSizeExceed</code> event of this <code>sap.ui.unified.FileUploader</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.ui.unified.FileUploader</code> itself.
		 * 
		 * Event is fired when the size of a file is above the maximumFileSize property.
		 * This event is not supported by Internet Explorer 9 (same restriction as for the property maximumFileSize).
		 * @param fnFunction The function to be called when the event occurs
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.unified.FileUploader</code> itself
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 attachFileSizeExceed(fnFunction:any, oData?:any, oListener?:any): sap.ui.unified.FileUploader;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>typeMissmatch</code> event of this <code>sap.ui.unified.FileUploader</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.ui.unified.FileUploader</code> itself.
		 * 
		 * Event is fired when the type of a file does not match the mimeType or fileType property.
		 * @param fnFunction The function to be called when the event occurs
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.unified.FileUploader</code> itself
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 attachTypeMissmatch(fnFunction:any, oData?:any, oListener?:any): sap.ui.unified.FileUploader;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>uploadComplete</code> event of this <code>sap.ui.unified.FileUploader</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.ui.unified.FileUploader</code> itself.
		 * 
		 * Event is fired as soon as the upload request is completed (either successful or unsuccessful). To see if the upload request was successful, check the 'state' parameter for a value 2xx.
		 * The uploads actual progress can be retrieved via the 'uploadProgress' Event.
		 * However this covers only the client side of the Upload process and does not give any success status from the server.
		 * @param fnFunction The function to be called when the event occurs
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.unified.FileUploader</code> itself
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 attachUploadComplete(fnFunction:any, oData?:any, oListener?:any): sap.ui.unified.FileUploader;
		/**
		 * Destroys all the headerParameters in the aggregation <code>headerParameters</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 destroyHeaderParameters(): sap.ui.unified.FileUploader;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>change</code> event of this <code>sap.ui.unified.FileUploader</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 detachChange(fnFunction:any, oListener:any): sap.ui.unified.FileUploader;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>fileAllowed</code> event of this <code>sap.ui.unified.FileUploader</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 detachFileAllowed(fnFunction:any, oListener:any): sap.ui.unified.FileUploader;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>fileSizeExceed</code> event of this <code>sap.ui.unified.FileUploader</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 detachFileSizeExceed(fnFunction:any, oListener:any): sap.ui.unified.FileUploader;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>typeMissmatch</code> event of this <code>sap.ui.unified.FileUploader</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 detachTypeMissmatch(fnFunction:any, oListener:any): sap.ui.unified.FileUploader;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>uploadComplete</code> event of this <code>sap.ui.unified.FileUploader</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 detachUploadComplete(fnFunction:any, oListener:any): sap.ui.unified.FileUploader;
		/**
		 * Creates a new subclass of class sap.ui.unified.FileUploader with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Fires event <code>change</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>newValue</code> of type <code>string</code>New file path value.</li>
		 * <li><code>files</code> of type <code>object[]</code>Files.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		protected fireChange(mArguments?:any): sap.ui.unified.FileUploader;
		/**
		 * Fires event <code>fileAllowed</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		protected fireFileAllowed(mArguments?:any): sap.ui.unified.FileUploader;
		/**
		 * Fires event <code>fileSizeExceed</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>fileName</code> of type <code>string</code>The name of a file to be uploaded.</li>
		 * <li><code>fileSize</code> of type <code>string</code>The size in MB of a file to be uploaded.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		protected fireFileSizeExceed(mArguments?:any): sap.ui.unified.FileUploader;
		/**
		 * Fires event <code>typeMissmatch</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>fileName</code> of type <code>string</code>The name of a file to be uploaded.</li>
		 * <li><code>fileType</code> of type <code>string</code>The file ending of a file to be uploaded.</li>
		 * <li><code>mimeType</code> of type <code>string</code>The MIME type of a file to be uploaded.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		protected fireTypeMissmatch(mArguments?:any): sap.ui.unified.FileUploader;
		/**
		 * Fires event <code>uploadComplete</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>fileName</code> of type <code>string</code>The name of a file to be uploaded.</li>
		 * <li><code>response</code> of type <code>string</code>Response message which comes from the server. On the server side this response has to be put within the &quot;body&quot; tags of the response document of the iFrame.
		 * It can consist of a return code and an optional message. This does not work in cross-domain scenarios.</li>
		 * <li><code>readyStateXHR</code> of type <code>string</code>ReadyState of the XHR request. Required for receiving a readyState is to set the property "sendXHR" to "true". This property is not supported by Internet Explorer 9.</li>
		 * <li><code>status</code> of type <code>string</code>Status of the XHR request. Required for receiving a status is to set the property "sendXHR" to "true". This property is not supported by Internet Explorer 9.</li>
		 * <li><code>responseRaw</code> of type <code>string</code>Http-Response which comes from the server. Required for receiving "responseRaw" is to set the property "sendXHR" to true. This property is not supported by Internet Explorer 9.</li>
		 * <li><code>headers</code> of type <code>object</code>Http-Response-Headers which come from the server. provided as a JSON-map, i.e. each header-field is reflected by a property in the header-object, with the property value reflecting the header-field's content.
		 * Required for receiving "header" is to set the property "sendXHR" to true.
		 * This property is not supported by Internet Explorer 9.</li>
		 * <li><code>requestHeaders</code> of type <code>object[]</code>Http-Request-Headers. Required for receiving "header" is to set the property "sendXHR" to true. This property is not supported by Internet Explorer 9.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		protected fireUploadComplete(mArguments?:any): sap.ui.unified.FileUploader;
		/**
		 * Gets current value of property <code>additionalData</code>.
		 * 
		 * Additional data that is sent to the back end service. Data will be transmitted as value of a hidden input where the name is derived from the name property with suffix -data.
		 * @return Value of property <code>additionalData</code>
		 */
		 getAdditionalData(): string;
		/**
		 * Gets current value of property <code>buttonOnly</code>.
		 * 
		 * If set to "true", the FileUploader will be rendered as Button only, without showing the InputField.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>buttonOnly</code>
		 */
		 getButtonOnly(): boolean;
		/**
		 * Gets current value of property <code>buttonText</code>.
		 * 
		 * The Button text can be overwritten using this property.
		 * @return Value of property <code>buttonText</code>
		 */
		 getButtonText(): string;
		/**
		 * Gets current value of property <code>enabled</code>.
		 * 
		 * Disabled controls have different colors, depending on customer settings.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>enabled</code>
		 */
		 getEnabled(): boolean;
		/**
		 * Gets current value of property <code>fileType</code>.
		 * 
		 * The chosen files will be checked against an array of file types. If at least one file does not fit the file type restriction the upload is prevented.
		 * Example: ["jpg", "png", "bmp"].
		 * @return Value of property <code>fileType</code>
		 */
		 getFileType(): string[];
		/**
		 * Gets content of aggregation <code>headerParameters</code>.
		 * 
		 * The header parameters for the FileUploader which are only submitted with XHR requests. Header parameters are not supported by Internet Explorer 9.
		 * @return 
		 */
		 getHeaderParameters(): sap.ui.unified.FileUploaderParameter[];
		/**
		 * Gets current value of property <code>maximumFileSize</code>.
		 * 
		 * A file size limit in megabytes which prevents the upload if at least one file exceeds it. This property is not supported by Internet Explorer 9.
		 * @return Value of property <code>maximumFileSize</code>
		 */
		 getMaximumFileSize(): number;
		/**
		 * Returns a metadata object for class sap.ui.unified.FileUploader.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
		/**
		 * Gets current value of property <code>mimeType</code>.
		 * 
		 * The chosen files will be checked against an array of mime types. If at least one file does not fit the mime type restriction the upload is prevented. This property is not supported by Internet Explorer 9.
		 * Example: mimeType ["image/png", "image/jpeg"].
		 * @return Value of property <code>mimeType</code>
		 */
		 getMimeType(): string[];
		/**
		 * Gets current value of property <code>multiple</code>.
		 * 
		 * Allows multiple files to be chosen and uploaded from the same folder. This property is not supported by Internet Explorer 9.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>multiple</code>
		 */
		 getMultiple(): boolean;
		/**
		 * Gets current value of property <code>name</code>.
		 * 
		 * Unique control name for identification on the server side after sending data to the server.
		 * @return Value of property <code>name</code>
		 */
		 getName(): string;
		/**
		 * Gets current value of property <code>placeholder</code>.
		 * 
		 * Placeholder for the text field.
		 * @return Value of property <code>placeholder</code>
		 */
		 getPlaceholder(): string;
		/**
		 * Gets current value of property <code>sameFilenameAllowed</code>.
		 * 
		 * If the FileUploader is configured to upload the file directly after the file is selected it is not allowed to upload a file with the same name again. If a user should be allowed to upload a file with the same name again this parameter has to be "true". A typical use case would be if the files have different paths.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>sameFilenameAllowed</code>
		 */
		 getSameFilenameAllowed(): boolean;
		/**
		 * Gets current value of property <code>sendXHR</code>.
		 * 
		 * If set to "true", the request will be sent as XHR request instead of a form submit. This property is not supported by Internet Explorer 9.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>sendXHR</code>
		 */
		 getSendXHR(): boolean;
		/**
		 * Gets current value of property <code>style</code>.
		 * 
		 * Style of the button. "Transparent, "Accept", "Reject", or "Emphasized" is allowed.
		 * @return Value of property <code>style</code>
		 */
		 getStyle(): string;
		/**
		 * Gets current value of property <code>uploadOnChange</code>.
		 * 
		 * If set to "true", the upload immediately starts after file selection. With the default setting, the upload needs to be explicitly triggered.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>uploadOnChange</code>
		 */
		 getUploadOnChange(): boolean;
		/**
		 * Gets current value of property <code>uploadUrl</code>.
		 * 
		 * Used when URL address is on a remote server.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>uploadUrl</code>
		 */
		 getUploadUrl(): sap.ui.core.URI;
		/**
		 * Gets current value of property <code>useMultipart</code>.
		 * 
		 * If set to "false", the request will be sent as file only request instead of a multipart/form-data request. Only one file could be uploaded using this type of request. Required for sending such a request is to set the property "sendXHR" to "true". This property is not supported by Internet Explorer 9.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>useMultipart</code>
		 */
		 getUseMultipart(): boolean;
		/**
		 * Gets current value of property <code>value</code>.
		 * 
		 * Value of the path for file upload.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>value</code>
		 */
		 getValue(): string;
		/**
		 * Gets current value of property <code>width</code>.
		 * 
		 * Specifies the displayed control width.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>width</code>
		 */
		 getWidth(): sap.ui.core.CSSSize;
		/**
		 * Checks for the provided <code>sap.ui.unified.FileUploaderParameter</code> in the aggregation <code>headerParameters</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oHeaderParameter The headerParameter whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		 indexOfHeaderParameter(oHeaderParameter:sap.ui.unified.FileUploaderParameter): number;
		/**
		 * Inserts a headerParameter into the aggregation <code>headerParameters</code>.
		 * @param oHeaderParameter the headerParameter to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the headerParameter should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the headerParameter is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the headerParameter is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 insertHeaderParameter(oHeaderParameter:sap.ui.unified.FileUploaderParameter, iIndex:number): sap.ui.unified.FileUploader;
		/**
		 * Removes all the controls from the aggregation <code>headerParameters</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		 removeAllHeaderParameters(): sap.ui.unified.FileUploaderParameter[];
		/**
		 * Removes a headerParameter from the aggregation <code>headerParameters</code>.
		 * @param vHeaderParameter The headerParameter to remove or its index or id
		 * @return The removed headerParameter or <code>null</code>
		 */
		 removeHeaderParameter(vHeaderParameter:number|string|sap.ui.unified.FileUploaderParameter): sap.ui.unified.FileUploaderParameter;
		/**
		 * Sets a new value for property <code>additionalData</code>.
		 * 
		 * Additional data that is sent to the back end service. Data will be transmitted as value of a hidden input where the name is derived from the name property with suffix -data.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sAdditionalData New value for property <code>additionalData</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setAdditionalData(sAdditionalData:string): sap.ui.unified.FileUploader;
		/**
		 * Sets a new value for property <code>buttonOnly</code>.
		 * 
		 * If set to "true", the FileUploader will be rendered as Button only, without showing the InputField.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bButtonOnly New value for property <code>buttonOnly</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setButtonOnly(bButtonOnly:boolean): sap.ui.unified.FileUploader;
		/**
		 * Sets a new value for property <code>buttonText</code>.
		 * 
		 * The Button text can be overwritten using this property.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sButtonText New value for property <code>buttonText</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setButtonText(sButtonText:string): sap.ui.unified.FileUploader;
		/**
		 * Sets a new value for property <code>enabled</code>.
		 * 
		 * Disabled controls have different colors, depending on customer settings.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bEnabled New value for property <code>enabled</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setEnabled(bEnabled:boolean): sap.ui.unified.FileUploader;
		/**
		 * Sets a new value for property <code>fileType</code>.
		 * 
		 * The chosen files will be checked against an array of file types. If at least one file does not fit the file type restriction the upload is prevented.
		 * Example: ["jpg", "png", "bmp"].
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sFileType New value for property <code>fileType</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setFileType(sFileType:string[]): sap.ui.unified.FileUploader;
		/**
		 * Sets a new value for property <code>maximumFileSize</code>.
		 * 
		 * A file size limit in megabytes which prevents the upload if at least one file exceeds it. This property is not supported by Internet Explorer 9.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param fMaximumFileSize New value for property <code>maximumFileSize</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setMaximumFileSize(fMaximumFileSize:number): sap.ui.unified.FileUploader;
		/**
		 * Sets a new value for property <code>mimeType</code>.
		 * 
		 * The chosen files will be checked against an array of mime types. If at least one file does not fit the mime type restriction the upload is prevented. This property is not supported by Internet Explorer 9.
		 * Example: mimeType ["image/png", "image/jpeg"].
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sMimeType New value for property <code>mimeType</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setMimeType(sMimeType:string[]): sap.ui.unified.FileUploader;
		/**
		 * Sets a new value for property <code>multiple</code>.
		 * 
		 * Allows multiple files to be chosen and uploaded from the same folder. This property is not supported by Internet Explorer 9.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bMultiple New value for property <code>multiple</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setMultiple(bMultiple:boolean): sap.ui.unified.FileUploader;
		/**
		 * Sets a new value for property <code>name</code>.
		 * 
		 * Unique control name for identification on the server side after sending data to the server.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sName New value for property <code>name</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setName(sName:string): sap.ui.unified.FileUploader;
		/**
		 * Sets a new value for property <code>placeholder</code>.
		 * 
		 * Placeholder for the text field.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sPlaceholder New value for property <code>placeholder</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setPlaceholder(sPlaceholder:string): sap.ui.unified.FileUploader;
		/**
		 * Sets a new value for property <code>sameFilenameAllowed</code>.
		 * 
		 * If the FileUploader is configured to upload the file directly after the file is selected it is not allowed to upload a file with the same name again. If a user should be allowed to upload a file with the same name again this parameter has to be "true". A typical use case would be if the files have different paths.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bSameFilenameAllowed New value for property <code>sameFilenameAllowed</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setSameFilenameAllowed(bSameFilenameAllowed:boolean): sap.ui.unified.FileUploader;
		/**
		 * Sets a new value for property <code>sendXHR</code>.
		 * 
		 * If set to "true", the request will be sent as XHR request instead of a form submit. This property is not supported by Internet Explorer 9.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bSendXHR New value for property <code>sendXHR</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setSendXHR(bSendXHR:boolean): sap.ui.unified.FileUploader;
		/**
		 * Sets a new value for property <code>style</code>.
		 * 
		 * Style of the button. "Transparent, "Accept", "Reject", or "Emphasized" is allowed.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sStyle New value for property <code>style</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setStyle(sStyle:string): sap.ui.unified.FileUploader;
		/**
		 * Sets a new value for property <code>uploadOnChange</code>.
		 * 
		 * If set to "true", the upload immediately starts after file selection. With the default setting, the upload needs to be explicitly triggered.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bUploadOnChange New value for property <code>uploadOnChange</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setUploadOnChange(bUploadOnChange:boolean): sap.ui.unified.FileUploader;
		/**
		 * Sets a new value for property <code>uploadUrl</code>.
		 * 
		 * Used when URL address is on a remote server.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sUploadUrl New value for property <code>uploadUrl</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setUploadUrl(sUploadUrl:sap.ui.core.URI): sap.ui.unified.FileUploader;
		/**
		 * Sets a new value for property <code>useMultipart</code>.
		 * 
		 * If set to "false", the request will be sent as file only request instead of a multipart/form-data request. Only one file could be uploaded using this type of request. Required for sending such a request is to set the property "sendXHR" to "true". This property is not supported by Internet Explorer 9.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bUseMultipart New value for property <code>useMultipart</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setUseMultipart(bUseMultipart:boolean): sap.ui.unified.FileUploader;
		/**
		 * Sets a new value for property <code>value</code>.
		 * 
		 * Value of the path for file upload.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sValue New value for property <code>value</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setValue(sValue:string): sap.ui.unified.FileUploader;
		/**
		 * Sets a new value for property <code>width</code>.
		 * 
		 * Specifies the displayed control width.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sWidth New value for property <code>width</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		 setWidth(sWidth:sap.ui.core.CSSSize): sap.ui.unified.FileUploader;
		/**
		 * Starts the upload (as defined by uploadUrl)
		 */
		 upload();
	}
	class FileUploaderParameter extends sap.ui.core.Element{
		/**
		 * Constructor for a new FileUploaderParameter.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given
		 * @param mSettings initial settings for the new control
		 */
		 constructor(sId?:string, mSettings?:any);
		/**
		 * Creates a new subclass of class sap.ui.unified.FileUploaderParameter with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
		 * @return Created class / constructor function
		 */
		 extend(sClassName:string, oClassInfo?:any, FNMetaImpl?:any): any;
		/**
		 * Returns a metadata object for class sap.ui.unified.FileUploaderParameter.
		 * @return Metadata object describing this class
		 */
		 getMetadata(): sap.ui.base.Metadata;
	}
}

declare namespace sap.ui.ux3 {
	/**
	 * Enumeration of available standard actions for 'sap.ui.ux3.ActionBar'. To be used as parameters for function 'sap.ui.ux3.ActionBar.getSocialAction'.
	 */
	type ActionBarSocialActions = 
	/**
	 * Enumeration of available standard actions for 'sap.ui.ux3.ActionBar'. To be used as parameters for function 'sap.ui.ux3.ActionBar.getSocialAction'.
	 */
	"Favorite" |
	/**
	 * Enumeration of available standard actions for 'sap.ui.ux3.ActionBar'. To be used as parameters for function 'sap.ui.ux3.ActionBar.getSocialAction'.
	 */
	"Flag" |
	/**
	 * Enumeration of available standard actions for 'sap.ui.ux3.ActionBar'. To be used as parameters for function 'sap.ui.ux3.ActionBar.getSocialAction'.
	 */
	"Follow" |
	/**
	 * Enumeration of available standard actions for 'sap.ui.ux3.ActionBar'. To be used as parameters for function 'sap.ui.ux3.ActionBar.getSocialAction'.
	 */
	"Open" |
	/**
	 * Enumeration of available standard actions for 'sap.ui.ux3.ActionBar'. To be used as parameters for function 'sap.ui.ux3.ActionBar.getSocialAction'.
	 */
	"Update";
	interface DataSetView {
	}
	/**
	 * Type of an Feeder.
	 */
	type FeederType = 
	/**
	 * Type of an Feeder.
	 */
	"Comment" |
	/**
	 * Type of an Feeder.
	 */
	"Large" |
	/**
	 * Type of an Feeder.
	 */
	"Medium";
	/**
	 * Defines the states of the follow action
	 */
	type FollowActionState = 
	/**
	 * Defines the states of the follow action
	 */
	"Default" |
	/**
	 * Defines the states of the follow action
	 */
	"Follow" |
	/**
	 * Defines the states of the follow action
	 */
	"Hold";
	/**
	 * This entries are used to set the visibility status of a NotificationBar
	 */
	type NotificationBarStatus = 
	/**
	 * This entries are used to set the visibility status of a NotificationBar
	 */
	"Default" |
	/**
	 * This entries are used to set the visibility status of a NotificationBar
	 */
	"Max" |
	/**
	 * This entries are used to set the visibility status of a NotificationBar
	 */
	"Min" |
	/**
	 * This entries are used to set the visibility status of a NotificationBar
	 */
	"None";
	/**
	 * Available shell header display types.
	 */
	type ShellHeaderType = 
	/**
	 * Available shell header display types.
	 */
	"BrandOnly" |
	/**
	 * Available shell header display types.
	 */
	"NoNavigation" |
	/**
	 * Available shell header display types.
	 */
	"SlimNavigation" |
	/**
	 * Available shell header display types.
	 */
	"Standard";
	/**
	 * VisibleItemCountMode of the FacetFilter defines if the FacetFilter takes the whole available height (Auto) in the surrounding container, or is so high as needed to show 5 Items ("Fixed " - default).
	 */
	type VisibleItemCountMode = 
	/**
	 * VisibleItemCountMode of the FacetFilter defines if the FacetFilter takes the whole available height (Auto) in the surrounding container, or is so high as needed to show 5 Items ("Fixed " - default).
	 */
	"Auto" |
	/**
	 * VisibleItemCountMode of the FacetFilter defines if the FacetFilter takes the whole available height (Auto) in the surrounding container, or is so high as needed to show 5 Items ("Fixed " - default).
	 */
	"Fixed";
}
